
ex_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002954  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002a60  08002a60  00012a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a80  08002a80  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08002a80  08002a80  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a80  08002a80  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a80  08002a80  00012a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a84  08002a84  00012a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08002a88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000094  08002b1c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08002b1c  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009bc4  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bbd  00000000  00000000  00029c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  0002b840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  0002c268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017432  00000000  00000000  0002cb88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc31  00000000  00000000  00043fba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085446  00000000  00000000  0004fbeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d5031  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002800  00000000  00000000  000d5084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a48 	.word	0x08002a48

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	08002a48 	.word	0x08002a48

0800014c <show7SEG>:
#include "7SegLed.h"
#include "main.h"

void show7SEG(GPIO_PinState A, GPIO_PinState B, GPIO_PinState C, GPIO_PinState D, GPIO_PinState E,
				GPIO_PinState F, GPIO_PinState G)
{
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4604      	mov	r4, r0
 8000154:	4608      	mov	r0, r1
 8000156:	4611      	mov	r1, r2
 8000158:	461a      	mov	r2, r3
 800015a:	4623      	mov	r3, r4
 800015c:	71fb      	strb	r3, [r7, #7]
 800015e:	4603      	mov	r3, r0
 8000160:	71bb      	strb	r3, [r7, #6]
 8000162:	460b      	mov	r3, r1
 8000164:	717b      	strb	r3, [r7, #5]
 8000166:	4613      	mov	r3, r2
 8000168:	713b      	strb	r3, [r7, #4]
	HAL_GPIO_WritePin(segA_GPIO_Port, segA_Pin, A);
 800016a:	79fb      	ldrb	r3, [r7, #7]
 800016c:	461a      	mov	r2, r3
 800016e:	2101      	movs	r1, #1
 8000170:	4815      	ldr	r0, [pc, #84]	; (80001c8 <show7SEG+0x7c>)
 8000172:	f001 fc40 	bl	80019f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segB_GPIO_Port, segB_Pin, B);
 8000176:	79bb      	ldrb	r3, [r7, #6]
 8000178:	461a      	mov	r2, r3
 800017a:	2102      	movs	r1, #2
 800017c:	4812      	ldr	r0, [pc, #72]	; (80001c8 <show7SEG+0x7c>)
 800017e:	f001 fc3a 	bl	80019f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segC_GPIO_Port, segC_Pin, C);
 8000182:	797b      	ldrb	r3, [r7, #5]
 8000184:	461a      	mov	r2, r3
 8000186:	2104      	movs	r1, #4
 8000188:	480f      	ldr	r0, [pc, #60]	; (80001c8 <show7SEG+0x7c>)
 800018a:	f001 fc34 	bl	80019f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segD_GPIO_Port, segD_Pin, D);
 800018e:	793b      	ldrb	r3, [r7, #4]
 8000190:	461a      	mov	r2, r3
 8000192:	2108      	movs	r1, #8
 8000194:	480c      	ldr	r0, [pc, #48]	; (80001c8 <show7SEG+0x7c>)
 8000196:	f001 fc2e 	bl	80019f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segE_GPIO_Port, segE_Pin, E);
 800019a:	7e3b      	ldrb	r3, [r7, #24]
 800019c:	461a      	mov	r2, r3
 800019e:	2110      	movs	r1, #16
 80001a0:	4809      	ldr	r0, [pc, #36]	; (80001c8 <show7SEG+0x7c>)
 80001a2:	f001 fc28 	bl	80019f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segF_GPIO_Port, segF_Pin, F);
 80001a6:	7f3b      	ldrb	r3, [r7, #28]
 80001a8:	461a      	mov	r2, r3
 80001aa:	2120      	movs	r1, #32
 80001ac:	4806      	ldr	r0, [pc, #24]	; (80001c8 <show7SEG+0x7c>)
 80001ae:	f001 fc22 	bl	80019f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segG_GPIO_Port, segG_Pin, G);
 80001b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80001b6:	461a      	mov	r2, r3
 80001b8:	2140      	movs	r1, #64	; 0x40
 80001ba:	4803      	ldr	r0, [pc, #12]	; (80001c8 <show7SEG+0x7c>)
 80001bc:	f001 fc1b 	bl	80019f6 <HAL_GPIO_WritePin>
}
 80001c0:	bf00      	nop
 80001c2:	370c      	adds	r7, #12
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bd90      	pop	{r4, r7, pc}
 80001c8:	40010800 	.word	0x40010800

080001cc <display>:

void display(int num)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b086      	sub	sp, #24
 80001d0:	af04      	add	r7, sp, #16
 80001d2:	6078      	str	r0, [r7, #4]
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	2b09      	cmp	r3, #9
 80001d8:	f200 809a 	bhi.w	8000310 <display+0x144>
 80001dc:	a201      	add	r2, pc, #4	; (adr r2, 80001e4 <display+0x18>)
 80001de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001e2:	bf00      	nop
 80001e4:	0800020d 	.word	0x0800020d
 80001e8:	08000227 	.word	0x08000227
 80001ec:	08000241 	.word	0x08000241
 80001f0:	0800025b 	.word	0x0800025b
 80001f4:	08000275 	.word	0x08000275
 80001f8:	0800028f 	.word	0x0800028f
 80001fc:	080002a9 	.word	0x080002a9
 8000200:	080002c3 	.word	0x080002c3
 8000204:	080002dd 	.word	0x080002dd
 8000208:	080002f7 	.word	0x080002f7
	switch (num)
	{
		case 0:
			show7SEG(0, 0, 0, 0, 0, 0, 1);
 800020c:	2301      	movs	r3, #1
 800020e:	9302      	str	r3, [sp, #8]
 8000210:	2300      	movs	r3, #0
 8000212:	9301      	str	r3, [sp, #4]
 8000214:	2300      	movs	r3, #0
 8000216:	9300      	str	r3, [sp, #0]
 8000218:	2300      	movs	r3, #0
 800021a:	2200      	movs	r2, #0
 800021c:	2100      	movs	r1, #0
 800021e:	2000      	movs	r0, #0
 8000220:	f7ff ff94 	bl	800014c <show7SEG>
			break;
 8000224:	e081      	b.n	800032a <display+0x15e>
		case 1:
			show7SEG(1, 0, 0, 1,  1, 1, 1);
 8000226:	2301      	movs	r3, #1
 8000228:	9302      	str	r3, [sp, #8]
 800022a:	2301      	movs	r3, #1
 800022c:	9301      	str	r3, [sp, #4]
 800022e:	2301      	movs	r3, #1
 8000230:	9300      	str	r3, [sp, #0]
 8000232:	2301      	movs	r3, #1
 8000234:	2200      	movs	r2, #0
 8000236:	2100      	movs	r1, #0
 8000238:	2001      	movs	r0, #1
 800023a:	f7ff ff87 	bl	800014c <show7SEG>
			break;
 800023e:	e074      	b.n	800032a <display+0x15e>
		case 2:
			show7SEG(0, 0, 1, 0, 0, 1, 0);
 8000240:	2300      	movs	r3, #0
 8000242:	9302      	str	r3, [sp, #8]
 8000244:	2301      	movs	r3, #1
 8000246:	9301      	str	r3, [sp, #4]
 8000248:	2300      	movs	r3, #0
 800024a:	9300      	str	r3, [sp, #0]
 800024c:	2300      	movs	r3, #0
 800024e:	2201      	movs	r2, #1
 8000250:	2100      	movs	r1, #0
 8000252:	2000      	movs	r0, #0
 8000254:	f7ff ff7a 	bl	800014c <show7SEG>
			break;
 8000258:	e067      	b.n	800032a <display+0x15e>

		case 3:
			show7SEG(0, 0, 0, 0, 1, 1, 0);
 800025a:	2300      	movs	r3, #0
 800025c:	9302      	str	r3, [sp, #8]
 800025e:	2301      	movs	r3, #1
 8000260:	9301      	str	r3, [sp, #4]
 8000262:	2301      	movs	r3, #1
 8000264:	9300      	str	r3, [sp, #0]
 8000266:	2300      	movs	r3, #0
 8000268:	2200      	movs	r2, #0
 800026a:	2100      	movs	r1, #0
 800026c:	2000      	movs	r0, #0
 800026e:	f7ff ff6d 	bl	800014c <show7SEG>
			break;
 8000272:	e05a      	b.n	800032a <display+0x15e>
		case 4:
			show7SEG(1, 0, 0, 1, 1, 0, 0);
 8000274:	2300      	movs	r3, #0
 8000276:	9302      	str	r3, [sp, #8]
 8000278:	2300      	movs	r3, #0
 800027a:	9301      	str	r3, [sp, #4]
 800027c:	2301      	movs	r3, #1
 800027e:	9300      	str	r3, [sp, #0]
 8000280:	2301      	movs	r3, #1
 8000282:	2200      	movs	r2, #0
 8000284:	2100      	movs	r1, #0
 8000286:	2001      	movs	r0, #1
 8000288:	f7ff ff60 	bl	800014c <show7SEG>
			break;
 800028c:	e04d      	b.n	800032a <display+0x15e>
		case 5:
			show7SEG(0, 1, 0, 0, 1, 0, 0);
 800028e:	2300      	movs	r3, #0
 8000290:	9302      	str	r3, [sp, #8]
 8000292:	2300      	movs	r3, #0
 8000294:	9301      	str	r3, [sp, #4]
 8000296:	2301      	movs	r3, #1
 8000298:	9300      	str	r3, [sp, #0]
 800029a:	2300      	movs	r3, #0
 800029c:	2200      	movs	r2, #0
 800029e:	2101      	movs	r1, #1
 80002a0:	2000      	movs	r0, #0
 80002a2:	f7ff ff53 	bl	800014c <show7SEG>
			break;
 80002a6:	e040      	b.n	800032a <display+0x15e>
		case 6:
			show7SEG(0, 1, 0, 0, 0, 0, 0);
 80002a8:	2300      	movs	r3, #0
 80002aa:	9302      	str	r3, [sp, #8]
 80002ac:	2300      	movs	r3, #0
 80002ae:	9301      	str	r3, [sp, #4]
 80002b0:	2300      	movs	r3, #0
 80002b2:	9300      	str	r3, [sp, #0]
 80002b4:	2300      	movs	r3, #0
 80002b6:	2200      	movs	r2, #0
 80002b8:	2101      	movs	r1, #1
 80002ba:	2000      	movs	r0, #0
 80002bc:	f7ff ff46 	bl	800014c <show7SEG>
			break;
 80002c0:	e033      	b.n	800032a <display+0x15e>
		case 7:
			show7SEG(0, 0, 0, 1, 1, 1, 1);
 80002c2:	2301      	movs	r3, #1
 80002c4:	9302      	str	r3, [sp, #8]
 80002c6:	2301      	movs	r3, #1
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	9300      	str	r3, [sp, #0]
 80002ce:	2301      	movs	r3, #1
 80002d0:	2200      	movs	r2, #0
 80002d2:	2100      	movs	r1, #0
 80002d4:	2000      	movs	r0, #0
 80002d6:	f7ff ff39 	bl	800014c <show7SEG>
			break;
 80002da:	e026      	b.n	800032a <display+0x15e>
		case 8:
			show7SEG(0, 0, 0, 0, 0, 0, 0);
 80002dc:	2300      	movs	r3, #0
 80002de:	9302      	str	r3, [sp, #8]
 80002e0:	2300      	movs	r3, #0
 80002e2:	9301      	str	r3, [sp, #4]
 80002e4:	2300      	movs	r3, #0
 80002e6:	9300      	str	r3, [sp, #0]
 80002e8:	2300      	movs	r3, #0
 80002ea:	2200      	movs	r2, #0
 80002ec:	2100      	movs	r1, #0
 80002ee:	2000      	movs	r0, #0
 80002f0:	f7ff ff2c 	bl	800014c <show7SEG>
			break;
 80002f4:	e019      	b.n	800032a <display+0x15e>
		case 9:
			show7SEG(0, 0, 0, 0, 1, 0, 0);
 80002f6:	2300      	movs	r3, #0
 80002f8:	9302      	str	r3, [sp, #8]
 80002fa:	2300      	movs	r3, #0
 80002fc:	9301      	str	r3, [sp, #4]
 80002fe:	2301      	movs	r3, #1
 8000300:	9300      	str	r3, [sp, #0]
 8000302:	2300      	movs	r3, #0
 8000304:	2200      	movs	r2, #0
 8000306:	2100      	movs	r1, #0
 8000308:	2000      	movs	r0, #0
 800030a:	f7ff ff1f 	bl	800014c <show7SEG>
			break;
 800030e:	e00c      	b.n	800032a <display+0x15e>
		default:
			show7SEG(0, 0, 0, 0, 1, 0, 0);
 8000310:	2300      	movs	r3, #0
 8000312:	9302      	str	r3, [sp, #8]
 8000314:	2300      	movs	r3, #0
 8000316:	9301      	str	r3, [sp, #4]
 8000318:	2301      	movs	r3, #1
 800031a:	9300      	str	r3, [sp, #0]
 800031c:	2300      	movs	r3, #0
 800031e:	2200      	movs	r2, #0
 8000320:	2100      	movs	r1, #0
 8000322:	2000      	movs	r0, #0
 8000324:	f7ff ff12 	bl	800014c <show7SEG>
			break;
 8000328:	bf00      	nop
	}
}
 800032a:	bf00      	nop
 800032c:	3708      	adds	r7, #8
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop

08000334 <resetAllSingleLed>:

#include "advancedMode.h"
#include "main.h"

void resetAllSingleLed()
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 8000338:	2200      	movs	r2, #0
 800033a:	2101      	movs	r1, #1
 800033c:	480e      	ldr	r0, [pc, #56]	; (8000378 <resetAllSingleLed+0x44>)
 800033e:	f001 fb5a 	bl	80019f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 8000342:	2200      	movs	r2, #0
 8000344:	2102      	movs	r1, #2
 8000346:	480c      	ldr	r0, [pc, #48]	; (8000378 <resetAllSingleLed+0x44>)
 8000348:	f001 fb55 	bl	80019f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 800034c:	2200      	movs	r2, #0
 800034e:	2104      	movs	r1, #4
 8000350:	4809      	ldr	r0, [pc, #36]	; (8000378 <resetAllSingleLed+0x44>)
 8000352:	f001 fb50 	bl	80019f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8000356:	2200      	movs	r2, #0
 8000358:	2108      	movs	r1, #8
 800035a:	4807      	ldr	r0, [pc, #28]	; (8000378 <resetAllSingleLed+0x44>)
 800035c:	f001 fb4b 	bl	80019f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 8000360:	2200      	movs	r2, #0
 8000362:	2120      	movs	r1, #32
 8000364:	4804      	ldr	r0, [pc, #16]	; (8000378 <resetAllSingleLed+0x44>)
 8000366:	f001 fb46 	bl	80019f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 800036a:	2200      	movs	r2, #0
 800036c:	2110      	movs	r1, #16
 800036e:	4802      	ldr	r0, [pc, #8]	; (8000378 <resetAllSingleLed+0x44>)
 8000370:	f001 fb41 	bl	80019f6 <HAL_GPIO_WritePin>

}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	40010c00 	.word	0x40010c00

0800037c <advancedModeFunction>:

void advancedModeFunction(int mode)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
	switch (mode)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	2b04      	cmp	r3, #4
 8000388:	d01b      	beq.n	80003c2 <advancedModeFunction+0x46>
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2b04      	cmp	r3, #4
 800038e:	dc21      	bgt.n	80003d4 <advancedModeFunction+0x58>
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	2b02      	cmp	r3, #2
 8000394:	d003      	beq.n	800039e <advancedModeFunction+0x22>
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	2b03      	cmp	r3, #3
 800039a:	d009      	beq.n	80003b0 <advancedModeFunction+0x34>
		case 4:
			HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
			HAL_GPIO_TogglePin(GREEN2_GPIO_Port, GREEN2_Pin);
			break;
		default:
			break;
 800039c:	e01a      	b.n	80003d4 <advancedModeFunction+0x58>
			HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 800039e:	2101      	movs	r1, #1
 80003a0:	480f      	ldr	r0, [pc, #60]	; (80003e0 <advancedModeFunction+0x64>)
 80003a2:	f001 fb40 	bl	8001a26 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(RED2_GPIO_Port, RED2_Pin);
 80003a6:	2108      	movs	r1, #8
 80003a8:	480d      	ldr	r0, [pc, #52]	; (80003e0 <advancedModeFunction+0x64>)
 80003aa:	f001 fb3c 	bl	8001a26 <HAL_GPIO_TogglePin>
			break;
 80003ae:	e012      	b.n	80003d6 <advancedModeFunction+0x5a>
			HAL_GPIO_TogglePin(YELLOW1_GPIO_Port, YELLOW1_Pin);
 80003b0:	2104      	movs	r1, #4
 80003b2:	480b      	ldr	r0, [pc, #44]	; (80003e0 <advancedModeFunction+0x64>)
 80003b4:	f001 fb37 	bl	8001a26 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(YELLOW2_GPIO_Port, YELLOW2_Pin);
 80003b8:	2120      	movs	r1, #32
 80003ba:	4809      	ldr	r0, [pc, #36]	; (80003e0 <advancedModeFunction+0x64>)
 80003bc:	f001 fb33 	bl	8001a26 <HAL_GPIO_TogglePin>
			break;
 80003c0:	e009      	b.n	80003d6 <advancedModeFunction+0x5a>
			HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 80003c2:	2102      	movs	r1, #2
 80003c4:	4806      	ldr	r0, [pc, #24]	; (80003e0 <advancedModeFunction+0x64>)
 80003c6:	f001 fb2e 	bl	8001a26 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GREEN2_GPIO_Port, GREEN2_Pin);
 80003ca:	2110      	movs	r1, #16
 80003cc:	4804      	ldr	r0, [pc, #16]	; (80003e0 <advancedModeFunction+0x64>)
 80003ce:	f001 fb2a 	bl	8001a26 <HAL_GPIO_TogglePin>
			break;
 80003d2:	e000      	b.n	80003d6 <advancedModeFunction+0x5a>
			break;
 80003d4:	bf00      	nop
	}
}
 80003d6:	bf00      	nop
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40010c00 	.word	0x40010c00

080003e4 <getInput>:

int durationPressLongButton[3]= {100, 100, 100};
int durationPressShortButton[3]= {20, 20, 20};

void getInput()
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
	for (int i= 0; i < 3; i++)
 80003ea:	2300      	movs	r3, #0
 80003ec:	607b      	str	r3, [r7, #4]
 80003ee:	e0ab      	b.n	8000548 <getInput+0x164>
	{
		state1Button[i]= state2Button[i];
 80003f0:	4a5a      	ldr	r2, [pc, #360]	; (800055c <getInput+0x178>)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003f8:	4959      	ldr	r1, [pc, #356]	; (8000560 <getInput+0x17c>)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state2Button[i]= state3Button[i];
 8000400:	4a58      	ldr	r2, [pc, #352]	; (8000564 <getInput+0x180>)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000408:	4954      	ldr	r1, [pc, #336]	; (800055c <getInput+0x178>)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state3Button[i]= HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 8000410:	4a55      	ldr	r2, [pc, #340]	; (8000568 <getInput+0x184>)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000418:	4954      	ldr	r1, [pc, #336]	; (800056c <getInput+0x188>)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000420:	4619      	mov	r1, r3
 8000422:	4610      	mov	r0, r2
 8000424:	f001 fad0 	bl	80019c8 <HAL_GPIO_ReadPin>
 8000428:	4603      	mov	r3, r0
 800042a:	4619      	mov	r1, r3
 800042c:	4a4d      	ldr	r2, [pc, #308]	; (8000564 <getInput+0x180>)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if ((state1Button[i]== state2Button[i]) && (state2Button[i]== state3Button[i]))
 8000434:	4a4a      	ldr	r2, [pc, #296]	; (8000560 <getInput+0x17c>)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800043c:	4947      	ldr	r1, [pc, #284]	; (800055c <getInput+0x178>)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000444:	429a      	cmp	r2, r3
 8000446:	d177      	bne.n	8000538 <getInput+0x154>
 8000448:	4a44      	ldr	r2, [pc, #272]	; (800055c <getInput+0x178>)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000450:	4944      	ldr	r1, [pc, #272]	; (8000564 <getInput+0x180>)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000458:	429a      	cmp	r2, r3
 800045a:	d16d      	bne.n	8000538 <getInput+0x154>
		{
			if (state0Button[i] != state1Button[i])
 800045c:	4a44      	ldr	r2, [pc, #272]	; (8000570 <getInput+0x18c>)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000464:	493e      	ldr	r1, [pc, #248]	; (8000560 <getInput+0x17c>)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800046c:	429a      	cmp	r2, r3
 800046e:	d029      	beq.n	80004c4 <getInput+0xe0>
			{
				switch (state0Button[i])
 8000470:	4a3f      	ldr	r2, [pc, #252]	; (8000570 <getInput+0x18c>)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d002      	beq.n	8000482 <getInput+0x9e>
 800047c:	2b01      	cmp	r3, #1
 800047e:	d011      	beq.n	80004a4 <getInput+0xc0>
						state0Button[i]= PRESS_STATE;
						durationPressLongButton[i]= 100;
						durationPressShortButton[i]= 20;
						break;
					default:
						break;
 8000480:	e05f      	b.n	8000542 <getInput+0x15e>
						state0Button[i]= NORMAL_STATE;
 8000482:	4a3b      	ldr	r2, [pc, #236]	; (8000570 <getInput+0x18c>)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	2101      	movs	r1, #1
 8000488:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						if (durationPressShortButton[i] > 0)
 800048c:	4a39      	ldr	r2, [pc, #228]	; (8000574 <getInput+0x190>)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000494:	2b00      	cmp	r3, #0
 8000496:	dd51      	ble.n	800053c <getInput+0x158>
							flagButton[i]= PRESS_STATE;
 8000498:	4a37      	ldr	r2, [pc, #220]	; (8000578 <getInput+0x194>)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	2100      	movs	r1, #0
 800049e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						break;
 80004a2:	e04b      	b.n	800053c <getInput+0x158>
						state0Button[i]= PRESS_STATE;
 80004a4:	4a32      	ldr	r2, [pc, #200]	; (8000570 <getInput+0x18c>)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	2100      	movs	r1, #0
 80004aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						durationPressLongButton[i]= 100;
 80004ae:	4a33      	ldr	r2, [pc, #204]	; (800057c <getInput+0x198>)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	2164      	movs	r1, #100	; 0x64
 80004b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						durationPressShortButton[i]= 20;
 80004b8:	4a2e      	ldr	r2, [pc, #184]	; (8000574 <getInput+0x190>)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	2114      	movs	r1, #20
 80004be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						break;
 80004c2:	e03e      	b.n	8000542 <getInput+0x15e>
				}
			}
			else
			{
				switch (state0Button[i])
 80004c4:	4a2a      	ldr	r2, [pc, #168]	; (8000570 <getInput+0x18c>)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <getInput+0xf0>
 80004d0:	2b01      	cmp	r3, #1
						{
							durationPressShortButton[i]--;
						}
						break;
					default:
						break;
 80004d2:	e036      	b.n	8000542 <getInput+0x15e>
						if (durationPressLongButton[i] > 0)
 80004d4:	4a29      	ldr	r2, [pc, #164]	; (800057c <getInput+0x198>)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	dd1b      	ble.n	8000518 <getInput+0x134>
							durationPressLongButton[i]--;
 80004e0:	4a26      	ldr	r2, [pc, #152]	; (800057c <getInput+0x198>)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004e8:	1e5a      	subs	r2, r3, #1
 80004ea:	4924      	ldr	r1, [pc, #144]	; (800057c <getInput+0x198>)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
							if (durationPressLongButton[i] <= 0)
 80004f2:	4a22      	ldr	r2, [pc, #136]	; (800057c <getInput+0x198>)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	dc0c      	bgt.n	8000518 <getInput+0x134>
								flagButton[i]= PRESS_STATE;
 80004fe:	4a1e      	ldr	r2, [pc, #120]	; (8000578 <getInput+0x194>)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2100      	movs	r1, #0
 8000504:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
								if (i== 1)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2b01      	cmp	r3, #1
 800050c:	d104      	bne.n	8000518 <getInput+0x134>
									durationPressLongButton[i]= 10;
 800050e:	4a1b      	ldr	r2, [pc, #108]	; (800057c <getInput+0x198>)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	210a      	movs	r1, #10
 8000514:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						if (durationPressShortButton[i] > 0)
 8000518:	4a16      	ldr	r2, [pc, #88]	; (8000574 <getInput+0x190>)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000520:	2b00      	cmp	r3, #0
 8000522:	dd0d      	ble.n	8000540 <getInput+0x15c>
							durationPressShortButton[i]--;
 8000524:	4a13      	ldr	r2, [pc, #76]	; (8000574 <getInput+0x190>)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800052c:	1e5a      	subs	r2, r3, #1
 800052e:	4911      	ldr	r1, [pc, #68]	; (8000574 <getInput+0x190>)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						break;
 8000536:	e003      	b.n	8000540 <getInput+0x15c>
				}
			}
 8000538:	bf00      	nop
 800053a:	e002      	b.n	8000542 <getInput+0x15e>
						break;
 800053c:	bf00      	nop
 800053e:	e000      	b.n	8000542 <getInput+0x15e>
						break;
 8000540:	bf00      	nop
	for (int i= 0; i < 3; i++)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	3301      	adds	r3, #1
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2b02      	cmp	r3, #2
 800054c:	f77f af50 	ble.w	80003f0 <getInput+0xc>
		}
	}
}
 8000550:	bf00      	nop
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	2000002c 	.word	0x2000002c
 8000560:	20000020 	.word	0x20000020
 8000564:	20000038 	.word	0x20000038
 8000568:	20000000 	.word	0x20000000
 800056c:	2000000c 	.word	0x2000000c
 8000570:	20000014 	.word	0x20000014
 8000574:	2000005c 	.word	0x2000005c
 8000578:	20000044 	.word	0x20000044
 800057c:	20000050 	.word	0x20000050

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 ff36 	bl	80013f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f9d8 	bl	800093c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 fa5e 	bl	8000a4c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000590:	f000 fa10 	bl	80009b4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000594:	489a      	ldr	r0, [pc, #616]	; (8000800 <main+0x280>)
 8000596:	f001 fe97 	bl	80022c8 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer1(1);
 800059a:	2001      	movs	r0, #1
 800059c:	f000 fd36 	bl	800100c <setTimer1>
    setTimer2(-1);
 80005a0:	f04f 30ff 	mov.w	r0, #4294967295
 80005a4:	f000 fd46 	bl	8001034 <setTimer2>
    setTimer3(-1);
 80005a8:	f04f 30ff 	mov.w	r0, #4294967295
 80005ac:	f000 fd56 	bl	800105c <setTimer3>
    while (1)
    {
  	 if (flag1== 1)  // flag for button
 80005b0:	4b94      	ldr	r3, [pc, #592]	; (8000804 <main+0x284>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	f040 8161 	bne.w	800087c <main+0x2fc>
  	 {
  		 setTimer1(10);
 80005ba:	200a      	movs	r0, #10
 80005bc:	f000 fd26 	bl	800100c <setTimer1>
  		 getInput();
 80005c0:	f7ff ff10 	bl	80003e4 <getInput>
  		 if (flagButton[0]== PRESS_STATE)
 80005c4:	4b90      	ldr	r3, [pc, #576]	; (8000808 <main+0x288>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	f040 80b6 	bne.w	800073a <main+0x1ba>
  		 {
  			 flagButton[0]= NORMAL_STATE;
 80005ce:	4b8e      	ldr	r3, [pc, #568]	; (8000808 <main+0x288>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	601a      	str	r2, [r3, #0]
  			 switch (modeStatus)
 80005d4:	4b8d      	ldr	r3, [pc, #564]	; (800080c <main+0x28c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2b04      	cmp	r3, #4
 80005da:	f200 80b0 	bhi.w	800073e <main+0x1be>
 80005de:	a201      	add	r2, pc, #4	; (adr r2, 80005e4 <main+0x64>)
 80005e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e4:	080005f9 	.word	0x080005f9
 80005e8:	0800063d 	.word	0x0800063d
 80005ec:	0800067d 	.word	0x0800067d
 80005f0:	080006bd 	.word	0x080006bd
 80005f4:	080006fd 	.word	0x080006fd
  			 {
  			 	case INITMODE:
  			 		modeStatus= MODE1;
 80005f8:	4b84      	ldr	r3, [pc, #528]	; (800080c <main+0x28c>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	601a      	str	r2, [r3, #0]
  					flagAdvancedMode= 0;
 80005fe:	4b84      	ldr	r3, [pc, #528]	; (8000810 <main+0x290>)
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
  					durationLedGreen= tempDurationLedGreen;
 8000604:	4b83      	ldr	r3, [pc, #524]	; (8000814 <main+0x294>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a83      	ldr	r2, [pc, #524]	; (8000818 <main+0x298>)
 800060a:	6013      	str	r3, [r2, #0]
  					durationLedYellow= tempDurationLedYellow;
 800060c:	4b83      	ldr	r3, [pc, #524]	; (800081c <main+0x29c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a83      	ldr	r2, [pc, #524]	; (8000820 <main+0x2a0>)
 8000612:	6013      	str	r3, [r2, #0]
  					durationLedRed= tempDurationLedRed;
 8000614:	4b83      	ldr	r3, [pc, #524]	; (8000824 <main+0x2a4>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a83      	ldr	r2, [pc, #524]	; (8000828 <main+0x2a8>)
 800061a:	6013      	str	r3, [r2, #0]
  					update7SEGBuffer(MODE1, 3);
 800061c:	2103      	movs	r1, #3
 800061e:	2001      	movs	r0, #1
 8000620:	f000 fdd2 	bl	80011c8 <update7SEGBuffer>
  					mode1Function();
 8000624:	f000 fa88 	bl	8000b38 <mode1Function>
  					setTimer2(1000);
 8000628:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800062c:	f000 fd02 	bl	8001034 <setTimer2>
  					update7SEG();
 8000630:	f000 fe1a 	bl	8001268 <update7SEG>
  					setTimer4(50);
 8000634:	2032      	movs	r0, #50	; 0x32
 8000636:	f000 fd25 	bl	8001084 <setTimer4>
  				 	 break;
 800063a:	e081      	b.n	8000740 <main+0x1c0>
  				case MODE1:
  					modeStatus= MODE2;
 800063c:	4b73      	ldr	r3, [pc, #460]	; (800080c <main+0x28c>)
 800063e:	2202      	movs	r2, #2
 8000640:	601a      	str	r2, [r3, #0]
  					flagAdvancedMode= 1;
 8000642:	4b73      	ldr	r3, [pc, #460]	; (8000810 <main+0x290>)
 8000644:	2201      	movs	r2, #1
 8000646:	601a      	str	r2, [r3, #0]
  					update7SEGBuffer(MODE2, 3);
 8000648:	2103      	movs	r1, #3
 800064a:	2002      	movs	r0, #2
 800064c:	f000 fdbc 	bl	80011c8 <update7SEGBuffer>
  					resetAllSingleLed();
 8000650:	f7ff fe70 	bl	8000334 <resetAllSingleLed>
  					advancedModeFunction(2);
 8000654:	2002      	movs	r0, #2
 8000656:	f7ff fe91 	bl	800037c <advancedModeFunction>
  					setTimer3(500);
 800065a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800065e:	f000 fcfd 	bl	800105c <setTimer3>
  					update7SEGBuffer(durationLedRed, 1);
 8000662:	4b71      	ldr	r3, [pc, #452]	; (8000828 <main+0x2a8>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2101      	movs	r1, #1
 8000668:	4618      	mov	r0, r3
 800066a:	f000 fdad 	bl	80011c8 <update7SEGBuffer>
  					update7SEGBuffer(durationLedRed, 2);
 800066e:	4b6e      	ldr	r3, [pc, #440]	; (8000828 <main+0x2a8>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2102      	movs	r1, #2
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fda7 	bl	80011c8 <update7SEGBuffer>
  					break;
 800067a:	e061      	b.n	8000740 <main+0x1c0>
  				case MODE2:
  					modeStatus= MODE3;
 800067c:	4b63      	ldr	r3, [pc, #396]	; (800080c <main+0x28c>)
 800067e:	2203      	movs	r2, #3
 8000680:	601a      	str	r2, [r3, #0]
  					flagAdvancedMode= 1;
 8000682:	4b63      	ldr	r3, [pc, #396]	; (8000810 <main+0x290>)
 8000684:	2201      	movs	r2, #1
 8000686:	601a      	str	r2, [r3, #0]
  					resetAllSingleLed();
 8000688:	f7ff fe54 	bl	8000334 <resetAllSingleLed>
  					advancedModeFunction(3);
 800068c:	2003      	movs	r0, #3
 800068e:	f7ff fe75 	bl	800037c <advancedModeFunction>
  					setTimer3(500);
 8000692:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000696:	f000 fce1 	bl	800105c <setTimer3>
  					update7SEGBuffer(durationLedYellow, 1);
 800069a:	4b61      	ldr	r3, [pc, #388]	; (8000820 <main+0x2a0>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2101      	movs	r1, #1
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 fd91 	bl	80011c8 <update7SEGBuffer>
  					update7SEGBuffer(durationLedYellow, 2);
 80006a6:	4b5e      	ldr	r3, [pc, #376]	; (8000820 <main+0x2a0>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2102      	movs	r1, #2
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fd8b 	bl	80011c8 <update7SEGBuffer>
  					update7SEGBuffer(MODE3, 3);
 80006b2:	2103      	movs	r1, #3
 80006b4:	2003      	movs	r0, #3
 80006b6:	f000 fd87 	bl	80011c8 <update7SEGBuffer>
  					break;
 80006ba:	e041      	b.n	8000740 <main+0x1c0>
  				case MODE3:
  					modeStatus= MODE4;
 80006bc:	4b53      	ldr	r3, [pc, #332]	; (800080c <main+0x28c>)
 80006be:	2204      	movs	r2, #4
 80006c0:	601a      	str	r2, [r3, #0]
  					flagAdvancedMode= 1;
 80006c2:	4b53      	ldr	r3, [pc, #332]	; (8000810 <main+0x290>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	601a      	str	r2, [r3, #0]
  					resetAllSingleLed();
 80006c8:	f7ff fe34 	bl	8000334 <resetAllSingleLed>
  					advancedModeFunction(4);
 80006cc:	2004      	movs	r0, #4
 80006ce:	f7ff fe55 	bl	800037c <advancedModeFunction>
  					setTimer3(500);
 80006d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006d6:	f000 fcc1 	bl	800105c <setTimer3>
  					update7SEGBuffer(durationLedGreen, 1);
 80006da:	4b4f      	ldr	r3, [pc, #316]	; (8000818 <main+0x298>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2101      	movs	r1, #1
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 fd71 	bl	80011c8 <update7SEGBuffer>
  					update7SEGBuffer(durationLedGreen, 2);
 80006e6:	4b4c      	ldr	r3, [pc, #304]	; (8000818 <main+0x298>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2102      	movs	r1, #2
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 fd6b 	bl	80011c8 <update7SEGBuffer>
  					update7SEGBuffer(MODE4, 3);
 80006f2:	2103      	movs	r1, #3
 80006f4:	2004      	movs	r0, #4
 80006f6:	f000 fd67 	bl	80011c8 <update7SEGBuffer>
  					break;
 80006fa:	e021      	b.n	8000740 <main+0x1c0>
  				case MODE4:
  					modeStatus= MODE1;
 80006fc:	4b43      	ldr	r3, [pc, #268]	; (800080c <main+0x28c>)
 80006fe:	2201      	movs	r2, #1
 8000700:	601a      	str	r2, [r3, #0]
  					tempDurationLedGreen= durationLedGreen;
 8000702:	4b45      	ldr	r3, [pc, #276]	; (8000818 <main+0x298>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a43      	ldr	r2, [pc, #268]	; (8000814 <main+0x294>)
 8000708:	6013      	str	r3, [r2, #0]
  					tempDurationLedRed= durationLedRed;
 800070a:	4b47      	ldr	r3, [pc, #284]	; (8000828 <main+0x2a8>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a45      	ldr	r2, [pc, #276]	; (8000824 <main+0x2a4>)
 8000710:	6013      	str	r3, [r2, #0]
  					tempDurationLedYellow= durationLedYellow;
 8000712:	4b43      	ldr	r3, [pc, #268]	; (8000820 <main+0x2a0>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a41      	ldr	r2, [pc, #260]	; (800081c <main+0x29c>)
 8000718:	6013      	str	r3, [r2, #0]
  					resetAllSingleLed();
 800071a:	f7ff fe0b 	bl	8000334 <resetAllSingleLed>
  					mode1Function();
 800071e:	f000 fa0b 	bl	8000b38 <mode1Function>
  					setTimer2(1000);
 8000722:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000726:	f000 fc85 	bl	8001034 <setTimer2>
  					flagAdvancedMode= 0;
 800072a:	4b39      	ldr	r3, [pc, #228]	; (8000810 <main+0x290>)
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
  					update7SEGBuffer(MODE1, 3);
 8000730:	2103      	movs	r1, #3
 8000732:	2001      	movs	r0, #1
 8000734:	f000 fd48 	bl	80011c8 <update7SEGBuffer>
  					break;
 8000738:	e002      	b.n	8000740 <main+0x1c0>
  				default:
  					break;
  			 }
  		 }
 800073a:	bf00      	nop
 800073c:	e000      	b.n	8000740 <main+0x1c0>
  					break;
 800073e:	bf00      	nop
  		 if (flagButton[1]== PRESS_STATE)
 8000740:	4b31      	ldr	r3, [pc, #196]	; (8000808 <main+0x288>)
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d158      	bne.n	80007fa <main+0x27a>
  		 {
  			 flagButton[1]= NORMAL_STATE;
 8000748:	4b2f      	ldr	r3, [pc, #188]	; (8000808 <main+0x288>)
 800074a:	2201      	movs	r2, #1
 800074c:	605a      	str	r2, [r3, #4]
  			 switch (modeStatus)
 800074e:	4b2f      	ldr	r3, [pc, #188]	; (800080c <main+0x28c>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b04      	cmp	r3, #4
 8000754:	d038      	beq.n	80007c8 <main+0x248>
 8000756:	2b04      	cmp	r3, #4
 8000758:	dc68      	bgt.n	800082c <main+0x2ac>
 800075a:	2b02      	cmp	r3, #2
 800075c:	d002      	beq.n	8000764 <main+0x1e4>
 800075e:	2b03      	cmp	r3, #3
 8000760:	d019      	beq.n	8000796 <main+0x216>
  					}
  					update7SEGBuffer(tempDurationLedGreen, 1);
  					update7SEGBuffer(tempDurationLedGreen, 2);
  					break;
  				default:
  					break;
 8000762:	e063      	b.n	800082c <main+0x2ac>
  					tempDurationLedRed++;
 8000764:	4b2f      	ldr	r3, [pc, #188]	; (8000824 <main+0x2a4>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	3301      	adds	r3, #1
 800076a:	4a2e      	ldr	r2, [pc, #184]	; (8000824 <main+0x2a4>)
 800076c:	6013      	str	r3, [r2, #0]
  					if (tempDurationLedRed > 99)
 800076e:	4b2d      	ldr	r3, [pc, #180]	; (8000824 <main+0x2a4>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b63      	cmp	r3, #99	; 0x63
 8000774:	dd02      	ble.n	800077c <main+0x1fc>
  						tempDurationLedRed= 0;
 8000776:	4b2b      	ldr	r3, [pc, #172]	; (8000824 <main+0x2a4>)
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
  					update7SEGBuffer(tempDurationLedRed, 1);
 800077c:	4b29      	ldr	r3, [pc, #164]	; (8000824 <main+0x2a4>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2101      	movs	r1, #1
 8000782:	4618      	mov	r0, r3
 8000784:	f000 fd20 	bl	80011c8 <update7SEGBuffer>
  					update7SEGBuffer(tempDurationLedRed, 2);
 8000788:	4b26      	ldr	r3, [pc, #152]	; (8000824 <main+0x2a4>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2102      	movs	r1, #2
 800078e:	4618      	mov	r0, r3
 8000790:	f000 fd1a 	bl	80011c8 <update7SEGBuffer>
  					break;
 8000794:	e04b      	b.n	800082e <main+0x2ae>
  					tempDurationLedYellow++;
 8000796:	4b21      	ldr	r3, [pc, #132]	; (800081c <main+0x29c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	3301      	adds	r3, #1
 800079c:	4a1f      	ldr	r2, [pc, #124]	; (800081c <main+0x29c>)
 800079e:	6013      	str	r3, [r2, #0]
  					if (tempDurationLedYellow > 99)
 80007a0:	4b1e      	ldr	r3, [pc, #120]	; (800081c <main+0x29c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b63      	cmp	r3, #99	; 0x63
 80007a6:	dd02      	ble.n	80007ae <main+0x22e>
  						tempDurationLedYellow= 0;
 80007a8:	4b1c      	ldr	r3, [pc, #112]	; (800081c <main+0x29c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
  					update7SEGBuffer(tempDurationLedYellow, 1);
 80007ae:	4b1b      	ldr	r3, [pc, #108]	; (800081c <main+0x29c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2101      	movs	r1, #1
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 fd07 	bl	80011c8 <update7SEGBuffer>
  					update7SEGBuffer(tempDurationLedYellow, 2);
 80007ba:	4b18      	ldr	r3, [pc, #96]	; (800081c <main+0x29c>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2102      	movs	r1, #2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 fd01 	bl	80011c8 <update7SEGBuffer>
  					break;
 80007c6:	e032      	b.n	800082e <main+0x2ae>
  					tempDurationLedGreen++;
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <main+0x294>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	3301      	adds	r3, #1
 80007ce:	4a11      	ldr	r2, [pc, #68]	; (8000814 <main+0x294>)
 80007d0:	6013      	str	r3, [r2, #0]
  					if (tempDurationLedGreen > 99)
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <main+0x294>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b63      	cmp	r3, #99	; 0x63
 80007d8:	dd02      	ble.n	80007e0 <main+0x260>
  						tempDurationLedGreen= 0;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <main+0x294>)
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
  					update7SEGBuffer(tempDurationLedGreen, 1);
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <main+0x294>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2101      	movs	r1, #1
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 fcee 	bl	80011c8 <update7SEGBuffer>
  					update7SEGBuffer(tempDurationLedGreen, 2);
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <main+0x294>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2102      	movs	r1, #2
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 fce8 	bl	80011c8 <update7SEGBuffer>
  					break;
 80007f8:	e019      	b.n	800082e <main+0x2ae>
  			 }
  		 }
 80007fa:	bf00      	nop
 80007fc:	e017      	b.n	800082e <main+0x2ae>
 80007fe:	bf00      	nop
 8000800:	200000d0 	.word	0x200000d0
 8000804:	20000140 	.word	0x20000140
 8000808:	20000044 	.word	0x20000044
 800080c:	200000b0 	.word	0x200000b0
 8000810:	200000b4 	.word	0x200000b4
 8000814:	2000006c 	.word	0x2000006c
 8000818:	200000c4 	.word	0x200000c4
 800081c:	20000070 	.word	0x20000070
 8000820:	200000c8 	.word	0x200000c8
 8000824:	20000068 	.word	0x20000068
 8000828:	200000c0 	.word	0x200000c0
  					break;
 800082c:	bf00      	nop
  		 if (flagButton[2]== PRESS_STATE)
 800082e:	4b35      	ldr	r3, [pc, #212]	; (8000904 <main+0x384>)
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d122      	bne.n	800087c <main+0x2fc>
  		 {
  			 flagButton[2]= NORMAL_STATE;
 8000836:	4b33      	ldr	r3, [pc, #204]	; (8000904 <main+0x384>)
 8000838:	2201      	movs	r2, #1
 800083a:	609a      	str	r2, [r3, #8]
  			 durationLedGreen= tempDurationLedGreen;
 800083c:	4b32      	ldr	r3, [pc, #200]	; (8000908 <main+0x388>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a32      	ldr	r2, [pc, #200]	; (800090c <main+0x38c>)
 8000842:	6013      	str	r3, [r2, #0]
  			 durationLedRed= tempDurationLedRed;
 8000844:	4b32      	ldr	r3, [pc, #200]	; (8000910 <main+0x390>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a32      	ldr	r2, [pc, #200]	; (8000914 <main+0x394>)
 800084a:	6013      	str	r3, [r2, #0]
  			 durationLedYellow= tempDurationLedYellow;
 800084c:	4b32      	ldr	r3, [pc, #200]	; (8000918 <main+0x398>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a32      	ldr	r2, [pc, #200]	; (800091c <main+0x39c>)
 8000852:	6013      	str	r3, [r2, #0]
  			 statusTraffic1= INIT1;
 8000854:	4b32      	ldr	r3, [pc, #200]	; (8000920 <main+0x3a0>)
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
  			 statusTraffic2= INIT2;
 800085a:	4b32      	ldr	r3, [pc, #200]	; (8000924 <main+0x3a4>)
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
  			 if (modeStatus== 1 || modeStatus== 0)
 8000860:	4b31      	ldr	r3, [pc, #196]	; (8000928 <main+0x3a8>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d003      	beq.n	8000870 <main+0x2f0>
 8000868:	4b2f      	ldr	r3, [pc, #188]	; (8000928 <main+0x3a8>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d105      	bne.n	800087c <main+0x2fc>
  			 {
  				 mode1Function();
 8000870:	f000 f962 	bl	8000b38 <mode1Function>
  				 setTimer2(1000);
 8000874:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000878:	f000 fbdc 	bl	8001034 <setTimer2>
  			 }
  		 }
  	 }
  	 if (flag2== 1)  // flag normal led
 800087c:	4b2b      	ldr	r3, [pc, #172]	; (800092c <main+0x3ac>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d109      	bne.n	8000898 <main+0x318>
  	 {
  		 setTimer2(1000);
 8000884:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000888:	f000 fbd4 	bl	8001034 <setTimer2>
  		 if (flagAdvancedMode== 0)
 800088c:	4b28      	ldr	r3, [pc, #160]	; (8000930 <main+0x3b0>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d101      	bne.n	8000898 <main+0x318>
  		 {
  			 mode1Function();
 8000894:	f000 f950 	bl	8000b38 <mode1Function>
  		 }
  	 }
  	 if (flag3== 1)  // flag for model modify
 8000898:	4b26      	ldr	r3, [pc, #152]	; (8000934 <main+0x3b4>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d123      	bne.n	80008e8 <main+0x368>
  	 {
  		 setTimer3(500);
 80008a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008a4:	f000 fbda 	bl	800105c <setTimer3>
  		 if (flagAdvancedMode== 1)
 80008a8:	4b21      	ldr	r3, [pc, #132]	; (8000930 <main+0x3b0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d11b      	bne.n	80008e8 <main+0x368>
  		 {
  			 switch (modeStatus)
 80008b0:	4b1d      	ldr	r3, [pc, #116]	; (8000928 <main+0x3a8>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	3b01      	subs	r3, #1
 80008b6:	2b03      	cmp	r3, #3
 80008b8:	d818      	bhi.n	80008ec <main+0x36c>
 80008ba:	a201      	add	r2, pc, #4	; (adr r2, 80008c0 <main+0x340>)
 80008bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c0:	080008ed 	.word	0x080008ed
 80008c4:	080008d1 	.word	0x080008d1
 80008c8:	080008d9 	.word	0x080008d9
 80008cc:	080008e1 	.word	0x080008e1
  			 {
  				case MODE1:
  					break;
  				case MODE2:
  					advancedModeFunction(2);
 80008d0:	2002      	movs	r0, #2
 80008d2:	f7ff fd53 	bl	800037c <advancedModeFunction>
  					break;
 80008d6:	e00a      	b.n	80008ee <main+0x36e>
  				case MODE3:
  					advancedModeFunction(3);
 80008d8:	2003      	movs	r0, #3
 80008da:	f7ff fd4f 	bl	800037c <advancedModeFunction>
  					break;
 80008de:	e006      	b.n	80008ee <main+0x36e>
  				case MODE4:
  					advancedModeFunction(4);
 80008e0:	2004      	movs	r0, #4
 80008e2:	f7ff fd4b 	bl	800037c <advancedModeFunction>
  					break;
 80008e6:	e002      	b.n	80008ee <main+0x36e>
  				default:
  					break;
  			}
  		 }
 80008e8:	bf00      	nop
 80008ea:	e000      	b.n	80008ee <main+0x36e>
  					break;
 80008ec:	bf00      	nop
  	 }
  	 if (flag4== 1)
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <main+0x3b8>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	f47f ae5c 	bne.w	80005b0 <main+0x30>
  	 {
  		 update7SEG();
 80008f8:	f000 fcb6 	bl	8001268 <update7SEG>
  		 setTimer4(50);
 80008fc:	2032      	movs	r0, #50	; 0x32
 80008fe:	f000 fbc1 	bl	8001084 <setTimer4>
  	 if (flag1== 1)  // flag for button
 8000902:	e655      	b.n	80005b0 <main+0x30>
 8000904:	20000044 	.word	0x20000044
 8000908:	2000006c 	.word	0x2000006c
 800090c:	200000c4 	.word	0x200000c4
 8000910:	20000068 	.word	0x20000068
 8000914:	200000c0 	.word	0x200000c0
 8000918:	20000070 	.word	0x20000070
 800091c:	200000c8 	.word	0x200000c8
 8000920:	200000b8 	.word	0x200000b8
 8000924:	200000bc 	.word	0x200000bc
 8000928:	200000b0 	.word	0x200000b0
 800092c:	20000138 	.word	0x20000138
 8000930:	200000b4 	.word	0x200000b4
 8000934:	20000148 	.word	0x20000148
 8000938:	2000013c 	.word	0x2000013c

0800093c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b090      	sub	sp, #64	; 0x40
 8000940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000942:	f107 0318 	add.w	r3, r7, #24
 8000946:	2228      	movs	r2, #40	; 0x28
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f002 f874 	bl	8002a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
 800095c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800095e:	2302      	movs	r3, #2
 8000960:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000962:	2301      	movs	r3, #1
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000966:	2310      	movs	r3, #16
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800096a:	2300      	movs	r3, #0
 800096c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800096e:	f107 0318 	add.w	r3, r7, #24
 8000972:	4618      	mov	r0, r3
 8000974:	f001 f870 	bl	8001a58 <HAL_RCC_OscConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800097e:	f000 f8d5 	bl	8000b2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000982:	230f      	movs	r3, #15
 8000984:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000986:	2300      	movs	r3, #0
 8000988:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f001 fadc 	bl	8001f58 <HAL_RCC_ClockConfig>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80009a6:	f000 f8c1 	bl	8000b2c <Error_Handler>
  }
}
 80009aa:	bf00      	nop
 80009ac:	3740      	adds	r7, #64	; 0x40
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ba:	f107 0308 	add.w	r3, r7, #8
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c8:	463b      	mov	r3, r7
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009d0:	4b1d      	ldr	r3, [pc, #116]	; (8000a48 <MX_TIM2_Init+0x94>)
 80009d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 80009d8:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <MX_TIM2_Init+0x94>)
 80009da:	f240 321f 	movw	r2, #799	; 0x31f
 80009de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e0:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <MX_TIM2_Init+0x94>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80009e6:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <MX_TIM2_Init+0x94>)
 80009e8:	2209      	movs	r2, #9
 80009ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ec:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <MX_TIM2_Init+0x94>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f2:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <MX_TIM2_Init+0x94>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009f8:	4813      	ldr	r0, [pc, #76]	; (8000a48 <MX_TIM2_Init+0x94>)
 80009fa:	f001 fc15 	bl	8002228 <HAL_TIM_Base_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a04:	f000 f892 	bl	8000b2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a0e:	f107 0308 	add.w	r3, r7, #8
 8000a12:	4619      	mov	r1, r3
 8000a14:	480c      	ldr	r0, [pc, #48]	; (8000a48 <MX_TIM2_Init+0x94>)
 8000a16:	f001 fdab 	bl	8002570 <HAL_TIM_ConfigClockSource>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a20:	f000 f884 	bl	8000b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a24:	2300      	movs	r3, #0
 8000a26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_TIM2_Init+0x94>)
 8000a32:	f001 ff73 	bl	800291c <HAL_TIMEx_MasterConfigSynchronization>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a3c:	f000 f876 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	200000d0 	.word	0x200000d0

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 0308 	add.w	r3, r7, #8
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a60:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <MX_GPIO_Init+0xc0>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	4a29      	ldr	r2, [pc, #164]	; (8000b0c <MX_GPIO_Init+0xc0>)
 8000a66:	f043 0304 	orr.w	r3, r3, #4
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b27      	ldr	r3, [pc, #156]	; (8000b0c <MX_GPIO_Init+0xc0>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f003 0304 	and.w	r3, r3, #4
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a78:	4b24      	ldr	r3, [pc, #144]	; (8000b0c <MX_GPIO_Init+0xc0>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a23      	ldr	r2, [pc, #140]	; (8000b0c <MX_GPIO_Init+0xc0>)
 8000a7e:	f043 0308 	orr.w	r3, r3, #8
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	4b21      	ldr	r3, [pc, #132]	; (8000b0c <MX_GPIO_Init+0xc0>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f003 0308 	and.w	r3, r3, #8
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, segA_Pin|segB_Pin|segC_Pin|segD_Pin
 8000a90:	2200      	movs	r2, #0
 8000a92:	217f      	movs	r1, #127	; 0x7f
 8000a94:	481e      	ldr	r0, [pc, #120]	; (8000b10 <MX_GPIO_Init+0xc4>)
 8000a96:	f000 ffae 	bl	80019f6 <HAL_GPIO_WritePin>
                          |segE_Pin|segF_Pin|segG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED1_Pin|GREEN1_Pin|YELLOW1_Pin|RED2_Pin
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	213f      	movs	r1, #63	; 0x3f
 8000a9e:	481d      	ldr	r0, [pc, #116]	; (8000b14 <MX_GPIO_Init+0xc8>)
 8000aa0:	f000 ffa9 	bl	80019f6 <HAL_GPIO_WritePin>
                          |GREEN2_Pin|YELLOW2_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, en4_Pin|en0_Pin|en1_Pin|en2_Pin
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 8000aaa:	481a      	ldr	r0, [pc, #104]	; (8000b14 <MX_GPIO_Init+0xc8>)
 8000aac:	f000 ffa3 	bl	80019f6 <HAL_GPIO_WritePin>
                          |en3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : segA_Pin segB_Pin segC_Pin segD_Pin
                           segE_Pin segF_Pin segG_Pin */
  GPIO_InitStruct.Pin = segA_Pin|segB_Pin|segC_Pin|segD_Pin
 8000ab0:	237f      	movs	r3, #127	; 0x7f
 8000ab2:	60bb      	str	r3, [r7, #8]
                          |segE_Pin|segF_Pin|segG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000abc:	2303      	movs	r3, #3
 8000abe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac0:	f107 0308 	add.w	r3, r7, #8
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4812      	ldr	r0, [pc, #72]	; (8000b10 <MX_GPIO_Init+0xc4>)
 8000ac8:	f000 fe04 	bl	80016d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED1_Pin GREEN1_Pin YELLOW1_Pin en4_Pin
                           RED2_Pin GREEN2_Pin YELLOW2_Pin en0_Pin
                           en1_Pin en2_Pin en3_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|GREEN1_Pin|YELLOW1_Pin|en4_Pin
 8000acc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ad0:	60bb      	str	r3, [r7, #8]
                          |RED2_Pin|GREEN2_Pin|YELLOW2_Pin|en0_Pin
                          |en1_Pin|en2_Pin|en3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ada:	2303      	movs	r3, #3
 8000adc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ade:	f107 0308 	add.w	r3, r7, #8
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	480b      	ldr	r0, [pc, #44]	; (8000b14 <MX_GPIO_Init+0xc8>)
 8000ae6:	f000 fdf5 	bl	80016d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1_Pin button2_Pin button3_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin|button3_Pin;
 8000aea:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000aee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af8:	f107 0308 	add.w	r3, r7, #8
 8000afc:	4619      	mov	r1, r3
 8000afe:	4804      	ldr	r0, [pc, #16]	; (8000b10 <MX_GPIO_Init+0xc4>)
 8000b00:	f000 fde8 	bl	80016d4 <HAL_GPIO_Init>

}
 8000b04:	bf00      	nop
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40010800 	.word	0x40010800
 8000b14:	40010c00 	.word	0x40010c00

08000b18 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	runTimer();
 8000b20:	f000 fa1e 	bl	8000f60 <runTimer>
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b30:	b672      	cpsid	i
}
 8000b32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <Error_Handler+0x8>
	...

08000b38 <mode1Function>:
int counterLedGreen2;
int counterLedYellow1;
int counterLedYellow2;

void mode1Function()
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
	switch (statusTraffic1)
 8000b3c:	4bb1      	ldr	r3, [pc, #708]	; (8000e04 <mode1Function+0x2cc>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b03      	cmp	r3, #3
 8000b42:	f200 80e9 	bhi.w	8000d18 <mode1Function+0x1e0>
 8000b46:	a201      	add	r2, pc, #4	; (adr r2, 8000b4c <mode1Function+0x14>)
 8000b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b4c:	08000b5d 	.word	0x08000b5d
 8000b50:	08000b97 	.word	0x08000b97
 8000b54:	08000c19 	.word	0x08000c19
 8000b58:	08000c99 	.word	0x08000c99
	{
		case INIT1:
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	2101      	movs	r1, #1
 8000b60:	48a9      	ldr	r0, [pc, #676]	; (8000e08 <mode1Function+0x2d0>)
 8000b62:	f000 ff48 	bl	80019f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);   // red
 8000b66:	2200      	movs	r2, #0
 8000b68:	2104      	movs	r1, #4
 8000b6a:	48a7      	ldr	r0, [pc, #668]	; (8000e08 <mode1Function+0x2d0>)
 8000b6c:	f000 ff43 	bl	80019f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2102      	movs	r1, #2
 8000b74:	48a4      	ldr	r0, [pc, #656]	; (8000e08 <mode1Function+0x2d0>)
 8000b76:	f000 ff3e 	bl	80019f6 <HAL_GPIO_WritePin>
			counterLedRed1= durationLedRed;
 8000b7a:	4ba4      	ldr	r3, [pc, #656]	; (8000e0c <mode1Function+0x2d4>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4aa4      	ldr	r2, [pc, #656]	; (8000e10 <mode1Function+0x2d8>)
 8000b80:	6013      	str	r3, [r2, #0]
			update7SEGBuffer(counterLedRed1, 1);
 8000b82:	4ba3      	ldr	r3, [pc, #652]	; (8000e10 <mode1Function+0x2d8>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2101      	movs	r1, #1
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 fb1d 	bl	80011c8 <update7SEGBuffer>
			statusTraffic1= STATUS1_1;
 8000b8e:	4b9d      	ldr	r3, [pc, #628]	; (8000e04 <mode1Function+0x2cc>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	601a      	str	r2, [r3, #0]
			break;
 8000b94:	e0c7      	b.n	8000d26 <mode1Function+0x1ee>
		case STATUS1_1:
			if (counterLedRed1 > 0)
 8000b96:	4b9e      	ldr	r3, [pc, #632]	; (8000e10 <mode1Function+0x2d8>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	f340 80be 	ble.w	8000d1c <mode1Function+0x1e4>
			{
				counterLedRed1--;
 8000ba0:	4b9b      	ldr	r3, [pc, #620]	; (8000e10 <mode1Function+0x2d8>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	4a9a      	ldr	r2, [pc, #616]	; (8000e10 <mode1Function+0x2d8>)
 8000ba8:	6013      	str	r3, [r2, #0]
				if (counterLedRed1 <= 0)
 8000baa:	4b99      	ldr	r3, [pc, #612]	; (8000e10 <mode1Function+0x2d8>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	dc1c      	bgt.n	8000bec <mode1Function+0xb4>
				{
					HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	4894      	ldr	r0, [pc, #592]	; (8000e08 <mode1Function+0x2d0>)
 8000bb8:	f000 ff1d 	bl	80019f6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);   // green
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2104      	movs	r1, #4
 8000bc0:	4891      	ldr	r0, [pc, #580]	; (8000e08 <mode1Function+0x2d0>)
 8000bc2:	f000 ff18 	bl	80019f6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2102      	movs	r1, #2
 8000bca:	488f      	ldr	r0, [pc, #572]	; (8000e08 <mode1Function+0x2d0>)
 8000bcc:	f000 ff13 	bl	80019f6 <HAL_GPIO_WritePin>
					statusTraffic1= STATUS1_2;
 8000bd0:	4b8c      	ldr	r3, [pc, #560]	; (8000e04 <mode1Function+0x2cc>)
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	601a      	str	r2, [r3, #0]
					counterLedGreen1= durationLedGreen;
 8000bd6:	4b8f      	ldr	r3, [pc, #572]	; (8000e14 <mode1Function+0x2dc>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a8f      	ldr	r2, [pc, #572]	; (8000e18 <mode1Function+0x2e0>)
 8000bdc:	6013      	str	r3, [r2, #0]
					update7SEGBuffer(counterLedGreen1, 1);
 8000bde:	4b8e      	ldr	r3, [pc, #568]	; (8000e18 <mode1Function+0x2e0>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2101      	movs	r1, #1
 8000be4:	4618      	mov	r0, r3
 8000be6:	f000 faef 	bl	80011c8 <update7SEGBuffer>
					HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);   // red
					HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
					update7SEGBuffer(counterLedRed1, 1);
				}
			}
			break;
 8000bea:	e097      	b.n	8000d1c <mode1Function+0x1e4>
					HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8000bec:	2201      	movs	r2, #1
 8000bee:	2101      	movs	r1, #1
 8000bf0:	4885      	ldr	r0, [pc, #532]	; (8000e08 <mode1Function+0x2d0>)
 8000bf2:	f000 ff00 	bl	80019f6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);   // red
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2104      	movs	r1, #4
 8000bfa:	4883      	ldr	r0, [pc, #524]	; (8000e08 <mode1Function+0x2d0>)
 8000bfc:	f000 fefb 	bl	80019f6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2102      	movs	r1, #2
 8000c04:	4880      	ldr	r0, [pc, #512]	; (8000e08 <mode1Function+0x2d0>)
 8000c06:	f000 fef6 	bl	80019f6 <HAL_GPIO_WritePin>
					update7SEGBuffer(counterLedRed1, 1);
 8000c0a:	4b81      	ldr	r3, [pc, #516]	; (8000e10 <mode1Function+0x2d8>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2101      	movs	r1, #1
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 fad9 	bl	80011c8 <update7SEGBuffer>
			break;
 8000c16:	e081      	b.n	8000d1c <mode1Function+0x1e4>
		case STATUS1_2:
			if (counterLedGreen1 > 0)
 8000c18:	4b7f      	ldr	r3, [pc, #508]	; (8000e18 <mode1Function+0x2e0>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	dd7f      	ble.n	8000d20 <mode1Function+0x1e8>
			{
				counterLedGreen1--;
 8000c20:	4b7d      	ldr	r3, [pc, #500]	; (8000e18 <mode1Function+0x2e0>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	3b01      	subs	r3, #1
 8000c26:	4a7c      	ldr	r2, [pc, #496]	; (8000e18 <mode1Function+0x2e0>)
 8000c28:	6013      	str	r3, [r2, #0]
				if (counterLedGreen1 <= 0)
 8000c2a:	4b7b      	ldr	r3, [pc, #492]	; (8000e18 <mode1Function+0x2e0>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	dc1c      	bgt.n	8000c6c <mode1Function+0x134>
				{
					HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2101      	movs	r1, #1
 8000c36:	4874      	ldr	r0, [pc, #464]	; (8000e08 <mode1Function+0x2d0>)
 8000c38:	f000 fedd 	bl	80019f6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);  // yellow
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2104      	movs	r1, #4
 8000c40:	4871      	ldr	r0, [pc, #452]	; (8000e08 <mode1Function+0x2d0>)
 8000c42:	f000 fed8 	bl	80019f6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2102      	movs	r1, #2
 8000c4a:	486f      	ldr	r0, [pc, #444]	; (8000e08 <mode1Function+0x2d0>)
 8000c4c:	f000 fed3 	bl	80019f6 <HAL_GPIO_WritePin>
					statusTraffic1= STATUS1_3;
 8000c50:	4b6c      	ldr	r3, [pc, #432]	; (8000e04 <mode1Function+0x2cc>)
 8000c52:	2203      	movs	r2, #3
 8000c54:	601a      	str	r2, [r3, #0]
					counterLedYellow1= durationLedYellow;
 8000c56:	4b71      	ldr	r3, [pc, #452]	; (8000e1c <mode1Function+0x2e4>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a71      	ldr	r2, [pc, #452]	; (8000e20 <mode1Function+0x2e8>)
 8000c5c:	6013      	str	r3, [r2, #0]
					update7SEGBuffer(counterLedYellow1, 1);
 8000c5e:	4b70      	ldr	r3, [pc, #448]	; (8000e20 <mode1Function+0x2e8>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2101      	movs	r1, #1
 8000c64:	4618      	mov	r0, r3
 8000c66:	f000 faaf 	bl	80011c8 <update7SEGBuffer>
					HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);   // green
					HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
					update7SEGBuffer(counterLedGreen1, 1);
				}
			}
			break;
 8000c6a:	e059      	b.n	8000d20 <mode1Function+0x1e8>
					HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2101      	movs	r1, #1
 8000c70:	4865      	ldr	r0, [pc, #404]	; (8000e08 <mode1Function+0x2d0>)
 8000c72:	f000 fec0 	bl	80019f6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);   // green
 8000c76:	2200      	movs	r2, #0
 8000c78:	2104      	movs	r1, #4
 8000c7a:	4863      	ldr	r0, [pc, #396]	; (8000e08 <mode1Function+0x2d0>)
 8000c7c:	f000 febb 	bl	80019f6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8000c80:	2201      	movs	r2, #1
 8000c82:	2102      	movs	r1, #2
 8000c84:	4860      	ldr	r0, [pc, #384]	; (8000e08 <mode1Function+0x2d0>)
 8000c86:	f000 feb6 	bl	80019f6 <HAL_GPIO_WritePin>
					update7SEGBuffer(counterLedGreen1, 1);
 8000c8a:	4b63      	ldr	r3, [pc, #396]	; (8000e18 <mode1Function+0x2e0>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2101      	movs	r1, #1
 8000c90:	4618      	mov	r0, r3
 8000c92:	f000 fa99 	bl	80011c8 <update7SEGBuffer>
			break;
 8000c96:	e043      	b.n	8000d20 <mode1Function+0x1e8>
		case STATUS1_3:
			if (counterLedYellow1 > 0)
 8000c98:	4b61      	ldr	r3, [pc, #388]	; (8000e20 <mode1Function+0x2e8>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	dd41      	ble.n	8000d24 <mode1Function+0x1ec>
			{
				counterLedYellow1--;
 8000ca0:	4b5f      	ldr	r3, [pc, #380]	; (8000e20 <mode1Function+0x2e8>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	4a5e      	ldr	r2, [pc, #376]	; (8000e20 <mode1Function+0x2e8>)
 8000ca8:	6013      	str	r3, [r2, #0]
				if (counterLedYellow1 <= 0)
 8000caa:	4b5d      	ldr	r3, [pc, #372]	; (8000e20 <mode1Function+0x2e8>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	dc1c      	bgt.n	8000cec <mode1Function+0x1b4>
				{
					HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	4854      	ldr	r0, [pc, #336]	; (8000e08 <mode1Function+0x2d0>)
 8000cb8:	f000 fe9d 	bl	80019f6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2104      	movs	r1, #4
 8000cc0:	4851      	ldr	r0, [pc, #324]	; (8000e08 <mode1Function+0x2d0>)
 8000cc2:	f000 fe98 	bl	80019f6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);   // green
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2102      	movs	r1, #2
 8000cca:	484f      	ldr	r0, [pc, #316]	; (8000e08 <mode1Function+0x2d0>)
 8000ccc:	f000 fe93 	bl	80019f6 <HAL_GPIO_WritePin>
					statusTraffic1= STATUS1_1;
 8000cd0:	4b4c      	ldr	r3, [pc, #304]	; (8000e04 <mode1Function+0x2cc>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	601a      	str	r2, [r3, #0]
					counterLedRed1= durationLedRed;
 8000cd6:	4b4d      	ldr	r3, [pc, #308]	; (8000e0c <mode1Function+0x2d4>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a4d      	ldr	r2, [pc, #308]	; (8000e10 <mode1Function+0x2d8>)
 8000cdc:	6013      	str	r3, [r2, #0]
					update7SEGBuffer(counterLedRed1, 1);
 8000cde:	4b4c      	ldr	r3, [pc, #304]	; (8000e10 <mode1Function+0x2d8>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 fa6f 	bl	80011c8 <update7SEGBuffer>
					HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);  // yellow
					HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
					update7SEGBuffer(counterLedYellow1, 1);
				}
			}
			break;
 8000cea:	e01b      	b.n	8000d24 <mode1Function+0x1ec>
					HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2101      	movs	r1, #1
 8000cf0:	4845      	ldr	r0, [pc, #276]	; (8000e08 <mode1Function+0x2d0>)
 8000cf2:	f000 fe80 	bl	80019f6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);  // yellow
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	2104      	movs	r1, #4
 8000cfa:	4843      	ldr	r0, [pc, #268]	; (8000e08 <mode1Function+0x2d0>)
 8000cfc:	f000 fe7b 	bl	80019f6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2102      	movs	r1, #2
 8000d04:	4840      	ldr	r0, [pc, #256]	; (8000e08 <mode1Function+0x2d0>)
 8000d06:	f000 fe76 	bl	80019f6 <HAL_GPIO_WritePin>
					update7SEGBuffer(counterLedYellow1, 1);
 8000d0a:	4b45      	ldr	r3, [pc, #276]	; (8000e20 <mode1Function+0x2e8>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2101      	movs	r1, #1
 8000d10:	4618      	mov	r0, r3
 8000d12:	f000 fa59 	bl	80011c8 <update7SEGBuffer>
			break;
 8000d16:	e005      	b.n	8000d24 <mode1Function+0x1ec>
		default:
			break;
 8000d18:	bf00      	nop
 8000d1a:	e004      	b.n	8000d26 <mode1Function+0x1ee>
			break;
 8000d1c:	bf00      	nop
 8000d1e:	e002      	b.n	8000d26 <mode1Function+0x1ee>
			break;
 8000d20:	bf00      	nop
 8000d22:	e000      	b.n	8000d26 <mode1Function+0x1ee>
			break;
 8000d24:	bf00      	nop
	}
	switch (statusTraffic2)
 8000d26:	4b3f      	ldr	r3, [pc, #252]	; (8000e24 <mode1Function+0x2ec>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2b03      	cmp	r3, #3
 8000d2c:	f200 8100 	bhi.w	8000f30 <mode1Function+0x3f8>
 8000d30:	a201      	add	r2, pc, #4	; (adr r2, 8000d38 <mode1Function+0x200>)
 8000d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d36:	bf00      	nop
 8000d38:	08000d49 	.word	0x08000d49
 8000d3c:	08000d83 	.word	0x08000d83
 8000d40:	08000e31 	.word	0x08000e31
 8000d44:	08000eb1 	.word	0x08000eb1
	{
		case INIT2:
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2108      	movs	r1, #8
 8000d4c:	482e      	ldr	r0, [pc, #184]	; (8000e08 <mode1Function+0x2d0>)
 8000d4e:	f000 fe52 	bl	80019f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);   // green
 8000d52:	2200      	movs	r2, #0
 8000d54:	2120      	movs	r1, #32
 8000d56:	482c      	ldr	r0, [pc, #176]	; (8000e08 <mode1Function+0x2d0>)
 8000d58:	f000 fe4d 	bl	80019f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	2110      	movs	r1, #16
 8000d60:	4829      	ldr	r0, [pc, #164]	; (8000e08 <mode1Function+0x2d0>)
 8000d62:	f000 fe48 	bl	80019f6 <HAL_GPIO_WritePin>
			counterLedGreen2= durationLedGreen;
 8000d66:	4b2b      	ldr	r3, [pc, #172]	; (8000e14 <mode1Function+0x2dc>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a2f      	ldr	r2, [pc, #188]	; (8000e28 <mode1Function+0x2f0>)
 8000d6c:	6013      	str	r3, [r2, #0]
			update7SEGBuffer(counterLedGreen2, 2);
 8000d6e:	4b2e      	ldr	r3, [pc, #184]	; (8000e28 <mode1Function+0x2f0>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2102      	movs	r1, #2
 8000d74:	4618      	mov	r0, r3
 8000d76:	f000 fa27 	bl	80011c8 <update7SEGBuffer>
			statusTraffic2= STATUS2_1;
 8000d7a:	4b2a      	ldr	r3, [pc, #168]	; (8000e24 <mode1Function+0x2ec>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	601a      	str	r2, [r3, #0]
			break;
 8000d80:	e0dd      	b.n	8000f3e <mode1Function+0x406>
		case STATUS2_1:
			if (counterLedGreen2 > 0)
 8000d82:	4b29      	ldr	r3, [pc, #164]	; (8000e28 <mode1Function+0x2f0>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f340 80d4 	ble.w	8000f34 <mode1Function+0x3fc>
			{
				counterLedGreen2--;
 8000d8c:	4b26      	ldr	r3, [pc, #152]	; (8000e28 <mode1Function+0x2f0>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	3b01      	subs	r3, #1
 8000d92:	4a25      	ldr	r2, [pc, #148]	; (8000e28 <mode1Function+0x2f0>)
 8000d94:	6013      	str	r3, [r2, #0]
				if (counterLedGreen2 <= 0)
 8000d96:	4b24      	ldr	r3, [pc, #144]	; (8000e28 <mode1Function+0x2f0>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	dc1c      	bgt.n	8000dd8 <mode1Function+0x2a0>
				{
					HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2108      	movs	r1, #8
 8000da2:	4819      	ldr	r0, [pc, #100]	; (8000e08 <mode1Function+0x2d0>)
 8000da4:	f000 fe27 	bl	80019f6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);   // yellow
 8000da8:	2201      	movs	r2, #1
 8000daa:	2120      	movs	r1, #32
 8000dac:	4816      	ldr	r0, [pc, #88]	; (8000e08 <mode1Function+0x2d0>)
 8000dae:	f000 fe22 	bl	80019f6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2110      	movs	r1, #16
 8000db6:	4814      	ldr	r0, [pc, #80]	; (8000e08 <mode1Function+0x2d0>)
 8000db8:	f000 fe1d 	bl	80019f6 <HAL_GPIO_WritePin>
					counterLedYellow2= durationLedYellow;
 8000dbc:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <mode1Function+0x2e4>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a1a      	ldr	r2, [pc, #104]	; (8000e2c <mode1Function+0x2f4>)
 8000dc2:	6013      	str	r3, [r2, #0]
					statusTraffic2= STATUS2_2;
 8000dc4:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <mode1Function+0x2ec>)
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	601a      	str	r2, [r3, #0]
					update7SEGBuffer(counterLedYellow2, 2);
 8000dca:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <mode1Function+0x2f4>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2102      	movs	r1, #2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f000 f9f9 	bl	80011c8 <update7SEGBuffer>
					HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);   // green
					HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
					update7SEGBuffer(counterLedGreen2, 2);
				}
			}
			break;
 8000dd6:	e0ad      	b.n	8000f34 <mode1Function+0x3fc>
					HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2108      	movs	r1, #8
 8000ddc:	480a      	ldr	r0, [pc, #40]	; (8000e08 <mode1Function+0x2d0>)
 8000dde:	f000 fe0a 	bl	80019f6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);   // green
 8000de2:	2200      	movs	r2, #0
 8000de4:	2120      	movs	r1, #32
 8000de6:	4808      	ldr	r0, [pc, #32]	; (8000e08 <mode1Function+0x2d0>)
 8000de8:	f000 fe05 	bl	80019f6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 8000dec:	2201      	movs	r2, #1
 8000dee:	2110      	movs	r1, #16
 8000df0:	4805      	ldr	r0, [pc, #20]	; (8000e08 <mode1Function+0x2d0>)
 8000df2:	f000 fe00 	bl	80019f6 <HAL_GPIO_WritePin>
					update7SEGBuffer(counterLedGreen2, 2);
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <mode1Function+0x2f0>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2102      	movs	r1, #2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 f9e3 	bl	80011c8 <update7SEGBuffer>
			break;
 8000e02:	e097      	b.n	8000f34 <mode1Function+0x3fc>
 8000e04:	200000b8 	.word	0x200000b8
 8000e08:	40010c00 	.word	0x40010c00
 8000e0c:	200000c0 	.word	0x200000c0
 8000e10:	2000012c 	.word	0x2000012c
 8000e14:	200000c4 	.word	0x200000c4
 8000e18:	2000011c 	.word	0x2000011c
 8000e1c:	200000c8 	.word	0x200000c8
 8000e20:	20000120 	.word	0x20000120
 8000e24:	200000bc 	.word	0x200000bc
 8000e28:	20000128 	.word	0x20000128
 8000e2c:	20000124 	.word	0x20000124
		case STATUS2_2:
			if (counterLedYellow2 > 0)
 8000e30:	4b44      	ldr	r3, [pc, #272]	; (8000f44 <mode1Function+0x40c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	dd7f      	ble.n	8000f38 <mode1Function+0x400>
			{
				counterLedYellow2--;
 8000e38:	4b42      	ldr	r3, [pc, #264]	; (8000f44 <mode1Function+0x40c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	4a41      	ldr	r2, [pc, #260]	; (8000f44 <mode1Function+0x40c>)
 8000e40:	6013      	str	r3, [r2, #0]
				if (counterLedYellow2 <= 0)
 8000e42:	4b40      	ldr	r3, [pc, #256]	; (8000f44 <mode1Function+0x40c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	dc1c      	bgt.n	8000e84 <mode1Function+0x34c>
				{
					HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	2108      	movs	r1, #8
 8000e4e:	483e      	ldr	r0, [pc, #248]	; (8000f48 <mode1Function+0x410>)
 8000e50:	f000 fdd1 	bl	80019f6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2120      	movs	r1, #32
 8000e58:	483b      	ldr	r0, [pc, #236]	; (8000f48 <mode1Function+0x410>)
 8000e5a:	f000 fdcc 	bl	80019f6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);   // red
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2110      	movs	r1, #16
 8000e62:	4839      	ldr	r0, [pc, #228]	; (8000f48 <mode1Function+0x410>)
 8000e64:	f000 fdc7 	bl	80019f6 <HAL_GPIO_WritePin>
					counterLedRed2= durationLedRed;
 8000e68:	4b38      	ldr	r3, [pc, #224]	; (8000f4c <mode1Function+0x414>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a38      	ldr	r2, [pc, #224]	; (8000f50 <mode1Function+0x418>)
 8000e6e:	6013      	str	r3, [r2, #0]
					statusTraffic2= STATUS2_3;
 8000e70:	4b38      	ldr	r3, [pc, #224]	; (8000f54 <mode1Function+0x41c>)
 8000e72:	2203      	movs	r2, #3
 8000e74:	601a      	str	r2, [r3, #0]
					update7SEGBuffer(counterLedRed2, 2);
 8000e76:	4b36      	ldr	r3, [pc, #216]	; (8000f50 <mode1Function+0x418>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2102      	movs	r1, #2
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 f9a3 	bl	80011c8 <update7SEGBuffer>
					HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);   // yellow
					HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
					update7SEGBuffer(counterLedYellow2, 2);
				}
			}
			break;
 8000e82:	e059      	b.n	8000f38 <mode1Function+0x400>
					HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2108      	movs	r1, #8
 8000e88:	482f      	ldr	r0, [pc, #188]	; (8000f48 <mode1Function+0x410>)
 8000e8a:	f000 fdb4 	bl	80019f6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);   // yellow
 8000e8e:	2201      	movs	r2, #1
 8000e90:	2120      	movs	r1, #32
 8000e92:	482d      	ldr	r0, [pc, #180]	; (8000f48 <mode1Function+0x410>)
 8000e94:	f000 fdaf 	bl	80019f6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2110      	movs	r1, #16
 8000e9c:	482a      	ldr	r0, [pc, #168]	; (8000f48 <mode1Function+0x410>)
 8000e9e:	f000 fdaa 	bl	80019f6 <HAL_GPIO_WritePin>
					update7SEGBuffer(counterLedYellow2, 2);
 8000ea2:	4b28      	ldr	r3, [pc, #160]	; (8000f44 <mode1Function+0x40c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2102      	movs	r1, #2
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 f98d 	bl	80011c8 <update7SEGBuffer>
			break;
 8000eae:	e043      	b.n	8000f38 <mode1Function+0x400>
		case STATUS2_3:
			if (counterLedRed2 > 0)
 8000eb0:	4b27      	ldr	r3, [pc, #156]	; (8000f50 <mode1Function+0x418>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	dd41      	ble.n	8000f3c <mode1Function+0x404>
			{
				counterLedRed2--;
 8000eb8:	4b25      	ldr	r3, [pc, #148]	; (8000f50 <mode1Function+0x418>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	4a24      	ldr	r2, [pc, #144]	; (8000f50 <mode1Function+0x418>)
 8000ec0:	6013      	str	r3, [r2, #0]
				if (counterLedRed2 <= 0)
 8000ec2:	4b23      	ldr	r3, [pc, #140]	; (8000f50 <mode1Function+0x418>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	dc1c      	bgt.n	8000f04 <mode1Function+0x3cc>
				{
					HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2108      	movs	r1, #8
 8000ece:	481e      	ldr	r0, [pc, #120]	; (8000f48 <mode1Function+0x410>)
 8000ed0:	f000 fd91 	bl	80019f6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2120      	movs	r1, #32
 8000ed8:	481b      	ldr	r0, [pc, #108]	; (8000f48 <mode1Function+0x410>)
 8000eda:	f000 fd8c 	bl	80019f6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);   // green
 8000ede:	2201      	movs	r2, #1
 8000ee0:	2110      	movs	r1, #16
 8000ee2:	4819      	ldr	r0, [pc, #100]	; (8000f48 <mode1Function+0x410>)
 8000ee4:	f000 fd87 	bl	80019f6 <HAL_GPIO_WritePin>
					counterLedGreen2= durationLedGreen;
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <mode1Function+0x420>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a1b      	ldr	r2, [pc, #108]	; (8000f5c <mode1Function+0x424>)
 8000eee:	6013      	str	r3, [r2, #0]
					statusTraffic2= STATUS2_1;
 8000ef0:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <mode1Function+0x41c>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	601a      	str	r2, [r3, #0]
					update7SEGBuffer(counterLedGreen2, 2);
 8000ef6:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <mode1Function+0x424>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2102      	movs	r1, #2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 f963 	bl	80011c8 <update7SEGBuffer>
					HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
					HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);   //
					update7SEGBuffer(counterLedRed2, 2);
				}
			}
			break;
 8000f02:	e01b      	b.n	8000f3c <mode1Function+0x404>
					HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8000f04:	2201      	movs	r2, #1
 8000f06:	2108      	movs	r1, #8
 8000f08:	480f      	ldr	r0, [pc, #60]	; (8000f48 <mode1Function+0x410>)
 8000f0a:	f000 fd74 	bl	80019f6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2120      	movs	r1, #32
 8000f12:	480d      	ldr	r0, [pc, #52]	; (8000f48 <mode1Function+0x410>)
 8000f14:	f000 fd6f 	bl	80019f6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);   //
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2110      	movs	r1, #16
 8000f1c:	480a      	ldr	r0, [pc, #40]	; (8000f48 <mode1Function+0x410>)
 8000f1e:	f000 fd6a 	bl	80019f6 <HAL_GPIO_WritePin>
					update7SEGBuffer(counterLedRed2, 2);
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <mode1Function+0x418>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2102      	movs	r1, #2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f000 f94d 	bl	80011c8 <update7SEGBuffer>
			break;
 8000f2e:	e005      	b.n	8000f3c <mode1Function+0x404>
		default:
			break;
 8000f30:	bf00      	nop
 8000f32:	e004      	b.n	8000f3e <mode1Function+0x406>
			break;
 8000f34:	bf00      	nop
 8000f36:	e002      	b.n	8000f3e <mode1Function+0x406>
			break;
 8000f38:	bf00      	nop
 8000f3a:	e000      	b.n	8000f3e <mode1Function+0x406>
			break;
 8000f3c:	bf00      	nop
	}
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000124 	.word	0x20000124
 8000f48:	40010c00 	.word	0x40010c00
 8000f4c:	200000c0 	.word	0x200000c0
 8000f50:	20000118 	.word	0x20000118
 8000f54:	200000bc 	.word	0x200000bc
 8000f58:	200000c4 	.word	0x200000c4
 8000f5c:	20000128 	.word	0x20000128

08000f60 <runTimer>:

int counter4;
int flag4;

void runTimer()
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
	if (counter1 > 0)
 8000f64:	4b21      	ldr	r3, [pc, #132]	; (8000fec <runTimer+0x8c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	dd0b      	ble.n	8000f84 <runTimer+0x24>
	{
		counter1--;
 8000f6c:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <runTimer+0x8c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	3b01      	subs	r3, #1
 8000f72:	4a1e      	ldr	r2, [pc, #120]	; (8000fec <runTimer+0x8c>)
 8000f74:	6013      	str	r3, [r2, #0]
		if (counter1 <= 0)
 8000f76:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <runTimer+0x8c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	dc02      	bgt.n	8000f84 <runTimer+0x24>
		{
			flag1= 1;
 8000f7e:	4b1c      	ldr	r3, [pc, #112]	; (8000ff0 <runTimer+0x90>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	601a      	str	r2, [r3, #0]
		}
	}
	if (counter2 > 0)
 8000f84:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <runTimer+0x94>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	dd0b      	ble.n	8000fa4 <runTimer+0x44>
	{
		counter2--;
 8000f8c:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <runTimer+0x94>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	3b01      	subs	r3, #1
 8000f92:	4a18      	ldr	r2, [pc, #96]	; (8000ff4 <runTimer+0x94>)
 8000f94:	6013      	str	r3, [r2, #0]
		if (counter2 <= 0)
 8000f96:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <runTimer+0x94>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	dc02      	bgt.n	8000fa4 <runTimer+0x44>
		{
			flag2= 1;
 8000f9e:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <runTimer+0x98>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	601a      	str	r2, [r3, #0]
		}
	}
	if (counter3 > 0)
 8000fa4:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <runTimer+0x9c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	dd0b      	ble.n	8000fc4 <runTimer+0x64>
	{
		counter3--;
 8000fac:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <runTimer+0x9c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	4a12      	ldr	r2, [pc, #72]	; (8000ffc <runTimer+0x9c>)
 8000fb4:	6013      	str	r3, [r2, #0]
		if (counter3 <= 0)
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <runTimer+0x9c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	dc02      	bgt.n	8000fc4 <runTimer+0x64>
		{
			flag3= 1;
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <runTimer+0xa0>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	601a      	str	r2, [r3, #0]
		}
	}
	if (counter4 > 0)
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <runTimer+0xa4>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	dd0b      	ble.n	8000fe4 <runTimer+0x84>
	{
		counter4--;
 8000fcc:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <runTimer+0xa4>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	4a0c      	ldr	r2, [pc, #48]	; (8001004 <runTimer+0xa4>)
 8000fd4:	6013      	str	r3, [r2, #0]
		if (counter4 <= 0)
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <runTimer+0xa4>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	dc02      	bgt.n	8000fe4 <runTimer+0x84>
		{
			flag4= 1;
 8000fde:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <runTimer+0xa8>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	20000134 	.word	0x20000134
 8000ff0:	20000140 	.word	0x20000140
 8000ff4:	2000014c 	.word	0x2000014c
 8000ff8:	20000138 	.word	0x20000138
 8000ffc:	20000130 	.word	0x20000130
 8001000:	20000148 	.word	0x20000148
 8001004:	20000144 	.word	0x20000144
 8001008:	2000013c 	.word	0x2000013c

0800100c <setTimer1>:

void setTimer1(int duration)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	counter1= duration;
 8001014:	4a05      	ldr	r2, [pc, #20]	; (800102c <setTimer1+0x20>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6013      	str	r3, [r2, #0]
	flag1= 0;
 800101a:	4b05      	ldr	r3, [pc, #20]	; (8001030 <setTimer1+0x24>)
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000134 	.word	0x20000134
 8001030:	20000140 	.word	0x20000140

08001034 <setTimer2>:

void setTimer2(int duration)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	counter2= duration;
 800103c:	4a05      	ldr	r2, [pc, #20]	; (8001054 <setTimer2+0x20>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6013      	str	r3, [r2, #0]
	flag2= 0;
 8001042:	4b05      	ldr	r3, [pc, #20]	; (8001058 <setTimer2+0x24>)
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	2000014c 	.word	0x2000014c
 8001058:	20000138 	.word	0x20000138

0800105c <setTimer3>:

void setTimer3(int duration)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	counter3= duration;
 8001064:	4a05      	ldr	r2, [pc, #20]	; (800107c <setTimer3+0x20>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6013      	str	r3, [r2, #0]
	flag3= 0;
 800106a:	4b05      	ldr	r3, [pc, #20]	; (8001080 <setTimer3+0x24>)
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000130 	.word	0x20000130
 8001080:	20000148 	.word	0x20000148

08001084 <setTimer4>:

void setTimer4(int duration)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	counter4= duration;
 800108c:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <setTimer4+0x20>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
	flag4= 0;
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <setTimer4+0x24>)
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20000144 	.word	0x20000144
 80010a8:	2000013c 	.word	0x2000013c

080010ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010b2:	4b15      	ldr	r3, [pc, #84]	; (8001108 <HAL_MspInit+0x5c>)
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	4a14      	ldr	r2, [pc, #80]	; (8001108 <HAL_MspInit+0x5c>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6193      	str	r3, [r2, #24]
 80010be:	4b12      	ldr	r3, [pc, #72]	; (8001108 <HAL_MspInit+0x5c>)
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ca:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <HAL_MspInit+0x5c>)
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <HAL_MspInit+0x5c>)
 80010d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d4:	61d3      	str	r3, [r2, #28]
 80010d6:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <HAL_MspInit+0x5c>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010e2:	4b0a      	ldr	r3, [pc, #40]	; (800110c <HAL_MspInit+0x60>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	4a04      	ldr	r2, [pc, #16]	; (800110c <HAL_MspInit+0x60>)
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fe:	bf00      	nop
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	40021000 	.word	0x40021000
 800110c:	40010000 	.word	0x40010000

08001110 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001120:	d113      	bne.n	800114a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <HAL_TIM_Base_MspInit+0x44>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <HAL_TIM_Base_MspInit+0x44>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	61d3      	str	r3, [r2, #28]
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <HAL_TIM_Base_MspInit+0x44>)
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2101      	movs	r1, #1
 800113e:	201c      	movs	r0, #28
 8001140:	f000 fa91 	bl	8001666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001144:	201c      	movs	r0, #28
 8001146:	f000 faaa 	bl	800169e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40021000 	.word	0x40021000

08001158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800115c:	e7fe      	b.n	800115c <NMI_Handler+0x4>

0800115e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001162:	e7fe      	b.n	8001162 <HardFault_Handler+0x4>

08001164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <MemManage_Handler+0x4>

0800116a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800116e:	e7fe      	b.n	800116e <BusFault_Handler+0x4>

08001170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <UsageFault_Handler+0x4>

08001176 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr

08001182 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr

0800118e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr

0800119a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800119e:	f000 f96f 	bl	8001480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011ac:	4802      	ldr	r0, [pc, #8]	; (80011b8 <TIM2_IRQHandler+0x10>)
 80011ae:	f001 f8d7 	bl	8002360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200000d0 	.word	0x200000d0

080011bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr

080011c8 <update7SEGBuffer>:

int status7SEG= INIT;
int led_buffer[5]= {1, 2, 3, 4, 5};

void update7SEGBuffer(int time, int index_traffic)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
	switch (index_traffic)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	2b03      	cmp	r3, #3
 80011d6:	d039      	beq.n	800124c <update7SEGBuffer+0x84>
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	2b03      	cmp	r3, #3
 80011dc:	dc3a      	bgt.n	8001254 <update7SEGBuffer+0x8c>
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d003      	beq.n	80011ec <update7SEGBuffer+0x24>
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d018      	beq.n	800121c <update7SEGBuffer+0x54>
			break;
		case 3:
			led_buffer[4]= time;
			break;
		default:
			break;
 80011ea:	e033      	b.n	8001254 <update7SEGBuffer+0x8c>
			led_buffer[0]= time/10;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a1c      	ldr	r2, [pc, #112]	; (8001260 <update7SEGBuffer+0x98>)
 80011f0:	fb82 1203 	smull	r1, r2, r2, r3
 80011f4:	1092      	asrs	r2, r2, #2
 80011f6:	17db      	asrs	r3, r3, #31
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	4a1a      	ldr	r2, [pc, #104]	; (8001264 <update7SEGBuffer+0x9c>)
 80011fc:	6013      	str	r3, [r2, #0]
			led_buffer[1]= time%10;
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	4b17      	ldr	r3, [pc, #92]	; (8001260 <update7SEGBuffer+0x98>)
 8001202:	fb83 2301 	smull	r2, r3, r3, r1
 8001206:	109a      	asrs	r2, r3, #2
 8001208:	17cb      	asrs	r3, r1, #31
 800120a:	1ad2      	subs	r2, r2, r3
 800120c:	4613      	mov	r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	4413      	add	r3, r2
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	1aca      	subs	r2, r1, r3
 8001216:	4b13      	ldr	r3, [pc, #76]	; (8001264 <update7SEGBuffer+0x9c>)
 8001218:	605a      	str	r2, [r3, #4]
			break;
 800121a:	e01c      	b.n	8001256 <update7SEGBuffer+0x8e>
			led_buffer[2]= time/10;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a10      	ldr	r2, [pc, #64]	; (8001260 <update7SEGBuffer+0x98>)
 8001220:	fb82 1203 	smull	r1, r2, r2, r3
 8001224:	1092      	asrs	r2, r2, #2
 8001226:	17db      	asrs	r3, r3, #31
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	4a0e      	ldr	r2, [pc, #56]	; (8001264 <update7SEGBuffer+0x9c>)
 800122c:	6093      	str	r3, [r2, #8]
			led_buffer[3]= time %10;
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <update7SEGBuffer+0x98>)
 8001232:	fb83 2301 	smull	r2, r3, r3, r1
 8001236:	109a      	asrs	r2, r3, #2
 8001238:	17cb      	asrs	r3, r1, #31
 800123a:	1ad2      	subs	r2, r2, r3
 800123c:	4613      	mov	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	1aca      	subs	r2, r1, r3
 8001246:	4b07      	ldr	r3, [pc, #28]	; (8001264 <update7SEGBuffer+0x9c>)
 8001248:	60da      	str	r2, [r3, #12]
			break;
 800124a:	e004      	b.n	8001256 <update7SEGBuffer+0x8e>
			led_buffer[4]= time;
 800124c:	4a05      	ldr	r2, [pc, #20]	; (8001264 <update7SEGBuffer+0x9c>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6113      	str	r3, [r2, #16]
			break;
 8001252:	e000      	b.n	8001256 <update7SEGBuffer+0x8e>
			break;
 8001254:	bf00      	nop
	}
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr
 8001260:	66666667 	.word	0x66666667
 8001264:	20000078 	.word	0x20000078

08001268 <update7SEG>:

void update7SEG()
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	switch (status7SEG)
 800126c:	4b4b      	ldr	r3, [pc, #300]	; (800139c <update7SEG+0x134>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b05      	cmp	r3, #5
 8001272:	f200 808f 	bhi.w	8001394 <update7SEG+0x12c>
 8001276:	a201      	add	r2, pc, #4	; (adr r2, 800127c <update7SEG+0x14>)
 8001278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800127c:	08001295 	.word	0x08001295
 8001280:	080012df 	.word	0x080012df
 8001284:	08001301 	.word	0x08001301
 8001288:	08001325 	.word	0x08001325
 800128c:	0800134b 	.word	0x0800134b
 8001290:	08001371 	.word	0x08001371
	{
		case INIT:
			HAL_GPIO_WritePin(en0_GPIO_Port, en0_Pin, 0);
 8001294:	2200      	movs	r2, #0
 8001296:	2140      	movs	r1, #64	; 0x40
 8001298:	4841      	ldr	r0, [pc, #260]	; (80013a0 <update7SEG+0x138>)
 800129a:	f000 fbac 	bl	80019f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, 1);
 800129e:	2201      	movs	r2, #1
 80012a0:	2180      	movs	r1, #128	; 0x80
 80012a2:	483f      	ldr	r0, [pc, #252]	; (80013a0 <update7SEG+0x138>)
 80012a4:	f000 fba7 	bl	80019f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, 1);
 80012a8:	2201      	movs	r2, #1
 80012aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ae:	483c      	ldr	r0, [pc, #240]	; (80013a0 <update7SEG+0x138>)
 80012b0:	f000 fba1 	bl	80019f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, 1);
 80012b4:	2201      	movs	r2, #1
 80012b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ba:	4839      	ldr	r0, [pc, #228]	; (80013a0 <update7SEG+0x138>)
 80012bc:	f000 fb9b 	bl	80019f6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(en4_GPIO_Port, en4_Pin, 1);
 80012c0:	2201      	movs	r2, #1
 80012c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012c6:	4836      	ldr	r0, [pc, #216]	; (80013a0 <update7SEG+0x138>)
 80012c8:	f000 fb95 	bl	80019f6 <HAL_GPIO_WritePin>
			display(led_buffer[0]);
 80012cc:	4b35      	ldr	r3, [pc, #212]	; (80013a4 <update7SEG+0x13c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7fe ff7b 	bl	80001cc <display>
			status7SEG= SEG7_1ON;
 80012d6:	4b31      	ldr	r3, [pc, #196]	; (800139c <update7SEG+0x134>)
 80012d8:	2201      	movs	r2, #1
 80012da:	601a      	str	r2, [r3, #0]
			break;
 80012dc:	e05b      	b.n	8001396 <update7SEG+0x12e>
		case SEG7_1ON:
			HAL_GPIO_TogglePin(en0_GPIO_Port, en0_Pin);
 80012de:	2140      	movs	r1, #64	; 0x40
 80012e0:	482f      	ldr	r0, [pc, #188]	; (80013a0 <update7SEG+0x138>)
 80012e2:	f000 fba0 	bl	8001a26 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(en1_GPIO_Port, en1_Pin);
 80012e6:	2180      	movs	r1, #128	; 0x80
 80012e8:	482d      	ldr	r0, [pc, #180]	; (80013a0 <update7SEG+0x138>)
 80012ea:	f000 fb9c 	bl	8001a26 <HAL_GPIO_TogglePin>
			display(led_buffer[1]);
 80012ee:	4b2d      	ldr	r3, [pc, #180]	; (80013a4 <update7SEG+0x13c>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7fe ff6a 	bl	80001cc <display>
			status7SEG= SEG7_2ON;
 80012f8:	4b28      	ldr	r3, [pc, #160]	; (800139c <update7SEG+0x134>)
 80012fa:	2202      	movs	r2, #2
 80012fc:	601a      	str	r2, [r3, #0]
			break;
 80012fe:	e04a      	b.n	8001396 <update7SEG+0x12e>
		case SEG7_2ON:
			HAL_GPIO_TogglePin(en1_GPIO_Port, en1_Pin);
 8001300:	2180      	movs	r1, #128	; 0x80
 8001302:	4827      	ldr	r0, [pc, #156]	; (80013a0 <update7SEG+0x138>)
 8001304:	f000 fb8f 	bl	8001a26 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(en2_GPIO_Port, en2_Pin);
 8001308:	f44f 7180 	mov.w	r1, #256	; 0x100
 800130c:	4824      	ldr	r0, [pc, #144]	; (80013a0 <update7SEG+0x138>)
 800130e:	f000 fb8a 	bl	8001a26 <HAL_GPIO_TogglePin>
			status7SEG= SEG7_3ON;
 8001312:	4b22      	ldr	r3, [pc, #136]	; (800139c <update7SEG+0x134>)
 8001314:	2203      	movs	r2, #3
 8001316:	601a      	str	r2, [r3, #0]
			display(led_buffer[2]);
 8001318:	4b22      	ldr	r3, [pc, #136]	; (80013a4 <update7SEG+0x13c>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	4618      	mov	r0, r3
 800131e:	f7fe ff55 	bl	80001cc <display>
			break;
 8001322:	e038      	b.n	8001396 <update7SEG+0x12e>
		case SEG7_3ON:
			HAL_GPIO_TogglePin(en2_GPIO_Port, en2_Pin);
 8001324:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001328:	481d      	ldr	r0, [pc, #116]	; (80013a0 <update7SEG+0x138>)
 800132a:	f000 fb7c 	bl	8001a26 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(en3_GPIO_Port, en3_Pin);
 800132e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001332:	481b      	ldr	r0, [pc, #108]	; (80013a0 <update7SEG+0x138>)
 8001334:	f000 fb77 	bl	8001a26 <HAL_GPIO_TogglePin>
			status7SEG= SEG7_4ON;
 8001338:	4b18      	ldr	r3, [pc, #96]	; (800139c <update7SEG+0x134>)
 800133a:	2204      	movs	r2, #4
 800133c:	601a      	str	r2, [r3, #0]
			display(led_buffer[3]);
 800133e:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <update7SEG+0x13c>)
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	4618      	mov	r0, r3
 8001344:	f7fe ff42 	bl	80001cc <display>
			break;
 8001348:	e025      	b.n	8001396 <update7SEG+0x12e>
		case SEG7_4ON:
			HAL_GPIO_TogglePin(en3_GPIO_Port, en3_Pin);
 800134a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800134e:	4814      	ldr	r0, [pc, #80]	; (80013a0 <update7SEG+0x138>)
 8001350:	f000 fb69 	bl	8001a26 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(en4_GPIO_Port, en4_Pin);
 8001354:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001358:	4811      	ldr	r0, [pc, #68]	; (80013a0 <update7SEG+0x138>)
 800135a:	f000 fb64 	bl	8001a26 <HAL_GPIO_TogglePin>
			status7SEG= SEG7_5ON;
 800135e:	4b0f      	ldr	r3, [pc, #60]	; (800139c <update7SEG+0x134>)
 8001360:	2205      	movs	r2, #5
 8001362:	601a      	str	r2, [r3, #0]
			display(led_buffer[4]);
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <update7SEG+0x13c>)
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	4618      	mov	r0, r3
 800136a:	f7fe ff2f 	bl	80001cc <display>
			break;
 800136e:	e012      	b.n	8001396 <update7SEG+0x12e>
		case SEG7_5ON:
			HAL_GPIO_TogglePin(en4_GPIO_Port, en4_Pin);
 8001370:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001374:	480a      	ldr	r0, [pc, #40]	; (80013a0 <update7SEG+0x138>)
 8001376:	f000 fb56 	bl	8001a26 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(en0_GPIO_Port, en0_Pin);
 800137a:	2140      	movs	r1, #64	; 0x40
 800137c:	4808      	ldr	r0, [pc, #32]	; (80013a0 <update7SEG+0x138>)
 800137e:	f000 fb52 	bl	8001a26 <HAL_GPIO_TogglePin>
			status7SEG= SEG7_1ON;
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <update7SEG+0x134>)
 8001384:	2201      	movs	r2, #1
 8001386:	601a      	str	r2, [r3, #0]
			display(led_buffer[0]);
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <update7SEG+0x13c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f7fe ff1d 	bl	80001cc <display>
			break;
 8001392:	e000      	b.n	8001396 <update7SEG+0x12e>
		default:
			break;
 8001394:	bf00      	nop
	}

}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200000cc 	.word	0x200000cc
 80013a0:	40010c00 	.word	0x40010c00
 80013a4:	20000078 	.word	0x20000078

080013a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a8:	480c      	ldr	r0, [pc, #48]	; (80013dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013aa:	490d      	ldr	r1, [pc, #52]	; (80013e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013ac:	4a0d      	ldr	r2, [pc, #52]	; (80013e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b0:	e002      	b.n	80013b8 <LoopCopyDataInit>

080013b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013b6:	3304      	adds	r3, #4

080013b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013bc:	d3f9      	bcc.n	80013b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013be:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013c0:	4c0a      	ldr	r4, [pc, #40]	; (80013ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80013c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c4:	e001      	b.n	80013ca <LoopFillZerobss>

080013c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c8:	3204      	adds	r2, #4

080013ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013cc:	d3fb      	bcc.n	80013c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013ce:	f7ff fef5 	bl	80011bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013d2:	f001 fb0d 	bl	80029f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013d6:	f7ff f8d3 	bl	8000580 <main>
  bx lr
 80013da:	4770      	bx	lr
  ldr r0, =_sdata
 80013dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e0:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80013e4:	08002a88 	.word	0x08002a88
  ldr r2, =_sbss
 80013e8:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80013ec:	20000154 	.word	0x20000154

080013f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013f0:	e7fe      	b.n	80013f0 <ADC1_2_IRQHandler>
	...

080013f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f8:	4b08      	ldr	r3, [pc, #32]	; (800141c <HAL_Init+0x28>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a07      	ldr	r2, [pc, #28]	; (800141c <HAL_Init+0x28>)
 80013fe:	f043 0310 	orr.w	r3, r3, #16
 8001402:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001404:	2003      	movs	r0, #3
 8001406:	f000 f923 	bl	8001650 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800140a:	200f      	movs	r0, #15
 800140c:	f000 f808 	bl	8001420 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001410:	f7ff fe4c 	bl	80010ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40022000 	.word	0x40022000

08001420 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <HAL_InitTick+0x54>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <HAL_InitTick+0x58>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	4619      	mov	r1, r3
 8001432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001436:	fbb3 f3f1 	udiv	r3, r3, r1
 800143a:	fbb2 f3f3 	udiv	r3, r2, r3
 800143e:	4618      	mov	r0, r3
 8001440:	f000 f93b 	bl	80016ba <HAL_SYSTICK_Config>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e00e      	b.n	800146c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2b0f      	cmp	r3, #15
 8001452:	d80a      	bhi.n	800146a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001454:	2200      	movs	r2, #0
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	f04f 30ff 	mov.w	r0, #4294967295
 800145c:	f000 f903 	bl	8001666 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001460:	4a06      	ldr	r2, [pc, #24]	; (800147c <HAL_InitTick+0x5c>)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001466:	2300      	movs	r3, #0
 8001468:	e000      	b.n	800146c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
}
 800146c:	4618      	mov	r0, r3
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000074 	.word	0x20000074
 8001478:	20000090 	.word	0x20000090
 800147c:	2000008c 	.word	0x2000008c

08001480 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001484:	4b05      	ldr	r3, [pc, #20]	; (800149c <HAL_IncTick+0x1c>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	461a      	mov	r2, r3
 800148a:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <HAL_IncTick+0x20>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4413      	add	r3, r2
 8001490:	4a03      	ldr	r2, [pc, #12]	; (80014a0 <HAL_IncTick+0x20>)
 8001492:	6013      	str	r3, [r2, #0]
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr
 800149c:	20000090 	.word	0x20000090
 80014a0:	20000150 	.word	0x20000150

080014a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return uwTick;
 80014a8:	4b02      	ldr	r3, [pc, #8]	; (80014b4 <HAL_GetTick+0x10>)
 80014aa:	681b      	ldr	r3, [r3, #0]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	20000150 	.word	0x20000150

080014b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <__NVIC_SetPriorityGrouping+0x44>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014d4:	4013      	ands	r3, r2
 80014d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ea:	4a04      	ldr	r2, [pc, #16]	; (80014fc <__NVIC_SetPriorityGrouping+0x44>)
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	60d3      	str	r3, [r2, #12]
}
 80014f0:	bf00      	nop
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001504:	4b04      	ldr	r3, [pc, #16]	; (8001518 <__NVIC_GetPriorityGrouping+0x18>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	0a1b      	lsrs	r3, r3, #8
 800150a:	f003 0307 	and.w	r3, r3, #7
}
 800150e:	4618      	mov	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	2b00      	cmp	r3, #0
 800152c:	db0b      	blt.n	8001546 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	f003 021f 	and.w	r2, r3, #31
 8001534:	4906      	ldr	r1, [pc, #24]	; (8001550 <__NVIC_EnableIRQ+0x34>)
 8001536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153a:	095b      	lsrs	r3, r3, #5
 800153c:	2001      	movs	r0, #1
 800153e:	fa00 f202 	lsl.w	r2, r0, r2
 8001542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr
 8001550:	e000e100 	.word	0xe000e100

08001554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	6039      	str	r1, [r7, #0]
 800155e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001564:	2b00      	cmp	r3, #0
 8001566:	db0a      	blt.n	800157e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	b2da      	uxtb	r2, r3
 800156c:	490c      	ldr	r1, [pc, #48]	; (80015a0 <__NVIC_SetPriority+0x4c>)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	0112      	lsls	r2, r2, #4
 8001574:	b2d2      	uxtb	r2, r2
 8001576:	440b      	add	r3, r1
 8001578:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800157c:	e00a      	b.n	8001594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	b2da      	uxtb	r2, r3
 8001582:	4908      	ldr	r1, [pc, #32]	; (80015a4 <__NVIC_SetPriority+0x50>)
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	f003 030f 	and.w	r3, r3, #15
 800158a:	3b04      	subs	r3, #4
 800158c:	0112      	lsls	r2, r2, #4
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	440b      	add	r3, r1
 8001592:	761a      	strb	r2, [r3, #24]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	e000e100 	.word	0xe000e100
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b089      	sub	sp, #36	; 0x24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f1c3 0307 	rsb	r3, r3, #7
 80015c2:	2b04      	cmp	r3, #4
 80015c4:	bf28      	it	cs
 80015c6:	2304      	movcs	r3, #4
 80015c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3304      	adds	r3, #4
 80015ce:	2b06      	cmp	r3, #6
 80015d0:	d902      	bls.n	80015d8 <NVIC_EncodePriority+0x30>
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3b03      	subs	r3, #3
 80015d6:	e000      	b.n	80015da <NVIC_EncodePriority+0x32>
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015dc:	f04f 32ff 	mov.w	r2, #4294967295
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43da      	mvns	r2, r3
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	401a      	ands	r2, r3
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f0:	f04f 31ff 	mov.w	r1, #4294967295
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	fa01 f303 	lsl.w	r3, r1, r3
 80015fa:	43d9      	mvns	r1, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	4313      	orrs	r3, r2
         );
}
 8001602:	4618      	mov	r0, r3
 8001604:	3724      	adds	r7, #36	; 0x24
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr

0800160c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3b01      	subs	r3, #1
 8001618:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800161c:	d301      	bcc.n	8001622 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800161e:	2301      	movs	r3, #1
 8001620:	e00f      	b.n	8001642 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001622:	4a0a      	ldr	r2, [pc, #40]	; (800164c <SysTick_Config+0x40>)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3b01      	subs	r3, #1
 8001628:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800162a:	210f      	movs	r1, #15
 800162c:	f04f 30ff 	mov.w	r0, #4294967295
 8001630:	f7ff ff90 	bl	8001554 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001634:	4b05      	ldr	r3, [pc, #20]	; (800164c <SysTick_Config+0x40>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800163a:	4b04      	ldr	r3, [pc, #16]	; (800164c <SysTick_Config+0x40>)
 800163c:	2207      	movs	r2, #7
 800163e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	e000e010 	.word	0xe000e010

08001650 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff ff2d 	bl	80014b8 <__NVIC_SetPriorityGrouping>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001666:	b580      	push	{r7, lr}
 8001668:	b086      	sub	sp, #24
 800166a:	af00      	add	r7, sp, #0
 800166c:	4603      	mov	r3, r0
 800166e:	60b9      	str	r1, [r7, #8]
 8001670:	607a      	str	r2, [r7, #4]
 8001672:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001678:	f7ff ff42 	bl	8001500 <__NVIC_GetPriorityGrouping>
 800167c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	68b9      	ldr	r1, [r7, #8]
 8001682:	6978      	ldr	r0, [r7, #20]
 8001684:	f7ff ff90 	bl	80015a8 <NVIC_EncodePriority>
 8001688:	4602      	mov	r2, r0
 800168a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168e:	4611      	mov	r1, r2
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ff5f 	bl	8001554 <__NVIC_SetPriority>
}
 8001696:	bf00      	nop
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	4603      	mov	r3, r0
 80016a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ff35 	bl	800151c <__NVIC_EnableIRQ>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff ffa2 	bl	800160c <SysTick_Config>
 80016c8:	4603      	mov	r3, r0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b08b      	sub	sp, #44	; 0x2c
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016de:	2300      	movs	r3, #0
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016e2:	2300      	movs	r3, #0
 80016e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016e6:	e148      	b.n	800197a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016e8:	2201      	movs	r2, #1
 80016ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	69fa      	ldr	r2, [r7, #28]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	429a      	cmp	r2, r3
 8001702:	f040 8137 	bne.w	8001974 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	4aa3      	ldr	r2, [pc, #652]	; (8001998 <HAL_GPIO_Init+0x2c4>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d05e      	beq.n	80017ce <HAL_GPIO_Init+0xfa>
 8001710:	4aa1      	ldr	r2, [pc, #644]	; (8001998 <HAL_GPIO_Init+0x2c4>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d875      	bhi.n	8001802 <HAL_GPIO_Init+0x12e>
 8001716:	4aa1      	ldr	r2, [pc, #644]	; (800199c <HAL_GPIO_Init+0x2c8>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d058      	beq.n	80017ce <HAL_GPIO_Init+0xfa>
 800171c:	4a9f      	ldr	r2, [pc, #636]	; (800199c <HAL_GPIO_Init+0x2c8>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d86f      	bhi.n	8001802 <HAL_GPIO_Init+0x12e>
 8001722:	4a9f      	ldr	r2, [pc, #636]	; (80019a0 <HAL_GPIO_Init+0x2cc>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d052      	beq.n	80017ce <HAL_GPIO_Init+0xfa>
 8001728:	4a9d      	ldr	r2, [pc, #628]	; (80019a0 <HAL_GPIO_Init+0x2cc>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d869      	bhi.n	8001802 <HAL_GPIO_Init+0x12e>
 800172e:	4a9d      	ldr	r2, [pc, #628]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d04c      	beq.n	80017ce <HAL_GPIO_Init+0xfa>
 8001734:	4a9b      	ldr	r2, [pc, #620]	; (80019a4 <HAL_GPIO_Init+0x2d0>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d863      	bhi.n	8001802 <HAL_GPIO_Init+0x12e>
 800173a:	4a9b      	ldr	r2, [pc, #620]	; (80019a8 <HAL_GPIO_Init+0x2d4>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d046      	beq.n	80017ce <HAL_GPIO_Init+0xfa>
 8001740:	4a99      	ldr	r2, [pc, #612]	; (80019a8 <HAL_GPIO_Init+0x2d4>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d85d      	bhi.n	8001802 <HAL_GPIO_Init+0x12e>
 8001746:	2b12      	cmp	r3, #18
 8001748:	d82a      	bhi.n	80017a0 <HAL_GPIO_Init+0xcc>
 800174a:	2b12      	cmp	r3, #18
 800174c:	d859      	bhi.n	8001802 <HAL_GPIO_Init+0x12e>
 800174e:	a201      	add	r2, pc, #4	; (adr r2, 8001754 <HAL_GPIO_Init+0x80>)
 8001750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001754:	080017cf 	.word	0x080017cf
 8001758:	080017a9 	.word	0x080017a9
 800175c:	080017bb 	.word	0x080017bb
 8001760:	080017fd 	.word	0x080017fd
 8001764:	08001803 	.word	0x08001803
 8001768:	08001803 	.word	0x08001803
 800176c:	08001803 	.word	0x08001803
 8001770:	08001803 	.word	0x08001803
 8001774:	08001803 	.word	0x08001803
 8001778:	08001803 	.word	0x08001803
 800177c:	08001803 	.word	0x08001803
 8001780:	08001803 	.word	0x08001803
 8001784:	08001803 	.word	0x08001803
 8001788:	08001803 	.word	0x08001803
 800178c:	08001803 	.word	0x08001803
 8001790:	08001803 	.word	0x08001803
 8001794:	08001803 	.word	0x08001803
 8001798:	080017b1 	.word	0x080017b1
 800179c:	080017c5 	.word	0x080017c5
 80017a0:	4a82      	ldr	r2, [pc, #520]	; (80019ac <HAL_GPIO_Init+0x2d8>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d013      	beq.n	80017ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017a6:	e02c      	b.n	8001802 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	623b      	str	r3, [r7, #32]
          break;
 80017ae:	e029      	b.n	8001804 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	3304      	adds	r3, #4
 80017b6:	623b      	str	r3, [r7, #32]
          break;
 80017b8:	e024      	b.n	8001804 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	3308      	adds	r3, #8
 80017c0:	623b      	str	r3, [r7, #32]
          break;
 80017c2:	e01f      	b.n	8001804 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	330c      	adds	r3, #12
 80017ca:	623b      	str	r3, [r7, #32]
          break;
 80017cc:	e01a      	b.n	8001804 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d102      	bne.n	80017dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017d6:	2304      	movs	r3, #4
 80017d8:	623b      	str	r3, [r7, #32]
          break;
 80017da:	e013      	b.n	8001804 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d105      	bne.n	80017f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017e4:	2308      	movs	r3, #8
 80017e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69fa      	ldr	r2, [r7, #28]
 80017ec:	611a      	str	r2, [r3, #16]
          break;
 80017ee:	e009      	b.n	8001804 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017f0:	2308      	movs	r3, #8
 80017f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	69fa      	ldr	r2, [r7, #28]
 80017f8:	615a      	str	r2, [r3, #20]
          break;
 80017fa:	e003      	b.n	8001804 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017fc:	2300      	movs	r3, #0
 80017fe:	623b      	str	r3, [r7, #32]
          break;
 8001800:	e000      	b.n	8001804 <HAL_GPIO_Init+0x130>
          break;
 8001802:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	2bff      	cmp	r3, #255	; 0xff
 8001808:	d801      	bhi.n	800180e <HAL_GPIO_Init+0x13a>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	e001      	b.n	8001812 <HAL_GPIO_Init+0x13e>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3304      	adds	r3, #4
 8001812:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	2bff      	cmp	r3, #255	; 0xff
 8001818:	d802      	bhi.n	8001820 <HAL_GPIO_Init+0x14c>
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	e002      	b.n	8001826 <HAL_GPIO_Init+0x152>
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	3b08      	subs	r3, #8
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	210f      	movs	r1, #15
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	fa01 f303 	lsl.w	r3, r1, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	401a      	ands	r2, r3
 8001838:	6a39      	ldr	r1, [r7, #32]
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	fa01 f303 	lsl.w	r3, r1, r3
 8001840:	431a      	orrs	r2, r3
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 8090 	beq.w	8001974 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001854:	4b56      	ldr	r3, [pc, #344]	; (80019b0 <HAL_GPIO_Init+0x2dc>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	4a55      	ldr	r2, [pc, #340]	; (80019b0 <HAL_GPIO_Init+0x2dc>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	6193      	str	r3, [r2, #24]
 8001860:	4b53      	ldr	r3, [pc, #332]	; (80019b0 <HAL_GPIO_Init+0x2dc>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800186c:	4a51      	ldr	r2, [pc, #324]	; (80019b4 <HAL_GPIO_Init+0x2e0>)
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	089b      	lsrs	r3, r3, #2
 8001872:	3302      	adds	r3, #2
 8001874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001878:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	f003 0303 	and.w	r3, r3, #3
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	220f      	movs	r2, #15
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	4013      	ands	r3, r2
 800188e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a49      	ldr	r2, [pc, #292]	; (80019b8 <HAL_GPIO_Init+0x2e4>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d00d      	beq.n	80018b4 <HAL_GPIO_Init+0x1e0>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a48      	ldr	r2, [pc, #288]	; (80019bc <HAL_GPIO_Init+0x2e8>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d007      	beq.n	80018b0 <HAL_GPIO_Init+0x1dc>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a47      	ldr	r2, [pc, #284]	; (80019c0 <HAL_GPIO_Init+0x2ec>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d101      	bne.n	80018ac <HAL_GPIO_Init+0x1d8>
 80018a8:	2302      	movs	r3, #2
 80018aa:	e004      	b.n	80018b6 <HAL_GPIO_Init+0x1e2>
 80018ac:	2303      	movs	r3, #3
 80018ae:	e002      	b.n	80018b6 <HAL_GPIO_Init+0x1e2>
 80018b0:	2301      	movs	r3, #1
 80018b2:	e000      	b.n	80018b6 <HAL_GPIO_Init+0x1e2>
 80018b4:	2300      	movs	r3, #0
 80018b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b8:	f002 0203 	and.w	r2, r2, #3
 80018bc:	0092      	lsls	r2, r2, #2
 80018be:	4093      	lsls	r3, r2
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018c6:	493b      	ldr	r1, [pc, #236]	; (80019b4 <HAL_GPIO_Init+0x2e0>)
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	089b      	lsrs	r3, r3, #2
 80018cc:	3302      	adds	r3, #2
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d006      	beq.n	80018ee <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018e0:	4b38      	ldr	r3, [pc, #224]	; (80019c4 <HAL_GPIO_Init+0x2f0>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4937      	ldr	r1, [pc, #220]	; (80019c4 <HAL_GPIO_Init+0x2f0>)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	600b      	str	r3, [r1, #0]
 80018ec:	e006      	b.n	80018fc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018ee:	4b35      	ldr	r3, [pc, #212]	; (80019c4 <HAL_GPIO_Init+0x2f0>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	43db      	mvns	r3, r3
 80018f6:	4933      	ldr	r1, [pc, #204]	; (80019c4 <HAL_GPIO_Init+0x2f0>)
 80018f8:	4013      	ands	r3, r2
 80018fa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d006      	beq.n	8001916 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001908:	4b2e      	ldr	r3, [pc, #184]	; (80019c4 <HAL_GPIO_Init+0x2f0>)
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	492d      	ldr	r1, [pc, #180]	; (80019c4 <HAL_GPIO_Init+0x2f0>)
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	4313      	orrs	r3, r2
 8001912:	604b      	str	r3, [r1, #4]
 8001914:	e006      	b.n	8001924 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001916:	4b2b      	ldr	r3, [pc, #172]	; (80019c4 <HAL_GPIO_Init+0x2f0>)
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	43db      	mvns	r3, r3
 800191e:	4929      	ldr	r1, [pc, #164]	; (80019c4 <HAL_GPIO_Init+0x2f0>)
 8001920:	4013      	ands	r3, r2
 8001922:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d006      	beq.n	800193e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001930:	4b24      	ldr	r3, [pc, #144]	; (80019c4 <HAL_GPIO_Init+0x2f0>)
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	4923      	ldr	r1, [pc, #140]	; (80019c4 <HAL_GPIO_Init+0x2f0>)
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	4313      	orrs	r3, r2
 800193a:	608b      	str	r3, [r1, #8]
 800193c:	e006      	b.n	800194c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800193e:	4b21      	ldr	r3, [pc, #132]	; (80019c4 <HAL_GPIO_Init+0x2f0>)
 8001940:	689a      	ldr	r2, [r3, #8]
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	43db      	mvns	r3, r3
 8001946:	491f      	ldr	r1, [pc, #124]	; (80019c4 <HAL_GPIO_Init+0x2f0>)
 8001948:	4013      	ands	r3, r2
 800194a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d006      	beq.n	8001966 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001958:	4b1a      	ldr	r3, [pc, #104]	; (80019c4 <HAL_GPIO_Init+0x2f0>)
 800195a:	68da      	ldr	r2, [r3, #12]
 800195c:	4919      	ldr	r1, [pc, #100]	; (80019c4 <HAL_GPIO_Init+0x2f0>)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	4313      	orrs	r3, r2
 8001962:	60cb      	str	r3, [r1, #12]
 8001964:	e006      	b.n	8001974 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001966:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <HAL_GPIO_Init+0x2f0>)
 8001968:	68da      	ldr	r2, [r3, #12]
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	43db      	mvns	r3, r3
 800196e:	4915      	ldr	r1, [pc, #84]	; (80019c4 <HAL_GPIO_Init+0x2f0>)
 8001970:	4013      	ands	r3, r2
 8001972:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	3301      	adds	r3, #1
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	fa22 f303 	lsr.w	r3, r2, r3
 8001984:	2b00      	cmp	r3, #0
 8001986:	f47f aeaf 	bne.w	80016e8 <HAL_GPIO_Init+0x14>
  }
}
 800198a:	bf00      	nop
 800198c:	bf00      	nop
 800198e:	372c      	adds	r7, #44	; 0x2c
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	10320000 	.word	0x10320000
 800199c:	10310000 	.word	0x10310000
 80019a0:	10220000 	.word	0x10220000
 80019a4:	10210000 	.word	0x10210000
 80019a8:	10120000 	.word	0x10120000
 80019ac:	10110000 	.word	0x10110000
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40010000 	.word	0x40010000
 80019b8:	40010800 	.word	0x40010800
 80019bc:	40010c00 	.word	0x40010c00
 80019c0:	40011000 	.word	0x40011000
 80019c4:	40010400 	.word	0x40010400

080019c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	887b      	ldrh	r3, [r7, #2]
 80019da:	4013      	ands	r3, r2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d002      	beq.n	80019e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019e0:	2301      	movs	r3, #1
 80019e2:	73fb      	strb	r3, [r7, #15]
 80019e4:	e001      	b.n	80019ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019e6:	2300      	movs	r3, #0
 80019e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr

080019f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
 80019fe:	460b      	mov	r3, r1
 8001a00:	807b      	strh	r3, [r7, #2]
 8001a02:	4613      	mov	r3, r2
 8001a04:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a06:	787b      	ldrb	r3, [r7, #1]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a0c:	887a      	ldrh	r2, [r7, #2]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a12:	e003      	b.n	8001a1c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a14:	887b      	ldrh	r3, [r7, #2]
 8001a16:	041a      	lsls	r2, r3, #16
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	611a      	str	r2, [r3, #16]
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr

08001a26 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b085      	sub	sp, #20
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	460b      	mov	r3, r1
 8001a30:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a38:	887a      	ldrh	r2, [r7, #2]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	041a      	lsls	r2, r3, #16
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	43d9      	mvns	r1, r3
 8001a44:	887b      	ldrh	r3, [r7, #2]
 8001a46:	400b      	ands	r3, r1
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	611a      	str	r2, [r3, #16]
}
 8001a4e:	bf00      	nop
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e26c      	b.n	8001f44 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f000 8087 	beq.w	8001b86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a78:	4b92      	ldr	r3, [pc, #584]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 030c 	and.w	r3, r3, #12
 8001a80:	2b04      	cmp	r3, #4
 8001a82:	d00c      	beq.n	8001a9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a84:	4b8f      	ldr	r3, [pc, #572]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 030c 	and.w	r3, r3, #12
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	d112      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x5e>
 8001a90:	4b8c      	ldr	r3, [pc, #560]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a9c:	d10b      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a9e:	4b89      	ldr	r3, [pc, #548]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d06c      	beq.n	8001b84 <HAL_RCC_OscConfig+0x12c>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d168      	bne.n	8001b84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e246      	b.n	8001f44 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001abe:	d106      	bne.n	8001ace <HAL_RCC_OscConfig+0x76>
 8001ac0:	4b80      	ldr	r3, [pc, #512]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a7f      	ldr	r2, [pc, #508]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	e02e      	b.n	8001b2c <HAL_RCC_OscConfig+0xd4>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10c      	bne.n	8001af0 <HAL_RCC_OscConfig+0x98>
 8001ad6:	4b7b      	ldr	r3, [pc, #492]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a7a      	ldr	r2, [pc, #488]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	4b78      	ldr	r3, [pc, #480]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a77      	ldr	r2, [pc, #476]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	e01d      	b.n	8001b2c <HAL_RCC_OscConfig+0xd4>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001af8:	d10c      	bne.n	8001b14 <HAL_RCC_OscConfig+0xbc>
 8001afa:	4b72      	ldr	r3, [pc, #456]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a71      	ldr	r2, [pc, #452]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	4b6f      	ldr	r3, [pc, #444]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a6e      	ldr	r2, [pc, #440]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	e00b      	b.n	8001b2c <HAL_RCC_OscConfig+0xd4>
 8001b14:	4b6b      	ldr	r3, [pc, #428]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a6a      	ldr	r2, [pc, #424]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b1e:	6013      	str	r3, [r2, #0]
 8001b20:	4b68      	ldr	r3, [pc, #416]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a67      	ldr	r2, [pc, #412]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d013      	beq.n	8001b5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b34:	f7ff fcb6 	bl	80014a4 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b3c:	f7ff fcb2 	bl	80014a4 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b64      	cmp	r3, #100	; 0x64
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e1fa      	b.n	8001f44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4e:	4b5d      	ldr	r3, [pc, #372]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f0      	beq.n	8001b3c <HAL_RCC_OscConfig+0xe4>
 8001b5a:	e014      	b.n	8001b86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5c:	f7ff fca2 	bl	80014a4 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b64:	f7ff fc9e 	bl	80014a4 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b64      	cmp	r3, #100	; 0x64
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e1e6      	b.n	8001f44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b76:	4b53      	ldr	r3, [pc, #332]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0x10c>
 8001b82:	e000      	b.n	8001b86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d063      	beq.n	8001c5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b92:	4b4c      	ldr	r3, [pc, #304]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 030c 	and.w	r3, r3, #12
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00b      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b9e:	4b49      	ldr	r3, [pc, #292]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
 8001ba6:	2b08      	cmp	r3, #8
 8001ba8:	d11c      	bne.n	8001be4 <HAL_RCC_OscConfig+0x18c>
 8001baa:	4b46      	ldr	r3, [pc, #280]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d116      	bne.n	8001be4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb6:	4b43      	ldr	r3, [pc, #268]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d005      	beq.n	8001bce <HAL_RCC_OscConfig+0x176>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d001      	beq.n	8001bce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e1ba      	b.n	8001f44 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bce:	4b3d      	ldr	r3, [pc, #244]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	4939      	ldr	r1, [pc, #228]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be2:	e03a      	b.n	8001c5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d020      	beq.n	8001c2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bec:	4b36      	ldr	r3, [pc, #216]	; (8001cc8 <HAL_RCC_OscConfig+0x270>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf2:	f7ff fc57 	bl	80014a4 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bfa:	f7ff fc53 	bl	80014a4 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e19b      	b.n	8001f44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0c:	4b2d      	ldr	r3, [pc, #180]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0f0      	beq.n	8001bfa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c18:	4b2a      	ldr	r3, [pc, #168]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	4927      	ldr	r1, [pc, #156]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	600b      	str	r3, [r1, #0]
 8001c2c:	e015      	b.n	8001c5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c2e:	4b26      	ldr	r3, [pc, #152]	; (8001cc8 <HAL_RCC_OscConfig+0x270>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c34:	f7ff fc36 	bl	80014a4 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c3c:	f7ff fc32 	bl	80014a4 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e17a      	b.n	8001f44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c4e:	4b1d      	ldr	r3, [pc, #116]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d03a      	beq.n	8001cdc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d019      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c6e:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c74:	f7ff fc16 	bl	80014a4 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c7c:	f7ff fc12 	bl	80014a4 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e15a      	b.n	8001f44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c8e:	4b0d      	ldr	r3, [pc, #52]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0f0      	beq.n	8001c7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	f000 faa6 	bl	80021ec <RCC_Delay>
 8001ca0:	e01c      	b.n	8001cdc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca8:	f7ff fbfc 	bl	80014a4 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cae:	e00f      	b.n	8001cd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb0:	f7ff fbf8 	bl	80014a4 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d908      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e140      	b.n	8001f44 <HAL_RCC_OscConfig+0x4ec>
 8001cc2:	bf00      	nop
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	42420000 	.word	0x42420000
 8001ccc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd0:	4b9e      	ldr	r3, [pc, #632]	; (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1e9      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 80a6 	beq.w	8001e36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cea:	2300      	movs	r3, #0
 8001cec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cee:	4b97      	ldr	r3, [pc, #604]	; (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10d      	bne.n	8001d16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cfa:	4b94      	ldr	r3, [pc, #592]	; (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	4a93      	ldr	r2, [pc, #588]	; (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d04:	61d3      	str	r3, [r2, #28]
 8001d06:	4b91      	ldr	r3, [pc, #580]	; (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d12:	2301      	movs	r3, #1
 8001d14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d16:	4b8e      	ldr	r3, [pc, #568]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d118      	bne.n	8001d54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d22:	4b8b      	ldr	r3, [pc, #556]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a8a      	ldr	r2, [pc, #552]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d2e:	f7ff fbb9 	bl	80014a4 <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d36:	f7ff fbb5 	bl	80014a4 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b64      	cmp	r3, #100	; 0x64
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e0fd      	b.n	8001f44 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d48:	4b81      	ldr	r3, [pc, #516]	; (8001f50 <HAL_RCC_OscConfig+0x4f8>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0f0      	beq.n	8001d36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d106      	bne.n	8001d6a <HAL_RCC_OscConfig+0x312>
 8001d5c:	4b7b      	ldr	r3, [pc, #492]	; (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	4a7a      	ldr	r2, [pc, #488]	; (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	6213      	str	r3, [r2, #32]
 8001d68:	e02d      	b.n	8001dc6 <HAL_RCC_OscConfig+0x36e>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10c      	bne.n	8001d8c <HAL_RCC_OscConfig+0x334>
 8001d72:	4b76      	ldr	r3, [pc, #472]	; (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	4a75      	ldr	r2, [pc, #468]	; (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001d78:	f023 0301 	bic.w	r3, r3, #1
 8001d7c:	6213      	str	r3, [r2, #32]
 8001d7e:	4b73      	ldr	r3, [pc, #460]	; (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	4a72      	ldr	r2, [pc, #456]	; (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001d84:	f023 0304 	bic.w	r3, r3, #4
 8001d88:	6213      	str	r3, [r2, #32]
 8001d8a:	e01c      	b.n	8001dc6 <HAL_RCC_OscConfig+0x36e>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	2b05      	cmp	r3, #5
 8001d92:	d10c      	bne.n	8001dae <HAL_RCC_OscConfig+0x356>
 8001d94:	4b6d      	ldr	r3, [pc, #436]	; (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	4a6c      	ldr	r2, [pc, #432]	; (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001d9a:	f043 0304 	orr.w	r3, r3, #4
 8001d9e:	6213      	str	r3, [r2, #32]
 8001da0:	4b6a      	ldr	r3, [pc, #424]	; (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	4a69      	ldr	r2, [pc, #420]	; (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001da6:	f043 0301 	orr.w	r3, r3, #1
 8001daa:	6213      	str	r3, [r2, #32]
 8001dac:	e00b      	b.n	8001dc6 <HAL_RCC_OscConfig+0x36e>
 8001dae:	4b67      	ldr	r3, [pc, #412]	; (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	4a66      	ldr	r2, [pc, #408]	; (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001db4:	f023 0301 	bic.w	r3, r3, #1
 8001db8:	6213      	str	r3, [r2, #32]
 8001dba:	4b64      	ldr	r3, [pc, #400]	; (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	4a63      	ldr	r2, [pc, #396]	; (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001dc0:	f023 0304 	bic.w	r3, r3, #4
 8001dc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d015      	beq.n	8001dfa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dce:	f7ff fb69 	bl	80014a4 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd4:	e00a      	b.n	8001dec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd6:	f7ff fb65 	bl	80014a4 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e0ab      	b.n	8001f44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dec:	4b57      	ldr	r3, [pc, #348]	; (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0ee      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x37e>
 8001df8:	e014      	b.n	8001e24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfa:	f7ff fb53 	bl	80014a4 <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e00:	e00a      	b.n	8001e18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e02:	f7ff fb4f 	bl	80014a4 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e095      	b.n	8001f44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e18:	4b4c      	ldr	r3, [pc, #304]	; (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1ee      	bne.n	8001e02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e24:	7dfb      	ldrb	r3, [r7, #23]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d105      	bne.n	8001e36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e2a:	4b48      	ldr	r3, [pc, #288]	; (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	4a47      	ldr	r2, [pc, #284]	; (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 8081 	beq.w	8001f42 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e40:	4b42      	ldr	r3, [pc, #264]	; (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 030c 	and.w	r3, r3, #12
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d061      	beq.n	8001f10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69db      	ldr	r3, [r3, #28]
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d146      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e54:	4b3f      	ldr	r3, [pc, #252]	; (8001f54 <HAL_RCC_OscConfig+0x4fc>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5a:	f7ff fb23 	bl	80014a4 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e62:	f7ff fb1f 	bl	80014a4 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e067      	b.n	8001f44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e74:	4b35      	ldr	r3, [pc, #212]	; (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1f0      	bne.n	8001e62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e88:	d108      	bne.n	8001e9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e8a:	4b30      	ldr	r3, [pc, #192]	; (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	492d      	ldr	r1, [pc, #180]	; (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e9c:	4b2b      	ldr	r3, [pc, #172]	; (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a19      	ldr	r1, [r3, #32]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eac:	430b      	orrs	r3, r1
 8001eae:	4927      	ldr	r1, [pc, #156]	; (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eb4:	4b27      	ldr	r3, [pc, #156]	; (8001f54 <HAL_RCC_OscConfig+0x4fc>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eba:	f7ff faf3 	bl	80014a4 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec2:	f7ff faef 	bl	80014a4 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e037      	b.n	8001f44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ed4:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0f0      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x46a>
 8001ee0:	e02f      	b.n	8001f42 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee2:	4b1c      	ldr	r3, [pc, #112]	; (8001f54 <HAL_RCC_OscConfig+0x4fc>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee8:	f7ff fadc 	bl	80014a4 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef0:	f7ff fad8 	bl	80014a4 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e020      	b.n	8001f44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f02:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f0      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x498>
 8001f0e:	e018      	b.n	8001f42 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d101      	bne.n	8001f1c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e013      	b.n	8001f44 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d106      	bne.n	8001f3e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d001      	beq.n	8001f42 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40007000 	.word	0x40007000
 8001f54:	42420060 	.word	0x42420060

08001f58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0d0      	b.n	800210e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f6c:	4b6a      	ldr	r3, [pc, #424]	; (8002118 <HAL_RCC_ClockConfig+0x1c0>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d910      	bls.n	8001f9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7a:	4b67      	ldr	r3, [pc, #412]	; (8002118 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f023 0207 	bic.w	r2, r3, #7
 8001f82:	4965      	ldr	r1, [pc, #404]	; (8002118 <HAL_RCC_ClockConfig+0x1c0>)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8a:	4b63      	ldr	r3, [pc, #396]	; (8002118 <HAL_RCC_ClockConfig+0x1c0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d001      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e0b8      	b.n	800210e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d020      	beq.n	8001fea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d005      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fb4:	4b59      	ldr	r3, [pc, #356]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	4a58      	ldr	r2, [pc, #352]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8001fba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fbe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0308 	and.w	r3, r3, #8
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fcc:	4b53      	ldr	r3, [pc, #332]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	4a52      	ldr	r2, [pc, #328]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8001fd2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fd6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd8:	4b50      	ldr	r3, [pc, #320]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	494d      	ldr	r1, [pc, #308]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d040      	beq.n	8002078 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d107      	bne.n	800200e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ffe:	4b47      	ldr	r3, [pc, #284]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d115      	bne.n	8002036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e07f      	b.n	800210e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b02      	cmp	r3, #2
 8002014:	d107      	bne.n	8002026 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002016:	4b41      	ldr	r3, [pc, #260]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d109      	bne.n	8002036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e073      	b.n	800210e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002026:	4b3d      	ldr	r3, [pc, #244]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e06b      	b.n	800210e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002036:	4b39      	ldr	r3, [pc, #228]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f023 0203 	bic.w	r2, r3, #3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	4936      	ldr	r1, [pc, #216]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8002044:	4313      	orrs	r3, r2
 8002046:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002048:	f7ff fa2c 	bl	80014a4 <HAL_GetTick>
 800204c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204e:	e00a      	b.n	8002066 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002050:	f7ff fa28 	bl	80014a4 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	f241 3288 	movw	r2, #5000	; 0x1388
 800205e:	4293      	cmp	r3, r2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e053      	b.n	800210e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002066:	4b2d      	ldr	r3, [pc, #180]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f003 020c 	and.w	r2, r3, #12
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	429a      	cmp	r2, r3
 8002076:	d1eb      	bne.n	8002050 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002078:	4b27      	ldr	r3, [pc, #156]	; (8002118 <HAL_RCC_ClockConfig+0x1c0>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	429a      	cmp	r2, r3
 8002084:	d210      	bcs.n	80020a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002086:	4b24      	ldr	r3, [pc, #144]	; (8002118 <HAL_RCC_ClockConfig+0x1c0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f023 0207 	bic.w	r2, r3, #7
 800208e:	4922      	ldr	r1, [pc, #136]	; (8002118 <HAL_RCC_ClockConfig+0x1c0>)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	4313      	orrs	r3, r2
 8002094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002096:	4b20      	ldr	r3, [pc, #128]	; (8002118 <HAL_RCC_ClockConfig+0x1c0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d001      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e032      	b.n	800210e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d008      	beq.n	80020c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b4:	4b19      	ldr	r3, [pc, #100]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	4916      	ldr	r1, [pc, #88]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d009      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020d2:	4b12      	ldr	r3, [pc, #72]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	490e      	ldr	r1, [pc, #56]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020e6:	f000 f821 	bl	800212c <HAL_RCC_GetSysClockFreq>
 80020ea:	4602      	mov	r2, r0
 80020ec:	4b0b      	ldr	r3, [pc, #44]	; (800211c <HAL_RCC_ClockConfig+0x1c4>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	091b      	lsrs	r3, r3, #4
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	490a      	ldr	r1, [pc, #40]	; (8002120 <HAL_RCC_ClockConfig+0x1c8>)
 80020f8:	5ccb      	ldrb	r3, [r1, r3]
 80020fa:	fa22 f303 	lsr.w	r3, r2, r3
 80020fe:	4a09      	ldr	r2, [pc, #36]	; (8002124 <HAL_RCC_ClockConfig+0x1cc>)
 8002100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <HAL_RCC_ClockConfig+0x1d0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff f98a 	bl	8001420 <HAL_InitTick>

  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40022000 	.word	0x40022000
 800211c:	40021000 	.word	0x40021000
 8002120:	08002a70 	.word	0x08002a70
 8002124:	20000074 	.word	0x20000074
 8002128:	2000008c 	.word	0x2000008c

0800212c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800212c:	b490      	push	{r4, r7}
 800212e:	b08a      	sub	sp, #40	; 0x28
 8002130:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002132:	4b2a      	ldr	r3, [pc, #168]	; (80021dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002134:	1d3c      	adds	r4, r7, #4
 8002136:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002138:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800213c:	f240 2301 	movw	r3, #513	; 0x201
 8002140:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
 8002146:	2300      	movs	r3, #0
 8002148:	61bb      	str	r3, [r7, #24]
 800214a:	2300      	movs	r3, #0
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002156:	4b22      	ldr	r3, [pc, #136]	; (80021e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f003 030c 	and.w	r3, r3, #12
 8002162:	2b04      	cmp	r3, #4
 8002164:	d002      	beq.n	800216c <HAL_RCC_GetSysClockFreq+0x40>
 8002166:	2b08      	cmp	r3, #8
 8002168:	d003      	beq.n	8002172 <HAL_RCC_GetSysClockFreq+0x46>
 800216a:	e02d      	b.n	80021c8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800216c:	4b1d      	ldr	r3, [pc, #116]	; (80021e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800216e:	623b      	str	r3, [r7, #32]
      break;
 8002170:	e02d      	b.n	80021ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	0c9b      	lsrs	r3, r3, #18
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800217e:	4413      	add	r3, r2
 8002180:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002184:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d013      	beq.n	80021b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002190:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	0c5b      	lsrs	r3, r3, #17
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800219e:	4413      	add	r3, r2
 80021a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	4a0e      	ldr	r2, [pc, #56]	; (80021e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021aa:	fb02 f203 	mul.w	r2, r2, r3
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
 80021b6:	e004      	b.n	80021c2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	4a0b      	ldr	r2, [pc, #44]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021bc:	fb02 f303 	mul.w	r3, r2, r3
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	623b      	str	r3, [r7, #32]
      break;
 80021c6:	e002      	b.n	80021ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021c8:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021ca:	623b      	str	r3, [r7, #32]
      break;
 80021cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ce:	6a3b      	ldr	r3, [r7, #32]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3728      	adds	r7, #40	; 0x28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc90      	pop	{r4, r7}
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	08002a60 	.word	0x08002a60
 80021e0:	40021000 	.word	0x40021000
 80021e4:	007a1200 	.word	0x007a1200
 80021e8:	003d0900 	.word	0x003d0900

080021ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021f4:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <RCC_Delay+0x34>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a0a      	ldr	r2, [pc, #40]	; (8002224 <RCC_Delay+0x38>)
 80021fa:	fba2 2303 	umull	r2, r3, r2, r3
 80021fe:	0a5b      	lsrs	r3, r3, #9
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	fb02 f303 	mul.w	r3, r2, r3
 8002206:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002208:	bf00      	nop
  }
  while (Delay --);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1e5a      	subs	r2, r3, #1
 800220e:	60fa      	str	r2, [r7, #12]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1f9      	bne.n	8002208 <RCC_Delay+0x1c>
}
 8002214:	bf00      	nop
 8002216:	bf00      	nop
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr
 8002220:	20000074 	.word	0x20000074
 8002224:	10624dd3 	.word	0x10624dd3

08002228 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e041      	b.n	80022be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d106      	bne.n	8002254 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7fe ff5e 	bl	8001110 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2202      	movs	r2, #2
 8002258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3304      	adds	r3, #4
 8002264:	4619      	mov	r1, r3
 8002266:	4610      	mov	r0, r2
 8002268:	f000 fa6a 	bl	8002740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d001      	beq.n	80022e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e035      	b.n	800234c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2202      	movs	r2, #2
 80022e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0201 	orr.w	r2, r2, #1
 80022f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a16      	ldr	r2, [pc, #88]	; (8002358 <HAL_TIM_Base_Start_IT+0x90>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d009      	beq.n	8002316 <HAL_TIM_Base_Start_IT+0x4e>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800230a:	d004      	beq.n	8002316 <HAL_TIM_Base_Start_IT+0x4e>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a12      	ldr	r2, [pc, #72]	; (800235c <HAL_TIM_Base_Start_IT+0x94>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d111      	bne.n	800233a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2b06      	cmp	r3, #6
 8002326:	d010      	beq.n	800234a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0201 	orr.w	r2, r2, #1
 8002336:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002338:	e007      	b.n	800234a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f042 0201 	orr.w	r2, r2, #1
 8002348:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	40012c00 	.word	0x40012c00
 800235c:	40000400 	.word	0x40000400

08002360 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b02      	cmp	r3, #2
 8002374:	d122      	bne.n	80023bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b02      	cmp	r3, #2
 8002382:	d11b      	bne.n	80023bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f06f 0202 	mvn.w	r2, #2
 800238c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f9b1 	bl	800270a <HAL_TIM_IC_CaptureCallback>
 80023a8:	e005      	b.n	80023b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f9a4 	bl	80026f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f9b3 	bl	800271c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	f003 0304 	and.w	r3, r3, #4
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d122      	bne.n	8002410 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d11b      	bne.n	8002410 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f06f 0204 	mvn.w	r2, #4
 80023e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2202      	movs	r2, #2
 80023e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f987 	bl	800270a <HAL_TIM_IC_CaptureCallback>
 80023fc:	e005      	b.n	800240a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f97a 	bl	80026f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 f989 	bl	800271c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b08      	cmp	r3, #8
 800241c:	d122      	bne.n	8002464 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f003 0308 	and.w	r3, r3, #8
 8002428:	2b08      	cmp	r3, #8
 800242a:	d11b      	bne.n	8002464 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f06f 0208 	mvn.w	r2, #8
 8002434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2204      	movs	r2, #4
 800243a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f95d 	bl	800270a <HAL_TIM_IC_CaptureCallback>
 8002450:	e005      	b.n	800245e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f950 	bl	80026f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f95f 	bl	800271c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f003 0310 	and.w	r3, r3, #16
 800246e:	2b10      	cmp	r3, #16
 8002470:	d122      	bne.n	80024b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f003 0310 	and.w	r3, r3, #16
 800247c:	2b10      	cmp	r3, #16
 800247e:	d11b      	bne.n	80024b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f06f 0210 	mvn.w	r2, #16
 8002488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2208      	movs	r2, #8
 800248e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f933 	bl	800270a <HAL_TIM_IC_CaptureCallback>
 80024a4:	e005      	b.n	80024b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f926 	bl	80026f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f935 	bl	800271c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d10e      	bne.n	80024e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d107      	bne.n	80024e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f06f 0201 	mvn.w	r2, #1
 80024dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7fe fb1a 	bl	8000b18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ee:	2b80      	cmp	r3, #128	; 0x80
 80024f0:	d10e      	bne.n	8002510 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fc:	2b80      	cmp	r3, #128	; 0x80
 80024fe:	d107      	bne.n	8002510 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 fa67 	bl	80029de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800251a:	2b40      	cmp	r3, #64	; 0x40
 800251c:	d10e      	bne.n	800253c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002528:	2b40      	cmp	r3, #64	; 0x40
 800252a:	d107      	bne.n	800253c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f8f9 	bl	800272e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	f003 0320 	and.w	r3, r3, #32
 8002546:	2b20      	cmp	r3, #32
 8002548:	d10e      	bne.n	8002568 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f003 0320 	and.w	r3, r3, #32
 8002554:	2b20      	cmp	r3, #32
 8002556:	d107      	bne.n	8002568 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f06f 0220 	mvn.w	r2, #32
 8002560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 fa32 	bl	80029cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002568:	bf00      	nop
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <HAL_TIM_ConfigClockSource+0x18>
 8002584:	2302      	movs	r3, #2
 8002586:	e0b3      	b.n	80026f0 <HAL_TIM_ConfigClockSource+0x180>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025c0:	d03e      	beq.n	8002640 <HAL_TIM_ConfigClockSource+0xd0>
 80025c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025c6:	f200 8087 	bhi.w	80026d8 <HAL_TIM_ConfigClockSource+0x168>
 80025ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ce:	f000 8085 	beq.w	80026dc <HAL_TIM_ConfigClockSource+0x16c>
 80025d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025d6:	d87f      	bhi.n	80026d8 <HAL_TIM_ConfigClockSource+0x168>
 80025d8:	2b70      	cmp	r3, #112	; 0x70
 80025da:	d01a      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0xa2>
 80025dc:	2b70      	cmp	r3, #112	; 0x70
 80025de:	d87b      	bhi.n	80026d8 <HAL_TIM_ConfigClockSource+0x168>
 80025e0:	2b60      	cmp	r3, #96	; 0x60
 80025e2:	d050      	beq.n	8002686 <HAL_TIM_ConfigClockSource+0x116>
 80025e4:	2b60      	cmp	r3, #96	; 0x60
 80025e6:	d877      	bhi.n	80026d8 <HAL_TIM_ConfigClockSource+0x168>
 80025e8:	2b50      	cmp	r3, #80	; 0x50
 80025ea:	d03c      	beq.n	8002666 <HAL_TIM_ConfigClockSource+0xf6>
 80025ec:	2b50      	cmp	r3, #80	; 0x50
 80025ee:	d873      	bhi.n	80026d8 <HAL_TIM_ConfigClockSource+0x168>
 80025f0:	2b40      	cmp	r3, #64	; 0x40
 80025f2:	d058      	beq.n	80026a6 <HAL_TIM_ConfigClockSource+0x136>
 80025f4:	2b40      	cmp	r3, #64	; 0x40
 80025f6:	d86f      	bhi.n	80026d8 <HAL_TIM_ConfigClockSource+0x168>
 80025f8:	2b30      	cmp	r3, #48	; 0x30
 80025fa:	d064      	beq.n	80026c6 <HAL_TIM_ConfigClockSource+0x156>
 80025fc:	2b30      	cmp	r3, #48	; 0x30
 80025fe:	d86b      	bhi.n	80026d8 <HAL_TIM_ConfigClockSource+0x168>
 8002600:	2b20      	cmp	r3, #32
 8002602:	d060      	beq.n	80026c6 <HAL_TIM_ConfigClockSource+0x156>
 8002604:	2b20      	cmp	r3, #32
 8002606:	d867      	bhi.n	80026d8 <HAL_TIM_ConfigClockSource+0x168>
 8002608:	2b00      	cmp	r3, #0
 800260a:	d05c      	beq.n	80026c6 <HAL_TIM_ConfigClockSource+0x156>
 800260c:	2b10      	cmp	r3, #16
 800260e:	d05a      	beq.n	80026c6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002610:	e062      	b.n	80026d8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6818      	ldr	r0, [r3, #0]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	6899      	ldr	r1, [r3, #8]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	f000 f95c 	bl	80028de <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002634:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	609a      	str	r2, [r3, #8]
      break;
 800263e:	e04e      	b.n	80026de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6818      	ldr	r0, [r3, #0]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	6899      	ldr	r1, [r3, #8]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f000 f945 	bl	80028de <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002662:	609a      	str	r2, [r3, #8]
      break;
 8002664:	e03b      	b.n	80026de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	6859      	ldr	r1, [r3, #4]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	461a      	mov	r2, r3
 8002674:	f000 f8bc 	bl	80027f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2150      	movs	r1, #80	; 0x50
 800267e:	4618      	mov	r0, r3
 8002680:	f000 f913 	bl	80028aa <TIM_ITRx_SetConfig>
      break;
 8002684:	e02b      	b.n	80026de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6818      	ldr	r0, [r3, #0]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	6859      	ldr	r1, [r3, #4]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	461a      	mov	r2, r3
 8002694:	f000 f8da 	bl	800284c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2160      	movs	r1, #96	; 0x60
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 f903 	bl	80028aa <TIM_ITRx_SetConfig>
      break;
 80026a4:	e01b      	b.n	80026de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	6859      	ldr	r1, [r3, #4]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	461a      	mov	r2, r3
 80026b4:	f000 f89c 	bl	80027f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2140      	movs	r1, #64	; 0x40
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 f8f3 	bl	80028aa <TIM_ITRx_SetConfig>
      break;
 80026c4:	e00b      	b.n	80026de <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4619      	mov	r1, r3
 80026d0:	4610      	mov	r0, r2
 80026d2:	f000 f8ea 	bl	80028aa <TIM_ITRx_SetConfig>
        break;
 80026d6:	e002      	b.n	80026de <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80026d8:	bf00      	nop
 80026da:	e000      	b.n	80026de <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80026dc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr

0800270a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	bc80      	pop	{r7}
 800271a:	4770      	bx	lr

0800271c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr

0800272e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr

08002740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a25      	ldr	r2, [pc, #148]	; (80027e8 <TIM_Base_SetConfig+0xa8>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d007      	beq.n	8002768 <TIM_Base_SetConfig+0x28>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800275e:	d003      	beq.n	8002768 <TIM_Base_SetConfig+0x28>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a22      	ldr	r2, [pc, #136]	; (80027ec <TIM_Base_SetConfig+0xac>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d108      	bne.n	800277a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800276e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	4313      	orrs	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a1a      	ldr	r2, [pc, #104]	; (80027e8 <TIM_Base_SetConfig+0xa8>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d007      	beq.n	8002792 <TIM_Base_SetConfig+0x52>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002788:	d003      	beq.n	8002792 <TIM_Base_SetConfig+0x52>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a17      	ldr	r2, [pc, #92]	; (80027ec <TIM_Base_SetConfig+0xac>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d108      	bne.n	80027a4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a07      	ldr	r2, [pc, #28]	; (80027e8 <TIM_Base_SetConfig+0xa8>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d103      	bne.n	80027d8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	615a      	str	r2, [r3, #20]
}
 80027de:	bf00      	nop
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr
 80027e8:	40012c00 	.word	0x40012c00
 80027ec:	40000400 	.word	0x40000400

080027f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b087      	sub	sp, #28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	f023 0201 	bic.w	r2, r3, #1
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800281a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	011b      	lsls	r3, r3, #4
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f023 030a 	bic.w	r3, r3, #10
 800282c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	4313      	orrs	r3, r2
 8002834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	621a      	str	r2, [r3, #32]
}
 8002842:	bf00      	nop
 8002844:	371c      	adds	r7, #28
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr

0800284c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800284c:	b480      	push	{r7}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	f023 0210 	bic.w	r2, r3, #16
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002876:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	031b      	lsls	r3, r3, #12
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	4313      	orrs	r3, r2
 8002880:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002888:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	011b      	lsls	r3, r3, #4
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	4313      	orrs	r3, r2
 8002892:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	621a      	str	r2, [r3, #32]
}
 80028a0:	bf00      	nop
 80028a2:	371c      	adds	r7, #28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr

080028aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b085      	sub	sp, #20
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
 80028b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	f043 0307 	orr.w	r3, r3, #7
 80028cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	609a      	str	r2, [r3, #8]
}
 80028d4:	bf00      	nop
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr

080028de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028de:	b480      	push	{r7}
 80028e0:	b087      	sub	sp, #28
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	60f8      	str	r0, [r7, #12]
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	607a      	str	r2, [r7, #4]
 80028ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	021a      	lsls	r2, r3, #8
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	431a      	orrs	r2, r3
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	4313      	orrs	r3, r2
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	4313      	orrs	r3, r2
 800290a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	609a      	str	r2, [r3, #8]
}
 8002912:	bf00      	nop
 8002914:	371c      	adds	r7, #28
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800292c:	2b01      	cmp	r3, #1
 800292e:	d101      	bne.n	8002934 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002930:	2302      	movs	r3, #2
 8002932:	e041      	b.n	80029b8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2202      	movs	r2, #2
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800295a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	4313      	orrs	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a14      	ldr	r2, [pc, #80]	; (80029c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d009      	beq.n	800298c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002980:	d004      	beq.n	800298c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a10      	ldr	r2, [pc, #64]	; (80029c8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d10c      	bne.n	80029a6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002992:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	68ba      	ldr	r2, [r7, #8]
 800299a:	4313      	orrs	r3, r2
 800299c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	40012c00 	.word	0x40012c00
 80029c8:	40000400 	.word	0x40000400

080029cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr

080029de <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr

080029f0 <__libc_init_array>:
 80029f0:	b570      	push	{r4, r5, r6, lr}
 80029f2:	2600      	movs	r6, #0
 80029f4:	4d0c      	ldr	r5, [pc, #48]	; (8002a28 <__libc_init_array+0x38>)
 80029f6:	4c0d      	ldr	r4, [pc, #52]	; (8002a2c <__libc_init_array+0x3c>)
 80029f8:	1b64      	subs	r4, r4, r5
 80029fa:	10a4      	asrs	r4, r4, #2
 80029fc:	42a6      	cmp	r6, r4
 80029fe:	d109      	bne.n	8002a14 <__libc_init_array+0x24>
 8002a00:	f000 f822 	bl	8002a48 <_init>
 8002a04:	2600      	movs	r6, #0
 8002a06:	4d0a      	ldr	r5, [pc, #40]	; (8002a30 <__libc_init_array+0x40>)
 8002a08:	4c0a      	ldr	r4, [pc, #40]	; (8002a34 <__libc_init_array+0x44>)
 8002a0a:	1b64      	subs	r4, r4, r5
 8002a0c:	10a4      	asrs	r4, r4, #2
 8002a0e:	42a6      	cmp	r6, r4
 8002a10:	d105      	bne.n	8002a1e <__libc_init_array+0x2e>
 8002a12:	bd70      	pop	{r4, r5, r6, pc}
 8002a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a18:	4798      	blx	r3
 8002a1a:	3601      	adds	r6, #1
 8002a1c:	e7ee      	b.n	80029fc <__libc_init_array+0xc>
 8002a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a22:	4798      	blx	r3
 8002a24:	3601      	adds	r6, #1
 8002a26:	e7f2      	b.n	8002a0e <__libc_init_array+0x1e>
 8002a28:	08002a80 	.word	0x08002a80
 8002a2c:	08002a80 	.word	0x08002a80
 8002a30:	08002a80 	.word	0x08002a80
 8002a34:	08002a84 	.word	0x08002a84

08002a38 <memset>:
 8002a38:	4603      	mov	r3, r0
 8002a3a:	4402      	add	r2, r0
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d100      	bne.n	8002a42 <memset+0xa>
 8002a40:	4770      	bx	lr
 8002a42:	f803 1b01 	strb.w	r1, [r3], #1
 8002a46:	e7f9      	b.n	8002a3c <memset+0x4>

08002a48 <_init>:
 8002a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a4a:	bf00      	nop
 8002a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a4e:	bc08      	pop	{r3}
 8002a50:	469e      	mov	lr, r3
 8002a52:	4770      	bx	lr

08002a54 <_fini>:
 8002a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a56:	bf00      	nop
 8002a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a5a:	bc08      	pop	{r3}
 8002a5c:	469e      	mov	lr, r3
 8002a5e:	4770      	bx	lr
