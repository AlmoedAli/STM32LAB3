
ex_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a18  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002b24  08002b24  00012b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b44  08002b44  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08002b44  08002b44  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b44  08002b44  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b44  08002b44  00012b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b48  08002b48  00012b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08002b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  200000a4  08002bf0  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08002bf0  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c1c  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bb8  00000000  00000000  00029ce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  0002b8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000998  00000000  00000000  0002c358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017489  00000000  00000000  0002ccf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be69  00000000  00000000  00044179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085667  00000000  00000000  0004ffe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d5649  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029b0  00000000  00000000  000d569c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a4 	.word	0x200000a4
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b0c 	.word	0x08002b0c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a8 	.word	0x200000a8
 8000148:	08002b0c 	.word	0x08002b0c

0800014c <getInput>:

int durationPressLongButton[3]= {100, 100, 100};
int durationPressShortButton[3]= {20, 20, 20};

void getInput()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for (int i= 0; i < 3; i++)
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e0ab      	b.n	80002b0 <getInput+0x164>
	{
		state1Button[i]= state2Button[i];
 8000158:	4a5a      	ldr	r2, [pc, #360]	; (80002c4 <getInput+0x178>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000160:	4959      	ldr	r1, [pc, #356]	; (80002c8 <getInput+0x17c>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state2Button[i]= state3Button[i];
 8000168:	4a58      	ldr	r2, [pc, #352]	; (80002cc <getInput+0x180>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000170:	4954      	ldr	r1, [pc, #336]	; (80002c4 <getInput+0x178>)
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state3Button[i]= HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 8000178:	4a55      	ldr	r2, [pc, #340]	; (80002d0 <getInput+0x184>)
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000180:	4954      	ldr	r1, [pc, #336]	; (80002d4 <getInput+0x188>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000188:	4619      	mov	r1, r3
 800018a:	4610      	mov	r0, r2
 800018c:	f001 fc7e 	bl	8001a8c <HAL_GPIO_ReadPin>
 8000190:	4603      	mov	r3, r0
 8000192:	4619      	mov	r1, r3
 8000194:	4a4d      	ldr	r2, [pc, #308]	; (80002cc <getInput+0x180>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if ((state1Button[i]== state2Button[i]) && (state2Button[i]== state3Button[i]))
 800019c:	4a4a      	ldr	r2, [pc, #296]	; (80002c8 <getInput+0x17c>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a4:	4947      	ldr	r1, [pc, #284]	; (80002c4 <getInput+0x178>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001ac:	429a      	cmp	r2, r3
 80001ae:	d177      	bne.n	80002a0 <getInput+0x154>
 80001b0:	4a44      	ldr	r2, [pc, #272]	; (80002c4 <getInput+0x178>)
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b8:	4944      	ldr	r1, [pc, #272]	; (80002cc <getInput+0x180>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001c0:	429a      	cmp	r2, r3
 80001c2:	d16d      	bne.n	80002a0 <getInput+0x154>
		{
			if (state0Button[i] != state1Button[i])  // state0 != state1
 80001c4:	4a44      	ldr	r2, [pc, #272]	; (80002d8 <getInput+0x18c>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001cc:	493e      	ldr	r1, [pc, #248]	; (80002c8 <getInput+0x17c>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001d4:	429a      	cmp	r2, r3
 80001d6:	d029      	beq.n	800022c <getInput+0xe0>
			{
				switch (state0Button[i])
 80001d8:	4a3f      	ldr	r2, [pc, #252]	; (80002d8 <getInput+0x18c>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d002      	beq.n	80001ea <getInput+0x9e>
 80001e4:	2b01      	cmp	r3, #1
 80001e6:	d011      	beq.n	800020c <getInput+0xc0>
						state0Button[i]= PRESS_STATE;
						durationPressLongButton[i]= 100;
						durationPressShortButton[i]= 20;
						break;
					default:
						break;
 80001e8:	e05f      	b.n	80002aa <getInput+0x15e>
						state0Button[i]= NORMAL_STATE;
 80001ea:	4a3b      	ldr	r2, [pc, #236]	; (80002d8 <getInput+0x18c>)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	2101      	movs	r1, #1
 80001f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						if (durationPressShortButton[i] > 0)
 80001f4:	4a39      	ldr	r2, [pc, #228]	; (80002dc <getInput+0x190>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	dd51      	ble.n	80002a4 <getInput+0x158>
							flagButton[i]= PRESS_STATE;
 8000200:	4a37      	ldr	r2, [pc, #220]	; (80002e0 <getInput+0x194>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	2100      	movs	r1, #0
 8000206:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						break;
 800020a:	e04b      	b.n	80002a4 <getInput+0x158>
						state0Button[i]= PRESS_STATE;
 800020c:	4a32      	ldr	r2, [pc, #200]	; (80002d8 <getInput+0x18c>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	2100      	movs	r1, #0
 8000212:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						durationPressLongButton[i]= 100;
 8000216:	4a33      	ldr	r2, [pc, #204]	; (80002e4 <getInput+0x198>)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2164      	movs	r1, #100	; 0x64
 800021c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						durationPressShortButton[i]= 20;
 8000220:	4a2e      	ldr	r2, [pc, #184]	; (80002dc <getInput+0x190>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2114      	movs	r1, #20
 8000226:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						break;
 800022a:	e03e      	b.n	80002aa <getInput+0x15e>
				}
			}
			else
			{
				switch (state0Button[i])
 800022c:	4a2a      	ldr	r2, [pc, #168]	; (80002d8 <getInput+0x18c>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d001      	beq.n	800023c <getInput+0xf0>
 8000238:	2b01      	cmp	r3, #1
						{
							durationPressShortButton[i]--;
						}
						break;
					default:
						break;
 800023a:	e036      	b.n	80002aa <getInput+0x15e>
						if (durationPressLongButton[i] > 0)
 800023c:	4a29      	ldr	r2, [pc, #164]	; (80002e4 <getInput+0x198>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000244:	2b00      	cmp	r3, #0
 8000246:	dd1b      	ble.n	8000280 <getInput+0x134>
							durationPressLongButton[i]--;
 8000248:	4a26      	ldr	r2, [pc, #152]	; (80002e4 <getInput+0x198>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000250:	1e5a      	subs	r2, r3, #1
 8000252:	4924      	ldr	r1, [pc, #144]	; (80002e4 <getInput+0x198>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
							if (durationPressLongButton[i] <= 0)
 800025a:	4a22      	ldr	r2, [pc, #136]	; (80002e4 <getInput+0x198>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000262:	2b00      	cmp	r3, #0
 8000264:	dc0c      	bgt.n	8000280 <getInput+0x134>
								flagButton[i]= PRESS_STATE;
 8000266:	4a1e      	ldr	r2, [pc, #120]	; (80002e0 <getInput+0x194>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2100      	movs	r1, #0
 800026c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
								if (i== 1)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2b01      	cmp	r3, #1
 8000274:	d104      	bne.n	8000280 <getInput+0x134>
									durationPressLongButton[i]= 10;
 8000276:	4a1b      	ldr	r2, [pc, #108]	; (80002e4 <getInput+0x198>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	210a      	movs	r1, #10
 800027c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						if (durationPressShortButton[i] > 0)
 8000280:	4a16      	ldr	r2, [pc, #88]	; (80002dc <getInput+0x190>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000288:	2b00      	cmp	r3, #0
 800028a:	dd0d      	ble.n	80002a8 <getInput+0x15c>
							durationPressShortButton[i]--;
 800028c:	4a13      	ldr	r2, [pc, #76]	; (80002dc <getInput+0x190>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000294:	1e5a      	subs	r2, r3, #1
 8000296:	4911      	ldr	r1, [pc, #68]	; (80002dc <getInput+0x190>)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						break;
 800029e:	e003      	b.n	80002a8 <getInput+0x15c>
				}
			}
 80002a0:	bf00      	nop
 80002a2:	e002      	b.n	80002aa <getInput+0x15e>
						break;
 80002a4:	bf00      	nop
 80002a6:	e000      	b.n	80002aa <getInput+0x15e>
						break;
 80002a8:	bf00      	nop
	for (int i= 0; i < 3; i++)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	3301      	adds	r3, #1
 80002ae:	607b      	str	r3, [r7, #4]
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2b02      	cmp	r3, #2
 80002b4:	f77f af50 	ble.w	8000158 <getInput+0xc>
		}
	}
}
 80002b8:	bf00      	nop
 80002ba:	bf00      	nop
 80002bc:	3708      	adds	r7, #8
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	2000002c 	.word	0x2000002c
 80002c8:	20000020 	.word	0x20000020
 80002cc:	20000038 	.word	0x20000038
 80002d0:	20000000 	.word	0x20000000
 80002d4:	2000000c 	.word	0x2000000c
 80002d8:	20000014 	.word	0x20000014
 80002dc:	2000005c 	.word	0x2000005c
 80002e0:	20000044 	.word	0x20000044
 80002e4:	20000050 	.word	0x20000050

080002e8 <update7SEGBuffer>:

#include "deviceDriver7Segment.h"
#include "physical7Segment.h"

void update7SEGBuffer(int time, int index_traffic)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	6039      	str	r1, [r7, #0]
	switch (index_traffic)
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	2b03      	cmp	r3, #3
 80002f6:	d039      	beq.n	800036c <update7SEGBuffer+0x84>
 80002f8:	683b      	ldr	r3, [r7, #0]
 80002fa:	2b03      	cmp	r3, #3
 80002fc:	dc3a      	bgt.n	8000374 <update7SEGBuffer+0x8c>
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	2b01      	cmp	r3, #1
 8000302:	d003      	beq.n	800030c <update7SEGBuffer+0x24>
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	2b02      	cmp	r3, #2
 8000308:	d018      	beq.n	800033c <update7SEGBuffer+0x54>
			break;
		case 3:
			led_buffer[4]= time;
			break;
		default:
			break;
 800030a:	e033      	b.n	8000374 <update7SEGBuffer+0x8c>
			led_buffer[0]= time/10;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	4a1c      	ldr	r2, [pc, #112]	; (8000380 <update7SEGBuffer+0x98>)
 8000310:	fb82 1203 	smull	r1, r2, r2, r3
 8000314:	1092      	asrs	r2, r2, #2
 8000316:	17db      	asrs	r3, r3, #31
 8000318:	1ad3      	subs	r3, r2, r3
 800031a:	4a1a      	ldr	r2, [pc, #104]	; (8000384 <update7SEGBuffer+0x9c>)
 800031c:	6013      	str	r3, [r2, #0]
			led_buffer[1]= time%10;
 800031e:	6879      	ldr	r1, [r7, #4]
 8000320:	4b17      	ldr	r3, [pc, #92]	; (8000380 <update7SEGBuffer+0x98>)
 8000322:	fb83 2301 	smull	r2, r3, r3, r1
 8000326:	109a      	asrs	r2, r3, #2
 8000328:	17cb      	asrs	r3, r1, #31
 800032a:	1ad2      	subs	r2, r2, r3
 800032c:	4613      	mov	r3, r2
 800032e:	009b      	lsls	r3, r3, #2
 8000330:	4413      	add	r3, r2
 8000332:	005b      	lsls	r3, r3, #1
 8000334:	1aca      	subs	r2, r1, r3
 8000336:	4b13      	ldr	r3, [pc, #76]	; (8000384 <update7SEGBuffer+0x9c>)
 8000338:	605a      	str	r2, [r3, #4]
			break;
 800033a:	e01c      	b.n	8000376 <update7SEGBuffer+0x8e>
			led_buffer[2]= time/10;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	4a10      	ldr	r2, [pc, #64]	; (8000380 <update7SEGBuffer+0x98>)
 8000340:	fb82 1203 	smull	r1, r2, r2, r3
 8000344:	1092      	asrs	r2, r2, #2
 8000346:	17db      	asrs	r3, r3, #31
 8000348:	1ad3      	subs	r3, r2, r3
 800034a:	4a0e      	ldr	r2, [pc, #56]	; (8000384 <update7SEGBuffer+0x9c>)
 800034c:	6093      	str	r3, [r2, #8]
			led_buffer[3]= time %10;
 800034e:	6879      	ldr	r1, [r7, #4]
 8000350:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <update7SEGBuffer+0x98>)
 8000352:	fb83 2301 	smull	r2, r3, r3, r1
 8000356:	109a      	asrs	r2, r3, #2
 8000358:	17cb      	asrs	r3, r1, #31
 800035a:	1ad2      	subs	r2, r2, r3
 800035c:	4613      	mov	r3, r2
 800035e:	009b      	lsls	r3, r3, #2
 8000360:	4413      	add	r3, r2
 8000362:	005b      	lsls	r3, r3, #1
 8000364:	1aca      	subs	r2, r1, r3
 8000366:	4b07      	ldr	r3, [pc, #28]	; (8000384 <update7SEGBuffer+0x9c>)
 8000368:	60da      	str	r2, [r3, #12]
			break;
 800036a:	e004      	b.n	8000376 <update7SEGBuffer+0x8e>
			led_buffer[4]= time;
 800036c:	4a05      	ldr	r2, [pc, #20]	; (8000384 <update7SEGBuffer+0x9c>)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	6113      	str	r3, [r2, #16]
			break;
 8000372:	e000      	b.n	8000376 <update7SEGBuffer+0x8e>
			break;
 8000374:	bf00      	nop
	}
}
 8000376:	bf00      	nop
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr
 8000380:	66666667 	.word	0x66666667
 8000384:	20000084 	.word	0x20000084

08000388 <update7SEGBufferTraffic1>:


void update7SEGBufferTraffic1(int time)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
	update7SEGBuffer(time, 1);
 8000390:	2101      	movs	r1, #1
 8000392:	6878      	ldr	r0, [r7, #4]
 8000394:	f7ff ffa8 	bl	80002e8 <update7SEGBuffer>
}
 8000398:	bf00      	nop
 800039a:	3708      	adds	r7, #8
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <update7SEGBufferTraffic2>:

void update7SEGBufferTraffic2(int time)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
	update7SEGBuffer(time, 2);
 80003a8:	2102      	movs	r1, #2
 80003aa:	6878      	ldr	r0, [r7, #4]
 80003ac:	f7ff ff9c 	bl	80002e8 <update7SEGBuffer>
}
 80003b0:	bf00      	nop
 80003b2:	3708      	adds	r7, #8
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <update7SEGBufferMode>:

void update7SEGBufferMode(int time)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	update7SEGBuffer(time, 3);
 80003c0:	2103      	movs	r1, #3
 80003c2:	6878      	ldr	r0, [r7, #4]
 80003c4:	f7ff ff90 	bl	80002e8 <update7SEGBuffer>
}
 80003c8:	bf00      	nop
 80003ca:	3708      	adds	r7, #8
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <DISPLAYALL7SEG>:

void DISPLAYALL7SEG()
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
	Scan7SEG();
 80003d4:	f000 fd74 	bl	8000ec0 <Scan7SEG>
}
 80003d8:	bf00      	nop
 80003da:	bd80      	pop	{r7, pc}

080003dc <blinkingYELLOW>:
#include <main.h>
#include "deviceDriverSingleLed.h"
#include "physical7SingleLed.h"

void blinkingYELLOW()
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC1, YELLOWADVANCEDMODE);
 80003e0:	2105      	movs	r1, #5
 80003e2:	2008      	movs	r0, #8
 80003e4:	f000 fe0c 	bl	8001000 <controlSingleLed>
	controlSingleLed(TRAFFIC2, YELLOWADVANCEDMODE);
 80003e8:	2105      	movs	r1, #5
 80003ea:	2009      	movs	r0, #9
 80003ec:	f000 fe08 	bl	8001000 <controlSingleLed>
}
 80003f0:	bf00      	nop
 80003f2:	bd80      	pop	{r7, pc}

080003f4 <blinkingRED>:

void blinkingRED()
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC1, REDADVANCEDMODE);
 80003f8:	2103      	movs	r1, #3
 80003fa:	2008      	movs	r0, #8
 80003fc:	f000 fe00 	bl	8001000 <controlSingleLed>
	controlSingleLed(TRAFFIC2, REDADVANCEDMODE);
 8000400:	2103      	movs	r1, #3
 8000402:	2009      	movs	r0, #9
 8000404:	f000 fdfc 	bl	8001000 <controlSingleLed>
}
 8000408:	bf00      	nop
 800040a:	bd80      	pop	{r7, pc}

0800040c <blinkingGREEN>:
void blinkingGREEN()
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC1, GREENADVANCEDMODE);
 8000410:	2104      	movs	r1, #4
 8000412:	2008      	movs	r0, #8
 8000414:	f000 fdf4 	bl	8001000 <controlSingleLed>
	controlSingleLed(TRAFFIC2, GREENADVANCEDMODE);
 8000418:	2104      	movs	r1, #4
 800041a:	2009      	movs	r0, #9
 800041c:	f000 fdf0 	bl	8001000 <controlSingleLed>
}
 8000420:	bf00      	nop
 8000422:	bd80      	pop	{r7, pc}

08000424 <offAllSingLEDs>:
void offAllSingLEDs()
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC1, OFF);
 8000428:	2106      	movs	r1, #6
 800042a:	2008      	movs	r0, #8
 800042c:	f000 fde8 	bl	8001000 <controlSingleLed>
	controlSingleLed(TRAFFIC2, OFF);
 8000430:	2106      	movs	r1, #6
 8000432:	2009      	movs	r0, #9
 8000434:	f000 fde4 	bl	8001000 <controlSingleLed>
}
 8000438:	bf00      	nop
 800043a:	bd80      	pop	{r7, pc}

0800043c <onAllSingLEDs>:
void onAllSingLEDs()
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC1, ON);
 8000440:	2107      	movs	r1, #7
 8000442:	2008      	movs	r0, #8
 8000444:	f000 fddc 	bl	8001000 <controlSingleLed>
	controlSingleLed(TRAFFIC2, ON);
 8000448:	2107      	movs	r1, #7
 800044a:	2009      	movs	r0, #9
 800044c:	f000 fdd8 	bl	8001000 <controlSingleLed>
}
 8000450:	bf00      	nop
 8000452:	bd80      	pop	{r7, pc}

08000454 <onSingleRedTraffic1>:
void onSingleRedTraffic1()
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC1, REDNORMALMODE);
 8000458:	2100      	movs	r1, #0
 800045a:	2008      	movs	r0, #8
 800045c:	f000 fdd0 	bl	8001000 <controlSingleLed>
}
 8000460:	bf00      	nop
 8000462:	bd80      	pop	{r7, pc}

08000464 <onSingleYellowTraffic1>:
void onSingleYellowTraffic1()
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC1, YELLOWNORMALMODE);
 8000468:	2102      	movs	r1, #2
 800046a:	2008      	movs	r0, #8
 800046c:	f000 fdc8 	bl	8001000 <controlSingleLed>
}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}

08000474 <onSingleGreenTraffic1>:

void onSingleGreenTraffic1()
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC1, GREENNORMALMODE);
 8000478:	2101      	movs	r1, #1
 800047a:	2008      	movs	r0, #8
 800047c:	f000 fdc0 	bl	8001000 <controlSingleLed>
}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}

08000484 <onSingleRedTraffic2>:

void onSingleRedTraffic2()
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC2, REDNORMALMODE);
 8000488:	2100      	movs	r1, #0
 800048a:	2009      	movs	r0, #9
 800048c:	f000 fdb8 	bl	8001000 <controlSingleLed>
}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}

08000494 <onSingleYellowTraffic2>:
void onSingleYellowTraffic2()
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC2, YELLOWNORMALMODE);
 8000498:	2102      	movs	r1, #2
 800049a:	2009      	movs	r0, #9
 800049c:	f000 fdb0 	bl	8001000 <controlSingleLed>
}
 80004a0:	bf00      	nop
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <onSingleGreenTraffic2>:

void onSingleGreenTraffic2()
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC2, GREENNORMALMODE);
 80004a8:	2101      	movs	r1, #1
 80004aa:	2009      	movs	r0, #9
 80004ac:	f000 fda8 	bl	8001000 <controlSingleLed>
}
 80004b0:	bf00      	nop
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b8:	f000 fffe 	bl	80014b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004bc:	f000 f9d0 	bl	8000860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c0:	f000 fa56 	bl	8000970 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004c4:	f000 fa08 	bl	80008d8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80004c8:	48a0      	ldr	r0, [pc, #640]	; (800074c <main+0x298>)
 80004ca:	f001 ff5f 	bl	800238c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
	offAllSingLEDs();
 80004ce:	f7ff ffa9 	bl	8000424 <offAllSingLEDs>
	normalModeFunction();
 80004d2:	f000 fac3 	bl	8000a5c <normalModeFunction>
	setTimer2(100);
 80004d6:	2064      	movs	r0, #100	; 0x64
 80004d8:	f000 fefe 	bl	80012d8 <setTimer2>
	DISPLAYALL7SEG();
 80004dc:	f7ff ff78 	bl	80003d0 <DISPLAYALL7SEG>
	setTimer4(20);
 80004e0:	2014      	movs	r0, #20
 80004e2:	f000 ff21 	bl	8001328 <setTimer4>
	setTimer1(1);
 80004e6:	2001      	movs	r0, #1
 80004e8:	f000 fee2 	bl	80012b0 <setTimer1>
    while (1)
    {
  	 if (flag1== 1)  // flag for button
 80004ec:	4b98      	ldr	r3, [pc, #608]	; (8000750 <main+0x29c>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	f040 8160 	bne.w	80007b6 <main+0x302>
  	 {
  		 setTimer1(1);
 80004f6:	2001      	movs	r0, #1
 80004f8:	f000 feda 	bl	80012b0 <setTimer1>
  		 getInput();
 80004fc:	f7ff fe26 	bl	800014c <getInput>
  		 if (flagButton[0]== PRESS_STATE)
 8000500:	4b94      	ldr	r3, [pc, #592]	; (8000754 <main+0x2a0>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	f040 80a5 	bne.w	8000654 <main+0x1a0>
  		 {
  			 flagButton[0]= NORMAL_STATE;
 800050a:	4b92      	ldr	r3, [pc, #584]	; (8000754 <main+0x2a0>)
 800050c:	2201      	movs	r2, #1
 800050e:	601a      	str	r2, [r3, #0]
  			 switch (modeStatus)
 8000510:	4b91      	ldr	r3, [pc, #580]	; (8000758 <main+0x2a4>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b04      	cmp	r3, #4
 8000516:	f200 809f 	bhi.w	8000658 <main+0x1a4>
 800051a:	a201      	add	r2, pc, #4	; (adr r2, 8000520 <main+0x6c>)
 800051c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000520:	08000535 	.word	0x08000535
 8000524:	08000579 	.word	0x08000579
 8000528:	080005af 	.word	0x080005af
 800052c:	080005e5 	.word	0x080005e5
 8000530:	0800061b 	.word	0x0800061b
  			 {
  			 	case INITMODE:
  			 		modeStatus= MODE1;
 8000534:	4b88      	ldr	r3, [pc, #544]	; (8000758 <main+0x2a4>)
 8000536:	2201      	movs	r2, #1
 8000538:	601a      	str	r2, [r3, #0]
  					flagAdvancedMode= 0;
 800053a:	4b88      	ldr	r3, [pc, #544]	; (800075c <main+0x2a8>)
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
  					tempDurationLedGreen= durationLedGreen;
 8000540:	4b87      	ldr	r3, [pc, #540]	; (8000760 <main+0x2ac>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a87      	ldr	r2, [pc, #540]	; (8000764 <main+0x2b0>)
 8000546:	6013      	str	r3, [r2, #0]
					tempDurationLedRed= durationLedRed;
 8000548:	4b87      	ldr	r3, [pc, #540]	; (8000768 <main+0x2b4>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a87      	ldr	r2, [pc, #540]	; (800076c <main+0x2b8>)
 800054e:	6013      	str	r3, [r2, #0]
					tempDurationLedYellow= durationLedYellow;
 8000550:	4b87      	ldr	r3, [pc, #540]	; (8000770 <main+0x2bc>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a87      	ldr	r2, [pc, #540]	; (8000774 <main+0x2c0>)
 8000556:	6013      	str	r3, [r2, #0]
  					offAllSingLEDs();
 8000558:	f7ff ff64 	bl	8000424 <offAllSingLEDs>
  					update7SEGBufferMode(MODE1);
 800055c:	2001      	movs	r0, #1
 800055e:	f7ff ff2b 	bl	80003b8 <update7SEGBufferMode>
  					normalModeFunction();
 8000562:	f000 fa7b 	bl	8000a5c <normalModeFunction>
  					setTimer2(100);
 8000566:	2064      	movs	r0, #100	; 0x64
 8000568:	f000 feb6 	bl	80012d8 <setTimer2>
  					DISPLAYALL7SEG();
 800056c:	f7ff ff30 	bl	80003d0 <DISPLAYALL7SEG>
  					setTimer4(20);
 8000570:	2014      	movs	r0, #20
 8000572:	f000 fed9 	bl	8001328 <setTimer4>
  				 	break;
 8000576:	e070      	b.n	800065a <main+0x1a6>
  				case MODE1:
  					modeStatus= MODE2;
 8000578:	4b77      	ldr	r3, [pc, #476]	; (8000758 <main+0x2a4>)
 800057a:	2202      	movs	r2, #2
 800057c:	601a      	str	r2, [r3, #0]
  					flagAdvancedMode= 1;
 800057e:	4b77      	ldr	r3, [pc, #476]	; (800075c <main+0x2a8>)
 8000580:	2201      	movs	r2, #1
 8000582:	601a      	str	r2, [r3, #0]
  					offAllSingLEDs();
 8000584:	f7ff ff4e 	bl	8000424 <offAllSingLEDs>
  					blinkingRED();
 8000588:	f7ff ff34 	bl	80003f4 <blinkingRED>
  					setTimer3(50);
 800058c:	2032      	movs	r0, #50	; 0x32
 800058e:	f000 feb7 	bl	8001300 <setTimer3>
  					update7SEGBufferTraffic1(durationLedRed);
 8000592:	4b75      	ldr	r3, [pc, #468]	; (8000768 <main+0x2b4>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff fef6 	bl	8000388 <update7SEGBufferTraffic1>
  					update7SEGBufferTraffic2(durationLedRed);
 800059c:	4b72      	ldr	r3, [pc, #456]	; (8000768 <main+0x2b4>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff fefd 	bl	80003a0 <update7SEGBufferTraffic2>
  					update7SEGBufferMode(MODE2);
 80005a6:	2002      	movs	r0, #2
 80005a8:	f7ff ff06 	bl	80003b8 <update7SEGBufferMode>
  					break;
 80005ac:	e055      	b.n	800065a <main+0x1a6>
  				case MODE2:
  					modeStatus= MODE3;
 80005ae:	4b6a      	ldr	r3, [pc, #424]	; (8000758 <main+0x2a4>)
 80005b0:	2203      	movs	r2, #3
 80005b2:	601a      	str	r2, [r3, #0]
  					flagAdvancedMode= 1;
 80005b4:	4b69      	ldr	r3, [pc, #420]	; (800075c <main+0x2a8>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	601a      	str	r2, [r3, #0]
  					offAllSingLEDs();
 80005ba:	f7ff ff33 	bl	8000424 <offAllSingLEDs>
  					blinkingYELLOW();
 80005be:	f7ff ff0d 	bl	80003dc <blinkingYELLOW>
  					setTimer3(50);
 80005c2:	2032      	movs	r0, #50	; 0x32
 80005c4:	f000 fe9c 	bl	8001300 <setTimer3>
  					update7SEGBufferTraffic1(durationLedYellow);
 80005c8:	4b69      	ldr	r3, [pc, #420]	; (8000770 <main+0x2bc>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f7ff fedb 	bl	8000388 <update7SEGBufferTraffic1>
					update7SEGBufferTraffic2(durationLedYellow);
 80005d2:	4b67      	ldr	r3, [pc, #412]	; (8000770 <main+0x2bc>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff fee2 	bl	80003a0 <update7SEGBufferTraffic2>
					update7SEGBufferMode(MODE3);
 80005dc:	2003      	movs	r0, #3
 80005de:	f7ff feeb 	bl	80003b8 <update7SEGBufferMode>
  					break;
 80005e2:	e03a      	b.n	800065a <main+0x1a6>
  				case MODE3:
  					modeStatus= MODE4;
 80005e4:	4b5c      	ldr	r3, [pc, #368]	; (8000758 <main+0x2a4>)
 80005e6:	2204      	movs	r2, #4
 80005e8:	601a      	str	r2, [r3, #0]
  					flagAdvancedMode= 1;
 80005ea:	4b5c      	ldr	r3, [pc, #368]	; (800075c <main+0x2a8>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	601a      	str	r2, [r3, #0]
  					offAllSingLEDs();
 80005f0:	f7ff ff18 	bl	8000424 <offAllSingLEDs>
  					blinkingGREEN();
 80005f4:	f7ff ff0a 	bl	800040c <blinkingGREEN>
  					setTimer3(50);
 80005f8:	2032      	movs	r0, #50	; 0x32
 80005fa:	f000 fe81 	bl	8001300 <setTimer3>
  					update7SEGBufferTraffic1(durationLedGreen);
 80005fe:	4b58      	ldr	r3, [pc, #352]	; (8000760 <main+0x2ac>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff fec0 	bl	8000388 <update7SEGBufferTraffic1>
					update7SEGBufferTraffic2(durationLedGreen);
 8000608:	4b55      	ldr	r3, [pc, #340]	; (8000760 <main+0x2ac>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff fec7 	bl	80003a0 <update7SEGBufferTraffic2>
					update7SEGBufferMode(MODE4);
 8000612:	2004      	movs	r0, #4
 8000614:	f7ff fed0 	bl	80003b8 <update7SEGBufferMode>
  					break;
 8000618:	e01f      	b.n	800065a <main+0x1a6>
  				case MODE4:
  					modeStatus= MODE1;
 800061a:	4b4f      	ldr	r3, [pc, #316]	; (8000758 <main+0x2a4>)
 800061c:	2201      	movs	r2, #1
 800061e:	601a      	str	r2, [r3, #0]
  					flagAdvancedMode= 0;
 8000620:	4b4e      	ldr	r3, [pc, #312]	; (800075c <main+0x2a8>)
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
  					tempDurationLedGreen= durationLedGreen;
 8000626:	4b4e      	ldr	r3, [pc, #312]	; (8000760 <main+0x2ac>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a4e      	ldr	r2, [pc, #312]	; (8000764 <main+0x2b0>)
 800062c:	6013      	str	r3, [r2, #0]
  					tempDurationLedRed= durationLedRed;
 800062e:	4b4e      	ldr	r3, [pc, #312]	; (8000768 <main+0x2b4>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a4e      	ldr	r2, [pc, #312]	; (800076c <main+0x2b8>)
 8000634:	6013      	str	r3, [r2, #0]
  					tempDurationLedYellow= durationLedYellow;
 8000636:	4b4e      	ldr	r3, [pc, #312]	; (8000770 <main+0x2bc>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a4e      	ldr	r2, [pc, #312]	; (8000774 <main+0x2c0>)
 800063c:	6013      	str	r3, [r2, #0]
  					offAllSingLEDs();
 800063e:	f7ff fef1 	bl	8000424 <offAllSingLEDs>
  					update7SEGBufferMode(MODE1);
 8000642:	2001      	movs	r0, #1
 8000644:	f7ff feb8 	bl	80003b8 <update7SEGBufferMode>
  					normalModeFunction();
 8000648:	f000 fa08 	bl	8000a5c <normalModeFunction>
  					setTimer2(100);
 800064c:	2064      	movs	r0, #100	; 0x64
 800064e:	f000 fe43 	bl	80012d8 <setTimer2>
  					break;
 8000652:	e002      	b.n	800065a <main+0x1a6>
  				default:
  					break;
  			 }
  		 }
 8000654:	bf00      	nop
 8000656:	e000      	b.n	800065a <main+0x1a6>
  					break;
 8000658:	bf00      	nop
  		 if (flagButton[1]== PRESS_STATE)
 800065a:	4b3e      	ldr	r3, [pc, #248]	; (8000754 <main+0x2a0>)
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d152      	bne.n	8000708 <main+0x254>
  		 {
  			 flagButton[1]= NORMAL_STATE;
 8000662:	4b3c      	ldr	r3, [pc, #240]	; (8000754 <main+0x2a0>)
 8000664:	2201      	movs	r2, #1
 8000666:	605a      	str	r2, [r3, #4]
  			 switch (modeStatus)
 8000668:	4b3b      	ldr	r3, [pc, #236]	; (8000758 <main+0x2a4>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b04      	cmp	r3, #4
 800066e:	d034      	beq.n	80006da <main+0x226>
 8000670:	2b04      	cmp	r3, #4
 8000672:	dc4b      	bgt.n	800070c <main+0x258>
 8000674:	2b02      	cmp	r3, #2
 8000676:	d002      	beq.n	800067e <main+0x1ca>
 8000678:	2b03      	cmp	r3, #3
 800067a:	d017      	beq.n	80006ac <main+0x1f8>
  					}
					update7SEGBufferTraffic1(tempDurationLedGreen);
					update7SEGBufferTraffic2(tempDurationLedGreen);
  					break;
  				default:
  					break;
 800067c:	e046      	b.n	800070c <main+0x258>
  					tempDurationLedRed++;
 800067e:	4b3b      	ldr	r3, [pc, #236]	; (800076c <main+0x2b8>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	3301      	adds	r3, #1
 8000684:	4a39      	ldr	r2, [pc, #228]	; (800076c <main+0x2b8>)
 8000686:	6013      	str	r3, [r2, #0]
  					if (tempDurationLedRed > 99)
 8000688:	4b38      	ldr	r3, [pc, #224]	; (800076c <main+0x2b8>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b63      	cmp	r3, #99	; 0x63
 800068e:	dd02      	ble.n	8000696 <main+0x1e2>
  						tempDurationLedRed= 0;
 8000690:	4b36      	ldr	r3, [pc, #216]	; (800076c <main+0x2b8>)
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
  					update7SEGBufferTraffic1(tempDurationLedRed);
 8000696:	4b35      	ldr	r3, [pc, #212]	; (800076c <main+0x2b8>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff fe74 	bl	8000388 <update7SEGBufferTraffic1>
  					update7SEGBufferTraffic2(tempDurationLedRed);
 80006a0:	4b32      	ldr	r3, [pc, #200]	; (800076c <main+0x2b8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff fe7b 	bl	80003a0 <update7SEGBufferTraffic2>
  					break;
 80006aa:	e030      	b.n	800070e <main+0x25a>
  					tempDurationLedYellow++;
 80006ac:	4b31      	ldr	r3, [pc, #196]	; (8000774 <main+0x2c0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	3301      	adds	r3, #1
 80006b2:	4a30      	ldr	r2, [pc, #192]	; (8000774 <main+0x2c0>)
 80006b4:	6013      	str	r3, [r2, #0]
  					if (tempDurationLedYellow > 99)
 80006b6:	4b2f      	ldr	r3, [pc, #188]	; (8000774 <main+0x2c0>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b63      	cmp	r3, #99	; 0x63
 80006bc:	dd02      	ble.n	80006c4 <main+0x210>
  						tempDurationLedYellow= 0;
 80006be:	4b2d      	ldr	r3, [pc, #180]	; (8000774 <main+0x2c0>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
					update7SEGBufferTraffic1(tempDurationLedYellow);
 80006c4:	4b2b      	ldr	r3, [pc, #172]	; (8000774 <main+0x2c0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff fe5d 	bl	8000388 <update7SEGBufferTraffic1>
					update7SEGBufferTraffic2(tempDurationLedYellow);
 80006ce:	4b29      	ldr	r3, [pc, #164]	; (8000774 <main+0x2c0>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff fe64 	bl	80003a0 <update7SEGBufferTraffic2>
  					break;
 80006d8:	e019      	b.n	800070e <main+0x25a>
  					tempDurationLedGreen++;
 80006da:	4b22      	ldr	r3, [pc, #136]	; (8000764 <main+0x2b0>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	3301      	adds	r3, #1
 80006e0:	4a20      	ldr	r2, [pc, #128]	; (8000764 <main+0x2b0>)
 80006e2:	6013      	str	r3, [r2, #0]
  					if (tempDurationLedGreen > 99)
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <main+0x2b0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b63      	cmp	r3, #99	; 0x63
 80006ea:	dd02      	ble.n	80006f2 <main+0x23e>
  						tempDurationLedGreen= 0;
 80006ec:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <main+0x2b0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
					update7SEGBufferTraffic1(tempDurationLedGreen);
 80006f2:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <main+0x2b0>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff fe46 	bl	8000388 <update7SEGBufferTraffic1>
					update7SEGBufferTraffic2(tempDurationLedGreen);
 80006fc:	4b19      	ldr	r3, [pc, #100]	; (8000764 <main+0x2b0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff fe4d 	bl	80003a0 <update7SEGBufferTraffic2>
  					break;
 8000706:	e002      	b.n	800070e <main+0x25a>
  			 }
  		 }
 8000708:	bf00      	nop
 800070a:	e000      	b.n	800070e <main+0x25a>
  					break;
 800070c:	bf00      	nop
  		 if (flagButton[2]== PRESS_STATE)
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <main+0x2a0>)
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14f      	bne.n	80007b6 <main+0x302>
  		 {
  			 flagButton[2]= NORMAL_STATE;
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <main+0x2a0>)
 8000718:	2201      	movs	r2, #1
 800071a:	609a      	str	r2, [r3, #8]
  			 if (tempDurationLedRed != tempDurationLedYellow + tempDurationLedGreen)
 800071c:	4b15      	ldr	r3, [pc, #84]	; (8000774 <main+0x2c0>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	4b10      	ldr	r3, [pc, #64]	; (8000764 <main+0x2b0>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	441a      	add	r2, r3
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <main+0x2b8>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	429a      	cmp	r2, r3
 800072c:	d024      	beq.n	8000778 <main+0x2c4>
  			 {
				update7SEGBufferTraffic1(88);
 800072e:	2058      	movs	r0, #88	; 0x58
 8000730:	f7ff fe2a 	bl	8000388 <update7SEGBufferTraffic1>
				update7SEGBufferTraffic2(88);
 8000734:	2058      	movs	r0, #88	; 0x58
 8000736:	f7ff fe33 	bl	80003a0 <update7SEGBufferTraffic2>
				update7SEGBufferMode(8);
 800073a:	2008      	movs	r0, #8
 800073c:	f7ff fe3c 	bl	80003b8 <update7SEGBufferMode>
  				 onAllSingLEDs();
 8000740:	f7ff fe7c 	bl	800043c <onAllSingLEDs>
  				 modeStatus= INITMODE;
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <main+0x2a4>)
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	e034      	b.n	80007b6 <main+0x302>
 800074c:	200000d0 	.word	0x200000d0
 8000750:	20000140 	.word	0x20000140
 8000754:	20000044 	.word	0x20000044
 8000758:	20000068 	.word	0x20000068
 800075c:	200000c0 	.word	0x200000c0
 8000760:	2000007c 	.word	0x2000007c
 8000764:	20000070 	.word	0x20000070
 8000768:	20000078 	.word	0x20000078
 800076c:	2000006c 	.word	0x2000006c
 8000770:	20000080 	.word	0x20000080
 8000774:	20000074 	.word	0x20000074
  			 }
  			 else
  			 {
				 durationLedGreen= tempDurationLedGreen;
 8000778:	4b2c      	ldr	r3, [pc, #176]	; (800082c <main+0x378>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a2c      	ldr	r2, [pc, #176]	; (8000830 <main+0x37c>)
 800077e:	6013      	str	r3, [r2, #0]
				 durationLedRed= tempDurationLedRed;
 8000780:	4b2c      	ldr	r3, [pc, #176]	; (8000834 <main+0x380>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a2c      	ldr	r2, [pc, #176]	; (8000838 <main+0x384>)
 8000786:	6013      	str	r3, [r2, #0]
				 durationLedYellow= tempDurationLedYellow;
 8000788:	4b2c      	ldr	r3, [pc, #176]	; (800083c <main+0x388>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a2c      	ldr	r2, [pc, #176]	; (8000840 <main+0x38c>)
 800078e:	6013      	str	r3, [r2, #0]
				 statusTraffic1= INIT1;
 8000790:	4b2c      	ldr	r3, [pc, #176]	; (8000844 <main+0x390>)
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
				 statusTraffic2= INIT2;
 8000796:	4b2c      	ldr	r3, [pc, #176]	; (8000848 <main+0x394>)
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
				 if (modeStatus== 1 || modeStatus== 0)
 800079c:	4b2b      	ldr	r3, [pc, #172]	; (800084c <main+0x398>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d003      	beq.n	80007ac <main+0x2f8>
 80007a4:	4b29      	ldr	r3, [pc, #164]	; (800084c <main+0x398>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d104      	bne.n	80007b6 <main+0x302>
				 {
					 normalModeFunction();
 80007ac:	f000 f956 	bl	8000a5c <normalModeFunction>
					 setTimer2(100);
 80007b0:	2064      	movs	r0, #100	; 0x64
 80007b2:	f000 fd91 	bl	80012d8 <setTimer2>
				 }
  			 }
  		 }
  	 }
  	 if (flag2== 1)  // flag normal led
 80007b6:	4b26      	ldr	r3, [pc, #152]	; (8000850 <main+0x39c>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d108      	bne.n	80007d0 <main+0x31c>
  	 {
  		 setTimer2(100);
 80007be:	2064      	movs	r0, #100	; 0x64
 80007c0:	f000 fd8a 	bl	80012d8 <setTimer2>
  		 if (flagAdvancedMode== 0)
 80007c4:	4b23      	ldr	r3, [pc, #140]	; (8000854 <main+0x3a0>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d101      	bne.n	80007d0 <main+0x31c>
  		 {
  			 normalModeFunction();
 80007cc:	f000 f946 	bl	8000a5c <normalModeFunction>
  		 }
  	 }
  	 if (flag3== 1)  // flag for model modify
 80007d0:	4b21      	ldr	r3, [pc, #132]	; (8000858 <main+0x3a4>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d11a      	bne.n	800080e <main+0x35a>
  	 {
  		 setTimer3(50);
 80007d8:	2032      	movs	r0, #50	; 0x32
 80007da:	f000 fd91 	bl	8001300 <setTimer3>
  		 if (flagAdvancedMode== 1)
 80007de:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <main+0x3a0>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d113      	bne.n	800080e <main+0x35a>
  		 {
  			 switch (modeStatus)
 80007e6:	4b19      	ldr	r3, [pc, #100]	; (800084c <main+0x398>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b04      	cmp	r3, #4
 80007ec:	d00c      	beq.n	8000808 <main+0x354>
 80007ee:	2b04      	cmp	r3, #4
 80007f0:	dc0f      	bgt.n	8000812 <main+0x35e>
 80007f2:	2b02      	cmp	r3, #2
 80007f4:	d002      	beq.n	80007fc <main+0x348>
 80007f6:	2b03      	cmp	r3, #3
 80007f8:	d003      	beq.n	8000802 <main+0x34e>
  					break;
  				case MODE4:
  					blinkingGREEN();
  					break;
  				default:
  					break;
 80007fa:	e00a      	b.n	8000812 <main+0x35e>
  					blinkingRED();
 80007fc:	f7ff fdfa 	bl	80003f4 <blinkingRED>
  					break;
 8000800:	e008      	b.n	8000814 <main+0x360>
  					blinkingYELLOW();
 8000802:	f7ff fdeb 	bl	80003dc <blinkingYELLOW>
  					break;
 8000806:	e005      	b.n	8000814 <main+0x360>
  					blinkingGREEN();
 8000808:	f7ff fe00 	bl	800040c <blinkingGREEN>
  					break;
 800080c:	e002      	b.n	8000814 <main+0x360>
  			}
  		 }
 800080e:	bf00      	nop
 8000810:	e000      	b.n	8000814 <main+0x360>
  					break;
 8000812:	bf00      	nop
  	 }
  	 if (flag4== 1)
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <main+0x3a8>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b01      	cmp	r3, #1
 800081a:	f47f ae67 	bne.w	80004ec <main+0x38>
  	 {
  		 DISPLAYALL7SEG();
 800081e:	f7ff fdd7 	bl	80003d0 <DISPLAYALL7SEG>
  		 setTimer4(20);
 8000822:	2014      	movs	r0, #20
 8000824:	f000 fd80 	bl	8001328 <setTimer4>
  	 if (flag1== 1)  // flag for button
 8000828:	e660      	b.n	80004ec <main+0x38>
 800082a:	bf00      	nop
 800082c:	20000070 	.word	0x20000070
 8000830:	2000007c 	.word	0x2000007c
 8000834:	2000006c 	.word	0x2000006c
 8000838:	20000078 	.word	0x20000078
 800083c:	20000074 	.word	0x20000074
 8000840:	20000080 	.word	0x20000080
 8000844:	200000c4 	.word	0x200000c4
 8000848:	200000c8 	.word	0x200000c8
 800084c:	20000068 	.word	0x20000068
 8000850:	20000138 	.word	0x20000138
 8000854:	200000c0 	.word	0x200000c0
 8000858:	20000148 	.word	0x20000148
 800085c:	2000013c 	.word	0x2000013c

08000860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b090      	sub	sp, #64	; 0x40
 8000864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000866:	f107 0318 	add.w	r3, r7, #24
 800086a:	2228      	movs	r2, #40	; 0x28
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f002 f944 	bl	8002afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000882:	2302      	movs	r3, #2
 8000884:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000886:	2301      	movs	r3, #1
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800088a:	2310      	movs	r3, #16
 800088c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800088e:	2300      	movs	r3, #0
 8000890:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000892:	f107 0318 	add.w	r3, r7, #24
 8000896:	4618      	mov	r0, r3
 8000898:	f001 f940 	bl	8001b1c <HAL_RCC_OscConfig>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80008a2:	f000 f8d5 	bl	8000a50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a6:	230f      	movs	r3, #15
 80008a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f001 fbac 	bl	800201c <HAL_RCC_ClockConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80008ca:	f000 f8c1 	bl	8000a50 <Error_Handler>
  }
}
 80008ce:	bf00      	nop
 80008d0:	3740      	adds	r7, #64	; 0x40
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ec:	463b      	mov	r3, r7
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008f4:	4b1d      	ldr	r3, [pc, #116]	; (800096c <MX_TIM2_Init+0x94>)
 80008f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80008fc:	4b1b      	ldr	r3, [pc, #108]	; (800096c <MX_TIM2_Init+0x94>)
 80008fe:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000902:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000904:	4b19      	ldr	r3, [pc, #100]	; (800096c <MX_TIM2_Init+0x94>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800090a:	4b18      	ldr	r3, [pc, #96]	; (800096c <MX_TIM2_Init+0x94>)
 800090c:	2209      	movs	r2, #9
 800090e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000910:	4b16      	ldr	r3, [pc, #88]	; (800096c <MX_TIM2_Init+0x94>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000916:	4b15      	ldr	r3, [pc, #84]	; (800096c <MX_TIM2_Init+0x94>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800091c:	4813      	ldr	r0, [pc, #76]	; (800096c <MX_TIM2_Init+0x94>)
 800091e:	f001 fce5 	bl	80022ec <HAL_TIM_Base_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000928:	f000 f892 	bl	8000a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800092c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000930:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000932:	f107 0308 	add.w	r3, r7, #8
 8000936:	4619      	mov	r1, r3
 8000938:	480c      	ldr	r0, [pc, #48]	; (800096c <MX_TIM2_Init+0x94>)
 800093a:	f001 fe7b 	bl	8002634 <HAL_TIM_ConfigClockSource>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000944:	f000 f884 	bl	8000a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000948:	2300      	movs	r3, #0
 800094a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800094c:	2300      	movs	r3, #0
 800094e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000950:	463b      	mov	r3, r7
 8000952:	4619      	mov	r1, r3
 8000954:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_TIM2_Init+0x94>)
 8000956:	f002 f843 	bl	80029e0 <HAL_TIMEx_MasterConfigSynchronization>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000960:	f000 f876 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	3718      	adds	r7, #24
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	200000d0 	.word	0x200000d0

08000970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	f107 0308 	add.w	r3, r7, #8
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000984:	4b2a      	ldr	r3, [pc, #168]	; (8000a30 <MX_GPIO_Init+0xc0>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	4a29      	ldr	r2, [pc, #164]	; (8000a30 <MX_GPIO_Init+0xc0>)
 800098a:	f043 0304 	orr.w	r3, r3, #4
 800098e:	6193      	str	r3, [r2, #24]
 8000990:	4b27      	ldr	r3, [pc, #156]	; (8000a30 <MX_GPIO_Init+0xc0>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	f003 0304 	and.w	r3, r3, #4
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099c:	4b24      	ldr	r3, [pc, #144]	; (8000a30 <MX_GPIO_Init+0xc0>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a23      	ldr	r2, [pc, #140]	; (8000a30 <MX_GPIO_Init+0xc0>)
 80009a2:	f043 0308 	orr.w	r3, r3, #8
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b21      	ldr	r3, [pc, #132]	; (8000a30 <MX_GPIO_Init+0xc0>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f003 0308 	and.w	r3, r3, #8
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, segA_Pin|segB_Pin|segC_Pin|segD_Pin
 80009b4:	2200      	movs	r2, #0
 80009b6:	217f      	movs	r1, #127	; 0x7f
 80009b8:	481e      	ldr	r0, [pc, #120]	; (8000a34 <MX_GPIO_Init+0xc4>)
 80009ba:	f001 f87e 	bl	8001aba <HAL_GPIO_WritePin>
                          |segE_Pin|segF_Pin|segG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED1_Pin|GREEN1_Pin|YELLOW1_Pin|RED2_Pin
 80009be:	2201      	movs	r2, #1
 80009c0:	213f      	movs	r1, #63	; 0x3f
 80009c2:	481d      	ldr	r0, [pc, #116]	; (8000a38 <MX_GPIO_Init+0xc8>)
 80009c4:	f001 f879 	bl	8001aba <HAL_GPIO_WritePin>
                          |GREEN2_Pin|YELLOW2_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, en4_Pin|en0_Pin|en1_Pin|en2_Pin
 80009c8:	2200      	movs	r2, #0
 80009ca:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 80009ce:	481a      	ldr	r0, [pc, #104]	; (8000a38 <MX_GPIO_Init+0xc8>)
 80009d0:	f001 f873 	bl	8001aba <HAL_GPIO_WritePin>
                          |en3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : segA_Pin segB_Pin segC_Pin segD_Pin
                           segE_Pin segF_Pin segG_Pin */
  GPIO_InitStruct.Pin = segA_Pin|segB_Pin|segC_Pin|segD_Pin
 80009d4:	237f      	movs	r3, #127	; 0x7f
 80009d6:	60bb      	str	r3, [r7, #8]
                          |segE_Pin|segF_Pin|segG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	2301      	movs	r3, #1
 80009da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e0:	2303      	movs	r3, #3
 80009e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e4:	f107 0308 	add.w	r3, r7, #8
 80009e8:	4619      	mov	r1, r3
 80009ea:	4812      	ldr	r0, [pc, #72]	; (8000a34 <MX_GPIO_Init+0xc4>)
 80009ec:	f000 fed4 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED1_Pin GREEN1_Pin YELLOW1_Pin en4_Pin
                           RED2_Pin GREEN2_Pin YELLOW2_Pin en0_Pin
                           en1_Pin en2_Pin en3_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|GREEN1_Pin|YELLOW1_Pin|en4_Pin
 80009f0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80009f4:	60bb      	str	r3, [r7, #8]
                          |RED2_Pin|GREEN2_Pin|YELLOW2_Pin|en0_Pin
                          |en1_Pin|en2_Pin|en3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a02:	f107 0308 	add.w	r3, r7, #8
 8000a06:	4619      	mov	r1, r3
 8000a08:	480b      	ldr	r0, [pc, #44]	; (8000a38 <MX_GPIO_Init+0xc8>)
 8000a0a:	f000 fec5 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1_Pin button2_Pin button3_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin|button3_Pin;
 8000a0e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1c:	f107 0308 	add.w	r3, r7, #8
 8000a20:	4619      	mov	r1, r3
 8000a22:	4804      	ldr	r0, [pc, #16]	; (8000a34 <MX_GPIO_Init+0xc4>)
 8000a24:	f000 feb8 	bl	8001798 <HAL_GPIO_Init>

}
 8000a28:	bf00      	nop
 8000a2a:	3718      	adds	r7, #24
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40021000 	.word	0x40021000
 8000a34:	40010800 	.word	0x40010800
 8000a38:	40010c00 	.word	0x40010c00

08000a3c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	runTimer();
 8000a44:	f000 fbde 	bl	8001204 <runTimer>
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a54:	b672      	cpsid	i
}
 8000a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <Error_Handler+0x8>
	...

08000a5c <normalModeFunction>:
int counterLedGreen2;
int counterLedYellow1;
int counterLedYellow2;

void normalModeFunction()
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
	switch (statusTraffic1)
 8000a60:	4b92      	ldr	r3, [pc, #584]	; (8000cac <normalModeFunction+0x250>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b03      	cmp	r3, #3
 8000a66:	f200 8086 	bhi.w	8000b76 <normalModeFunction+0x11a>
 8000a6a:	a201      	add	r2, pc, #4	; (adr r2, 8000a70 <normalModeFunction+0x14>)
 8000a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a70:	08000a81 	.word	0x08000a81
 8000a74:	08000a9f 	.word	0x08000a9f
 8000a78:	08000ae7 	.word	0x08000ae7
 8000a7c:	08000b2f 	.word	0x08000b2f
	{
		case INIT1:
			counterLedRed1= durationLedRed;
 8000a80:	4b8b      	ldr	r3, [pc, #556]	; (8000cb0 <normalModeFunction+0x254>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a8b      	ldr	r2, [pc, #556]	; (8000cb4 <normalModeFunction+0x258>)
 8000a86:	6013      	str	r3, [r2, #0]
			statusTraffic1= STATUS1_1;
 8000a88:	4b88      	ldr	r3, [pc, #544]	; (8000cac <normalModeFunction+0x250>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	601a      	str	r2, [r3, #0]
			onSingleRedTraffic1();
 8000a8e:	f7ff fce1 	bl	8000454 <onSingleRedTraffic1>
			update7SEGBufferTraffic1(counterLedRed1);
 8000a92:	4b88      	ldr	r3, [pc, #544]	; (8000cb4 <normalModeFunction+0x258>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff fc76 	bl	8000388 <update7SEGBufferTraffic1>
			break;
 8000a9c:	e072      	b.n	8000b84 <normalModeFunction+0x128>
		case STATUS1_1:
			if (counterLedRed1 > 0)
 8000a9e:	4b85      	ldr	r3, [pc, #532]	; (8000cb4 <normalModeFunction+0x258>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	dd69      	ble.n	8000b7a <normalModeFunction+0x11e>
			{
				counterLedRed1--;
 8000aa6:	4b83      	ldr	r3, [pc, #524]	; (8000cb4 <normalModeFunction+0x258>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	4a81      	ldr	r2, [pc, #516]	; (8000cb4 <normalModeFunction+0x258>)
 8000aae:	6013      	str	r3, [r2, #0]
				if (counterLedRed1 <= 0)
 8000ab0:	4b80      	ldr	r3, [pc, #512]	; (8000cb4 <normalModeFunction+0x258>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	dc0e      	bgt.n	8000ad6 <normalModeFunction+0x7a>
				{
					counterLedGreen1= durationLedGreen;
 8000ab8:	4b7f      	ldr	r3, [pc, #508]	; (8000cb8 <normalModeFunction+0x25c>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a7f      	ldr	r2, [pc, #508]	; (8000cbc <normalModeFunction+0x260>)
 8000abe:	6013      	str	r3, [r2, #0]
					statusTraffic1= STATUS1_2;
 8000ac0:	4b7a      	ldr	r3, [pc, #488]	; (8000cac <normalModeFunction+0x250>)
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	601a      	str	r2, [r3, #0]
					onSingleGreenTraffic1();
 8000ac6:	f7ff fcd5 	bl	8000474 <onSingleGreenTraffic1>
					update7SEGBufferTraffic1(counterLedGreen1);
 8000aca:	4b7c      	ldr	r3, [pc, #496]	; (8000cbc <normalModeFunction+0x260>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fc5a 	bl	8000388 <update7SEGBufferTraffic1>
				{
					onSingleRedTraffic1();
					update7SEGBufferTraffic1(counterLedRed1);
				}
			}
			break;
 8000ad4:	e051      	b.n	8000b7a <normalModeFunction+0x11e>
					onSingleRedTraffic1();
 8000ad6:	f7ff fcbd 	bl	8000454 <onSingleRedTraffic1>
					update7SEGBufferTraffic1(counterLedRed1);
 8000ada:	4b76      	ldr	r3, [pc, #472]	; (8000cb4 <normalModeFunction+0x258>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff fc52 	bl	8000388 <update7SEGBufferTraffic1>
			break;
 8000ae4:	e049      	b.n	8000b7a <normalModeFunction+0x11e>
		case STATUS1_2:
			if (counterLedGreen1 > 0)
 8000ae6:	4b75      	ldr	r3, [pc, #468]	; (8000cbc <normalModeFunction+0x260>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	dd47      	ble.n	8000b7e <normalModeFunction+0x122>
			{
				counterLedGreen1--;
 8000aee:	4b73      	ldr	r3, [pc, #460]	; (8000cbc <normalModeFunction+0x260>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	4a71      	ldr	r2, [pc, #452]	; (8000cbc <normalModeFunction+0x260>)
 8000af6:	6013      	str	r3, [r2, #0]
				if (counterLedGreen1 <= 0)
 8000af8:	4b70      	ldr	r3, [pc, #448]	; (8000cbc <normalModeFunction+0x260>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	dc0e      	bgt.n	8000b1e <normalModeFunction+0xc2>
				{
					counterLedYellow1= durationLedYellow;
 8000b00:	4b6f      	ldr	r3, [pc, #444]	; (8000cc0 <normalModeFunction+0x264>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a6f      	ldr	r2, [pc, #444]	; (8000cc4 <normalModeFunction+0x268>)
 8000b06:	6013      	str	r3, [r2, #0]
					statusTraffic1= STATUS1_3;
 8000b08:	4b68      	ldr	r3, [pc, #416]	; (8000cac <normalModeFunction+0x250>)
 8000b0a:	2203      	movs	r2, #3
 8000b0c:	601a      	str	r2, [r3, #0]
					onSingleYellowTraffic1();
 8000b0e:	f7ff fca9 	bl	8000464 <onSingleYellowTraffic1>
					update7SEGBufferTraffic1(counterLedYellow1);
 8000b12:	4b6c      	ldr	r3, [pc, #432]	; (8000cc4 <normalModeFunction+0x268>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff fc36 	bl	8000388 <update7SEGBufferTraffic1>
				{
					onSingleGreenTraffic1();
					update7SEGBufferTraffic1(counterLedGreen1);
				}
			}
			break;
 8000b1c:	e02f      	b.n	8000b7e <normalModeFunction+0x122>
					onSingleGreenTraffic1();
 8000b1e:	f7ff fca9 	bl	8000474 <onSingleGreenTraffic1>
					update7SEGBufferTraffic1(counterLedGreen1);
 8000b22:	4b66      	ldr	r3, [pc, #408]	; (8000cbc <normalModeFunction+0x260>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fc2e 	bl	8000388 <update7SEGBufferTraffic1>
			break;
 8000b2c:	e027      	b.n	8000b7e <normalModeFunction+0x122>
		case STATUS1_3:
			if (counterLedYellow1 > 0)
 8000b2e:	4b65      	ldr	r3, [pc, #404]	; (8000cc4 <normalModeFunction+0x268>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	dd25      	ble.n	8000b82 <normalModeFunction+0x126>
			{
				counterLedYellow1--;
 8000b36:	4b63      	ldr	r3, [pc, #396]	; (8000cc4 <normalModeFunction+0x268>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	4a61      	ldr	r2, [pc, #388]	; (8000cc4 <normalModeFunction+0x268>)
 8000b3e:	6013      	str	r3, [r2, #0]
				if (counterLedYellow1 <= 0)
 8000b40:	4b60      	ldr	r3, [pc, #384]	; (8000cc4 <normalModeFunction+0x268>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	dc0e      	bgt.n	8000b66 <normalModeFunction+0x10a>
				{
					counterLedRed1= durationLedRed;
 8000b48:	4b59      	ldr	r3, [pc, #356]	; (8000cb0 <normalModeFunction+0x254>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a59      	ldr	r2, [pc, #356]	; (8000cb4 <normalModeFunction+0x258>)
 8000b4e:	6013      	str	r3, [r2, #0]
					statusTraffic1= STATUS1_1;
 8000b50:	4b56      	ldr	r3, [pc, #344]	; (8000cac <normalModeFunction+0x250>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	601a      	str	r2, [r3, #0]
					onSingleRedTraffic1();
 8000b56:	f7ff fc7d 	bl	8000454 <onSingleRedTraffic1>
					update7SEGBufferTraffic1(counterLedRed1);
 8000b5a:	4b56      	ldr	r3, [pc, #344]	; (8000cb4 <normalModeFunction+0x258>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fc12 	bl	8000388 <update7SEGBufferTraffic1>
				{
					onSingleYellowTraffic1();
					update7SEGBufferTraffic1(counterLedYellow1);
				}
			}
			break;
 8000b64:	e00d      	b.n	8000b82 <normalModeFunction+0x126>
					onSingleYellowTraffic1();
 8000b66:	f7ff fc7d 	bl	8000464 <onSingleYellowTraffic1>
					update7SEGBufferTraffic1(counterLedYellow1);
 8000b6a:	4b56      	ldr	r3, [pc, #344]	; (8000cc4 <normalModeFunction+0x268>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fc0a 	bl	8000388 <update7SEGBufferTraffic1>
			break;
 8000b74:	e005      	b.n	8000b82 <normalModeFunction+0x126>
		default:
			break;
 8000b76:	bf00      	nop
 8000b78:	e004      	b.n	8000b84 <normalModeFunction+0x128>
			break;
 8000b7a:	bf00      	nop
 8000b7c:	e002      	b.n	8000b84 <normalModeFunction+0x128>
			break;
 8000b7e:	bf00      	nop
 8000b80:	e000      	b.n	8000b84 <normalModeFunction+0x128>
			break;
 8000b82:	bf00      	nop
	}
	switch (statusTraffic2)
 8000b84:	4b50      	ldr	r3, [pc, #320]	; (8000cc8 <normalModeFunction+0x26c>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b03      	cmp	r3, #3
 8000b8a:	f200 8086 	bhi.w	8000c9a <normalModeFunction+0x23e>
 8000b8e:	a201      	add	r2, pc, #4	; (adr r2, 8000b94 <normalModeFunction+0x138>)
 8000b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b94:	08000ba5 	.word	0x08000ba5
 8000b98:	08000bc3 	.word	0x08000bc3
 8000b9c:	08000c0b 	.word	0x08000c0b
 8000ba0:	08000c53 	.word	0x08000c53
	{
		case INIT2:
			statusTraffic2= STATUS2_1;
 8000ba4:	4b48      	ldr	r3, [pc, #288]	; (8000cc8 <normalModeFunction+0x26c>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	601a      	str	r2, [r3, #0]
			counterLedGreen2= durationLedGreen;
 8000baa:	4b43      	ldr	r3, [pc, #268]	; (8000cb8 <normalModeFunction+0x25c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a47      	ldr	r2, [pc, #284]	; (8000ccc <normalModeFunction+0x270>)
 8000bb0:	6013      	str	r3, [r2, #0]
			onSingleGreenTraffic2();
 8000bb2:	f7ff fc77 	bl	80004a4 <onSingleGreenTraffic2>
			update7SEGBufferTraffic2(counterLedGreen2);
 8000bb6:	4b45      	ldr	r3, [pc, #276]	; (8000ccc <normalModeFunction+0x270>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fbf0 	bl	80003a0 <update7SEGBufferTraffic2>
			break;
 8000bc0:	e072      	b.n	8000ca8 <normalModeFunction+0x24c>
		case STATUS2_1:
			if (counterLedGreen2 > 0)
 8000bc2:	4b42      	ldr	r3, [pc, #264]	; (8000ccc <normalModeFunction+0x270>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	dd69      	ble.n	8000c9e <normalModeFunction+0x242>
			{
				counterLedGreen2--;
 8000bca:	4b40      	ldr	r3, [pc, #256]	; (8000ccc <normalModeFunction+0x270>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	4a3e      	ldr	r2, [pc, #248]	; (8000ccc <normalModeFunction+0x270>)
 8000bd2:	6013      	str	r3, [r2, #0]
				if (counterLedGreen2 <= 0)
 8000bd4:	4b3d      	ldr	r3, [pc, #244]	; (8000ccc <normalModeFunction+0x270>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	dc0e      	bgt.n	8000bfa <normalModeFunction+0x19e>
				{
					onSingleYellowTraffic2();
 8000bdc:	f7ff fc5a 	bl	8000494 <onSingleYellowTraffic2>
					counterLedYellow2= durationLedYellow;
 8000be0:	4b37      	ldr	r3, [pc, #220]	; (8000cc0 <normalModeFunction+0x264>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a3a      	ldr	r2, [pc, #232]	; (8000cd0 <normalModeFunction+0x274>)
 8000be6:	6013      	str	r3, [r2, #0]
					statusTraffic2= STATUS2_2;
 8000be8:	4b37      	ldr	r3, [pc, #220]	; (8000cc8 <normalModeFunction+0x26c>)
 8000bea:	2202      	movs	r2, #2
 8000bec:	601a      	str	r2, [r3, #0]
					update7SEGBufferTraffic2(counterLedYellow2);
 8000bee:	4b38      	ldr	r3, [pc, #224]	; (8000cd0 <normalModeFunction+0x274>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fbd4 	bl	80003a0 <update7SEGBufferTraffic2>
				{
					onSingleGreenTraffic2();
					update7SEGBufferTraffic2(counterLedGreen2);
				}
			}
			break;
 8000bf8:	e051      	b.n	8000c9e <normalModeFunction+0x242>
					onSingleGreenTraffic2();
 8000bfa:	f7ff fc53 	bl	80004a4 <onSingleGreenTraffic2>
					update7SEGBufferTraffic2(counterLedGreen2);
 8000bfe:	4b33      	ldr	r3, [pc, #204]	; (8000ccc <normalModeFunction+0x270>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fbcc 	bl	80003a0 <update7SEGBufferTraffic2>
			break;
 8000c08:	e049      	b.n	8000c9e <normalModeFunction+0x242>
		case STATUS2_2:
			if (counterLedYellow2 > 0)
 8000c0a:	4b31      	ldr	r3, [pc, #196]	; (8000cd0 <normalModeFunction+0x274>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	dd47      	ble.n	8000ca2 <normalModeFunction+0x246>
			{
				counterLedYellow2--;
 8000c12:	4b2f      	ldr	r3, [pc, #188]	; (8000cd0 <normalModeFunction+0x274>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	4a2d      	ldr	r2, [pc, #180]	; (8000cd0 <normalModeFunction+0x274>)
 8000c1a:	6013      	str	r3, [r2, #0]
				if (counterLedYellow2 <= 0)
 8000c1c:	4b2c      	ldr	r3, [pc, #176]	; (8000cd0 <normalModeFunction+0x274>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	dc0e      	bgt.n	8000c42 <normalModeFunction+0x1e6>
				{
					counterLedRed2= durationLedRed;
 8000c24:	4b22      	ldr	r3, [pc, #136]	; (8000cb0 <normalModeFunction+0x254>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a2a      	ldr	r2, [pc, #168]	; (8000cd4 <normalModeFunction+0x278>)
 8000c2a:	6013      	str	r3, [r2, #0]
					statusTraffic2= STATUS2_3;
 8000c2c:	4b26      	ldr	r3, [pc, #152]	; (8000cc8 <normalModeFunction+0x26c>)
 8000c2e:	2203      	movs	r2, #3
 8000c30:	601a      	str	r2, [r3, #0]
					onSingleRedTraffic2();
 8000c32:	f7ff fc27 	bl	8000484 <onSingleRedTraffic2>
					update7SEGBufferTraffic2(counterLedRed2);
 8000c36:	4b27      	ldr	r3, [pc, #156]	; (8000cd4 <normalModeFunction+0x278>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fbb0 	bl	80003a0 <update7SEGBufferTraffic2>
				{
					onSingleYellowTraffic2();
					update7SEGBufferTraffic2(counterLedYellow2);
				}
			}
			break;
 8000c40:	e02f      	b.n	8000ca2 <normalModeFunction+0x246>
					onSingleYellowTraffic2();
 8000c42:	f7ff fc27 	bl	8000494 <onSingleYellowTraffic2>
					update7SEGBufferTraffic2(counterLedYellow2);
 8000c46:	4b22      	ldr	r3, [pc, #136]	; (8000cd0 <normalModeFunction+0x274>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fba8 	bl	80003a0 <update7SEGBufferTraffic2>
			break;
 8000c50:	e027      	b.n	8000ca2 <normalModeFunction+0x246>
		case STATUS2_3:
			if (counterLedRed2 > 0)
 8000c52:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <normalModeFunction+0x278>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	dd25      	ble.n	8000ca6 <normalModeFunction+0x24a>
			{
				counterLedRed2--;
 8000c5a:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <normalModeFunction+0x278>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	4a1c      	ldr	r2, [pc, #112]	; (8000cd4 <normalModeFunction+0x278>)
 8000c62:	6013      	str	r3, [r2, #0]
				if (counterLedRed2 <= 0)
 8000c64:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <normalModeFunction+0x278>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	dc0e      	bgt.n	8000c8a <normalModeFunction+0x22e>
				{
					counterLedGreen2= durationLedGreen;
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <normalModeFunction+0x25c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a16      	ldr	r2, [pc, #88]	; (8000ccc <normalModeFunction+0x270>)
 8000c72:	6013      	str	r3, [r2, #0]
					statusTraffic2= STATUS2_1;
 8000c74:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <normalModeFunction+0x26c>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	601a      	str	r2, [r3, #0]
					onSingleGreenTraffic2();
 8000c7a:	f7ff fc13 	bl	80004a4 <onSingleGreenTraffic2>
					update7SEGBufferTraffic2(counterLedGreen2);
 8000c7e:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <normalModeFunction+0x270>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fb8c 	bl	80003a0 <update7SEGBufferTraffic2>
				{
					onSingleRedTraffic2();
					update7SEGBufferTraffic2(counterLedRed2);
				}
			}
			break;
 8000c88:	e00d      	b.n	8000ca6 <normalModeFunction+0x24a>
					onSingleRedTraffic2();
 8000c8a:	f7ff fbfb 	bl	8000484 <onSingleRedTraffic2>
					update7SEGBufferTraffic2(counterLedRed2);
 8000c8e:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <normalModeFunction+0x278>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fb84 	bl	80003a0 <update7SEGBufferTraffic2>
			break;
 8000c98:	e005      	b.n	8000ca6 <normalModeFunction+0x24a>
		default:
			break;
 8000c9a:	bf00      	nop
 8000c9c:	e004      	b.n	8000ca8 <normalModeFunction+0x24c>
			break;
 8000c9e:	bf00      	nop
 8000ca0:	e002      	b.n	8000ca8 <normalModeFunction+0x24c>
			break;
 8000ca2:	bf00      	nop
 8000ca4:	e000      	b.n	8000ca8 <normalModeFunction+0x24c>
			break;
 8000ca6:	bf00      	nop
	}
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	200000c4 	.word	0x200000c4
 8000cb0:	20000078 	.word	0x20000078
 8000cb4:	2000012c 	.word	0x2000012c
 8000cb8:	2000007c 	.word	0x2000007c
 8000cbc:	2000011c 	.word	0x2000011c
 8000cc0:	20000080 	.word	0x20000080
 8000cc4:	20000120 	.word	0x20000120
 8000cc8:	200000c8 	.word	0x200000c8
 8000ccc:	20000128 	.word	0x20000128
 8000cd0:	20000124 	.word	0x20000124
 8000cd4:	20000118 	.word	0x20000118

08000cd8 <show7SEG>:
int status7SEG= INIT;
int led_buffer[5]= {1, 2, 3, 4, 1};

void show7SEG(GPIO_PinState A, GPIO_PinState B, GPIO_PinState C, GPIO_PinState D, GPIO_PinState E,
				GPIO_PinState F, GPIO_PinState G)
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4608      	mov	r0, r1
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4623      	mov	r3, r4
 8000ce8:	71fb      	strb	r3, [r7, #7]
 8000cea:	4603      	mov	r3, r0
 8000cec:	71bb      	strb	r3, [r7, #6]
 8000cee:	460b      	mov	r3, r1
 8000cf0:	717b      	strb	r3, [r7, #5]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	713b      	strb	r3, [r7, #4]
	HAL_GPIO_WritePin(segA_GPIO_Port, segA_Pin, A);
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	4815      	ldr	r0, [pc, #84]	; (8000d54 <show7SEG+0x7c>)
 8000cfe:	f000 fedc 	bl	8001aba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segB_GPIO_Port, segB_Pin, B);
 8000d02:	79bb      	ldrb	r3, [r7, #6]
 8000d04:	461a      	mov	r2, r3
 8000d06:	2102      	movs	r1, #2
 8000d08:	4812      	ldr	r0, [pc, #72]	; (8000d54 <show7SEG+0x7c>)
 8000d0a:	f000 fed6 	bl	8001aba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segC_GPIO_Port, segC_Pin, C);
 8000d0e:	797b      	ldrb	r3, [r7, #5]
 8000d10:	461a      	mov	r2, r3
 8000d12:	2104      	movs	r1, #4
 8000d14:	480f      	ldr	r0, [pc, #60]	; (8000d54 <show7SEG+0x7c>)
 8000d16:	f000 fed0 	bl	8001aba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segD_GPIO_Port, segD_Pin, D);
 8000d1a:	793b      	ldrb	r3, [r7, #4]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	2108      	movs	r1, #8
 8000d20:	480c      	ldr	r0, [pc, #48]	; (8000d54 <show7SEG+0x7c>)
 8000d22:	f000 feca 	bl	8001aba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segE_GPIO_Port, segE_Pin, E);
 8000d26:	7e3b      	ldrb	r3, [r7, #24]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	2110      	movs	r1, #16
 8000d2c:	4809      	ldr	r0, [pc, #36]	; (8000d54 <show7SEG+0x7c>)
 8000d2e:	f000 fec4 	bl	8001aba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segF_GPIO_Port, segF_Pin, F);
 8000d32:	7f3b      	ldrb	r3, [r7, #28]
 8000d34:	461a      	mov	r2, r3
 8000d36:	2120      	movs	r1, #32
 8000d38:	4806      	ldr	r0, [pc, #24]	; (8000d54 <show7SEG+0x7c>)
 8000d3a:	f000 febe 	bl	8001aba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segG_GPIO_Port, segG_Pin, G);
 8000d3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d42:	461a      	mov	r2, r3
 8000d44:	2140      	movs	r1, #64	; 0x40
 8000d46:	4803      	ldr	r0, [pc, #12]	; (8000d54 <show7SEG+0x7c>)
 8000d48:	f000 feb7 	bl	8001aba <HAL_GPIO_WritePin>
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd90      	pop	{r4, r7, pc}
 8000d54:	40010800 	.word	0x40010800

08000d58 <display>:

void display(int num)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af04      	add	r7, sp, #16
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b09      	cmp	r3, #9
 8000d64:	f200 809a 	bhi.w	8000e9c <display+0x144>
 8000d68:	a201      	add	r2, pc, #4	; (adr r2, 8000d70 <display+0x18>)
 8000d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d6e:	bf00      	nop
 8000d70:	08000d99 	.word	0x08000d99
 8000d74:	08000db3 	.word	0x08000db3
 8000d78:	08000dcd 	.word	0x08000dcd
 8000d7c:	08000de7 	.word	0x08000de7
 8000d80:	08000e01 	.word	0x08000e01
 8000d84:	08000e1b 	.word	0x08000e1b
 8000d88:	08000e35 	.word	0x08000e35
 8000d8c:	08000e4f 	.word	0x08000e4f
 8000d90:	08000e69 	.word	0x08000e69
 8000d94:	08000e83 	.word	0x08000e83
	switch (num)
	{
		case 0:
			show7SEG(0, 0, 0, 0, 0, 0, 1);
 8000d98:	2301      	movs	r3, #1
 8000d9a:	9302      	str	r3, [sp, #8]
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	9301      	str	r3, [sp, #4]
 8000da0:	2300      	movs	r3, #0
 8000da2:	9300      	str	r3, [sp, #0]
 8000da4:	2300      	movs	r3, #0
 8000da6:	2200      	movs	r2, #0
 8000da8:	2100      	movs	r1, #0
 8000daa:	2000      	movs	r0, #0
 8000dac:	f7ff ff94 	bl	8000cd8 <show7SEG>
			break;
 8000db0:	e081      	b.n	8000eb6 <display+0x15e>
		case 1:
			show7SEG(1, 0, 0, 1,  1, 1, 1);
 8000db2:	2301      	movs	r3, #1
 8000db4:	9302      	str	r3, [sp, #8]
 8000db6:	2301      	movs	r3, #1
 8000db8:	9301      	str	r3, [sp, #4]
 8000dba:	2301      	movs	r3, #1
 8000dbc:	9300      	str	r3, [sp, #0]
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f7ff ff87 	bl	8000cd8 <show7SEG>
			break;
 8000dca:	e074      	b.n	8000eb6 <display+0x15e>
		case 2:
			show7SEG(0, 0, 1, 0, 0, 1, 0);
 8000dcc:	2300      	movs	r3, #0
 8000dce:	9302      	str	r3, [sp, #8]
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	9301      	str	r3, [sp, #4]
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	9300      	str	r3, [sp, #0]
 8000dd8:	2300      	movs	r3, #0
 8000dda:	2201      	movs	r2, #1
 8000ddc:	2100      	movs	r1, #0
 8000dde:	2000      	movs	r0, #0
 8000de0:	f7ff ff7a 	bl	8000cd8 <show7SEG>
			break;
 8000de4:	e067      	b.n	8000eb6 <display+0x15e>

		case 3:
			show7SEG(0, 0, 0, 0, 1, 1, 0);
 8000de6:	2300      	movs	r3, #0
 8000de8:	9302      	str	r3, [sp, #8]
 8000dea:	2301      	movs	r3, #1
 8000dec:	9301      	str	r3, [sp, #4]
 8000dee:	2301      	movs	r3, #1
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	2300      	movs	r3, #0
 8000df4:	2200      	movs	r2, #0
 8000df6:	2100      	movs	r1, #0
 8000df8:	2000      	movs	r0, #0
 8000dfa:	f7ff ff6d 	bl	8000cd8 <show7SEG>
			break;
 8000dfe:	e05a      	b.n	8000eb6 <display+0x15e>
		case 4:
			show7SEG(1, 0, 0, 1, 1, 0, 0);
 8000e00:	2300      	movs	r3, #0
 8000e02:	9302      	str	r3, [sp, #8]
 8000e04:	2300      	movs	r3, #0
 8000e06:	9301      	str	r3, [sp, #4]
 8000e08:	2301      	movs	r3, #1
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2100      	movs	r1, #0
 8000e12:	2001      	movs	r0, #1
 8000e14:	f7ff ff60 	bl	8000cd8 <show7SEG>
			break;
 8000e18:	e04d      	b.n	8000eb6 <display+0x15e>
		case 5:
			show7SEG(0, 1, 0, 0, 1, 0, 0);
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	9302      	str	r3, [sp, #8]
 8000e1e:	2300      	movs	r3, #0
 8000e20:	9301      	str	r3, [sp, #4]
 8000e22:	2301      	movs	r3, #1
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	2300      	movs	r3, #0
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f7ff ff53 	bl	8000cd8 <show7SEG>
			break;
 8000e32:	e040      	b.n	8000eb6 <display+0x15e>
		case 6:
			show7SEG(0, 1, 0, 0, 0, 0, 0);
 8000e34:	2300      	movs	r3, #0
 8000e36:	9302      	str	r3, [sp, #8]
 8000e38:	2300      	movs	r3, #0
 8000e3a:	9301      	str	r3, [sp, #4]
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	2300      	movs	r3, #0
 8000e42:	2200      	movs	r2, #0
 8000e44:	2101      	movs	r1, #1
 8000e46:	2000      	movs	r0, #0
 8000e48:	f7ff ff46 	bl	8000cd8 <show7SEG>
			break;
 8000e4c:	e033      	b.n	8000eb6 <display+0x15e>
		case 7:
			show7SEG(0, 0, 0, 1, 1, 1, 1);
 8000e4e:	2301      	movs	r3, #1
 8000e50:	9302      	str	r3, [sp, #8]
 8000e52:	2301      	movs	r3, #1
 8000e54:	9301      	str	r3, [sp, #4]
 8000e56:	2301      	movs	r3, #1
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2100      	movs	r1, #0
 8000e60:	2000      	movs	r0, #0
 8000e62:	f7ff ff39 	bl	8000cd8 <show7SEG>
			break;
 8000e66:	e026      	b.n	8000eb6 <display+0x15e>
		case 8:
			show7SEG(0, 0, 0, 0, 0, 0, 0);
 8000e68:	2300      	movs	r3, #0
 8000e6a:	9302      	str	r3, [sp, #8]
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	9301      	str	r3, [sp, #4]
 8000e70:	2300      	movs	r3, #0
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	2300      	movs	r3, #0
 8000e76:	2200      	movs	r2, #0
 8000e78:	2100      	movs	r1, #0
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f7ff ff2c 	bl	8000cd8 <show7SEG>
			break;
 8000e80:	e019      	b.n	8000eb6 <display+0x15e>
		case 9:
			show7SEG(0, 0, 0, 0, 1, 0, 0);
 8000e82:	2300      	movs	r3, #0
 8000e84:	9302      	str	r3, [sp, #8]
 8000e86:	2300      	movs	r3, #0
 8000e88:	9301      	str	r3, [sp, #4]
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	2300      	movs	r3, #0
 8000e90:	2200      	movs	r2, #0
 8000e92:	2100      	movs	r1, #0
 8000e94:	2000      	movs	r0, #0
 8000e96:	f7ff ff1f 	bl	8000cd8 <show7SEG>
			break;
 8000e9a:	e00c      	b.n	8000eb6 <display+0x15e>
		default:
			show7SEG(0, 0, 0, 0, 1, 0, 0);
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	9302      	str	r3, [sp, #8]
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	9301      	str	r3, [sp, #4]
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2100      	movs	r1, #0
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f7ff ff12 	bl	8000cd8 <show7SEG>
			break;
 8000eb4:	bf00      	nop
	}
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop

08000ec0 <Scan7SEG>:


void Scan7SEG()
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
	switch (status7SEG)
 8000ec4:	4b4b      	ldr	r3, [pc, #300]	; (8000ff4 <Scan7SEG+0x134>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b05      	cmp	r3, #5
 8000eca:	f200 808f 	bhi.w	8000fec <Scan7SEG+0x12c>
 8000ece:	a201      	add	r2, pc, #4	; (adr r2, 8000ed4 <Scan7SEG+0x14>)
 8000ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed4:	08000eed 	.word	0x08000eed
 8000ed8:	08000f37 	.word	0x08000f37
 8000edc:	08000f59 	.word	0x08000f59
 8000ee0:	08000f7d 	.word	0x08000f7d
 8000ee4:	08000fa3 	.word	0x08000fa3
 8000ee8:	08000fc9 	.word	0x08000fc9
	{
		case INIT:
			HAL_GPIO_WritePin(en0_GPIO_Port, en0_Pin, 0);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2140      	movs	r1, #64	; 0x40
 8000ef0:	4841      	ldr	r0, [pc, #260]	; (8000ff8 <Scan7SEG+0x138>)
 8000ef2:	f000 fde2 	bl	8001aba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, 1);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2180      	movs	r1, #128	; 0x80
 8000efa:	483f      	ldr	r0, [pc, #252]	; (8000ff8 <Scan7SEG+0x138>)
 8000efc:	f000 fddd 	bl	8001aba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, 1);
 8000f00:	2201      	movs	r2, #1
 8000f02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f06:	483c      	ldr	r0, [pc, #240]	; (8000ff8 <Scan7SEG+0x138>)
 8000f08:	f000 fdd7 	bl	8001aba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, 1);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f12:	4839      	ldr	r0, [pc, #228]	; (8000ff8 <Scan7SEG+0x138>)
 8000f14:	f000 fdd1 	bl	8001aba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(en4_GPIO_Port, en4_Pin, 1);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f1e:	4836      	ldr	r0, [pc, #216]	; (8000ff8 <Scan7SEG+0x138>)
 8000f20:	f000 fdcb 	bl	8001aba <HAL_GPIO_WritePin>
			display(led_buffer[0]);
 8000f24:	4b35      	ldr	r3, [pc, #212]	; (8000ffc <Scan7SEG+0x13c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff15 	bl	8000d58 <display>
			status7SEG= SEG7_1ON;
 8000f2e:	4b31      	ldr	r3, [pc, #196]	; (8000ff4 <Scan7SEG+0x134>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	601a      	str	r2, [r3, #0]
			break;
 8000f34:	e05b      	b.n	8000fee <Scan7SEG+0x12e>
		case SEG7_1ON:
			HAL_GPIO_TogglePin(en0_GPIO_Port, en0_Pin);
 8000f36:	2140      	movs	r1, #64	; 0x40
 8000f38:	482f      	ldr	r0, [pc, #188]	; (8000ff8 <Scan7SEG+0x138>)
 8000f3a:	f000 fdd6 	bl	8001aea <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(en1_GPIO_Port, en1_Pin);
 8000f3e:	2180      	movs	r1, #128	; 0x80
 8000f40:	482d      	ldr	r0, [pc, #180]	; (8000ff8 <Scan7SEG+0x138>)
 8000f42:	f000 fdd2 	bl	8001aea <HAL_GPIO_TogglePin>
			display(led_buffer[1]);
 8000f46:	4b2d      	ldr	r3, [pc, #180]	; (8000ffc <Scan7SEG+0x13c>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ff04 	bl	8000d58 <display>
			status7SEG= SEG7_2ON;
 8000f50:	4b28      	ldr	r3, [pc, #160]	; (8000ff4 <Scan7SEG+0x134>)
 8000f52:	2202      	movs	r2, #2
 8000f54:	601a      	str	r2, [r3, #0]
			break;
 8000f56:	e04a      	b.n	8000fee <Scan7SEG+0x12e>
		case SEG7_2ON:
			HAL_GPIO_TogglePin(en1_GPIO_Port, en1_Pin);
 8000f58:	2180      	movs	r1, #128	; 0x80
 8000f5a:	4827      	ldr	r0, [pc, #156]	; (8000ff8 <Scan7SEG+0x138>)
 8000f5c:	f000 fdc5 	bl	8001aea <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(en2_GPIO_Port, en2_Pin);
 8000f60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f64:	4824      	ldr	r0, [pc, #144]	; (8000ff8 <Scan7SEG+0x138>)
 8000f66:	f000 fdc0 	bl	8001aea <HAL_GPIO_TogglePin>
			display(led_buffer[2]);
 8000f6a:	4b24      	ldr	r3, [pc, #144]	; (8000ffc <Scan7SEG+0x13c>)
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fef2 	bl	8000d58 <display>
			status7SEG= SEG7_3ON;
 8000f74:	4b1f      	ldr	r3, [pc, #124]	; (8000ff4 <Scan7SEG+0x134>)
 8000f76:	2203      	movs	r2, #3
 8000f78:	601a      	str	r2, [r3, #0]
			break;
 8000f7a:	e038      	b.n	8000fee <Scan7SEG+0x12e>
		case SEG7_3ON:
			HAL_GPIO_TogglePin(en2_GPIO_Port, en2_Pin);
 8000f7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f80:	481d      	ldr	r0, [pc, #116]	; (8000ff8 <Scan7SEG+0x138>)
 8000f82:	f000 fdb2 	bl	8001aea <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(en3_GPIO_Port, en3_Pin);
 8000f86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f8a:	481b      	ldr	r0, [pc, #108]	; (8000ff8 <Scan7SEG+0x138>)
 8000f8c:	f000 fdad 	bl	8001aea <HAL_GPIO_TogglePin>
			status7SEG= SEG7_4ON;
 8000f90:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <Scan7SEG+0x134>)
 8000f92:	2204      	movs	r2, #4
 8000f94:	601a      	str	r2, [r3, #0]
			display(led_buffer[3]);
 8000f96:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <Scan7SEG+0x13c>)
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fedc 	bl	8000d58 <display>
			break;
 8000fa0:	e025      	b.n	8000fee <Scan7SEG+0x12e>
		case SEG7_4ON:
			HAL_GPIO_TogglePin(en3_GPIO_Port, en3_Pin);
 8000fa2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fa6:	4814      	ldr	r0, [pc, #80]	; (8000ff8 <Scan7SEG+0x138>)
 8000fa8:	f000 fd9f 	bl	8001aea <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(en4_GPIO_Port, en4_Pin);
 8000fac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fb0:	4811      	ldr	r0, [pc, #68]	; (8000ff8 <Scan7SEG+0x138>)
 8000fb2:	f000 fd9a 	bl	8001aea <HAL_GPIO_TogglePin>
			status7SEG= SEG7_5ON;
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <Scan7SEG+0x134>)
 8000fb8:	2205      	movs	r2, #5
 8000fba:	601a      	str	r2, [r3, #0]
			display(led_buffer[4]);
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <Scan7SEG+0x13c>)
 8000fbe:	691b      	ldr	r3, [r3, #16]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fec9 	bl	8000d58 <display>
			break;
 8000fc6:	e012      	b.n	8000fee <Scan7SEG+0x12e>
		case SEG7_5ON:
			HAL_GPIO_TogglePin(en4_GPIO_Port, en4_Pin);
 8000fc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fcc:	480a      	ldr	r0, [pc, #40]	; (8000ff8 <Scan7SEG+0x138>)
 8000fce:	f000 fd8c 	bl	8001aea <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(en0_GPIO_Port, en0_Pin);
 8000fd2:	2140      	movs	r1, #64	; 0x40
 8000fd4:	4808      	ldr	r0, [pc, #32]	; (8000ff8 <Scan7SEG+0x138>)
 8000fd6:	f000 fd88 	bl	8001aea <HAL_GPIO_TogglePin>
			status7SEG= SEG7_1ON;
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <Scan7SEG+0x134>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	601a      	str	r2, [r3, #0]
			display(led_buffer[0]);
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <Scan7SEG+0x13c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff feb7 	bl	8000d58 <display>
			break;
 8000fea:	e000      	b.n	8000fee <Scan7SEG+0x12e>
		default:
			break;
 8000fec:	bf00      	nop
	}

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200000cc 	.word	0x200000cc
 8000ff8:	40010c00 	.word	0x40010c00
 8000ffc:	20000084 	.word	0x20000084

08001000 <controlSingleLed>:

#include <main.h>
#include "physical7SingleLed.h"

void controlSingleLed(int orderTraffic, int statusLed)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
	switch (orderTraffic)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b08      	cmp	r3, #8
 800100e:	d003      	beq.n	8001018 <controlSingleLed+0x18>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b09      	cmp	r3, #9
 8001014:	d077      	beq.n	8001106 <controlSingleLed+0x106>
				default:
					break;
			}
			break;
		default:
			break;
 8001016:	e0ee      	b.n	80011f6 <controlSingleLed+0x1f6>
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	2b07      	cmp	r3, #7
 800101c:	d871      	bhi.n	8001102 <controlSingleLed+0x102>
 800101e:	a201      	add	r2, pc, #4	; (adr r2, 8001024 <controlSingleLed+0x24>)
 8001020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001024:	08001045 	.word	0x08001045
 8001028:	08001065 	.word	0x08001065
 800102c:	08001085 	.word	0x08001085
 8001030:	080010a5 	.word	0x080010a5
 8001034:	080010b9 	.word	0x080010b9
 8001038:	080010af 	.word	0x080010af
 800103c:	080010c3 	.word	0x080010c3
 8001040:	080010e3 	.word	0x080010e3
					HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8001044:	2201      	movs	r2, #1
 8001046:	2101      	movs	r1, #1
 8001048:	486d      	ldr	r0, [pc, #436]	; (8001200 <controlSingleLed+0x200>)
 800104a:	f000 fd36 	bl	8001aba <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	2104      	movs	r1, #4
 8001052:	486b      	ldr	r0, [pc, #428]	; (8001200 <controlSingleLed+0x200>)
 8001054:	f000 fd31 	bl	8001aba <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	2102      	movs	r1, #2
 800105c:	4868      	ldr	r0, [pc, #416]	; (8001200 <controlSingleLed+0x200>)
 800105e:	f000 fd2c 	bl	8001aba <HAL_GPIO_WritePin>
					break;
 8001062:	e04f      	b.n	8001104 <controlSingleLed+0x104>
					HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	2101      	movs	r1, #1
 8001068:	4865      	ldr	r0, [pc, #404]	; (8001200 <controlSingleLed+0x200>)
 800106a:	f000 fd26 	bl	8001aba <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	2104      	movs	r1, #4
 8001072:	4863      	ldr	r0, [pc, #396]	; (8001200 <controlSingleLed+0x200>)
 8001074:	f000 fd21 	bl	8001aba <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8001078:	2201      	movs	r2, #1
 800107a:	2102      	movs	r1, #2
 800107c:	4860      	ldr	r0, [pc, #384]	; (8001200 <controlSingleLed+0x200>)
 800107e:	f000 fd1c 	bl	8001aba <HAL_GPIO_WritePin>
					break;
 8001082:	e03f      	b.n	8001104 <controlSingleLed+0x104>
					HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	2101      	movs	r1, #1
 8001088:	485d      	ldr	r0, [pc, #372]	; (8001200 <controlSingleLed+0x200>)
 800108a:	f000 fd16 	bl	8001aba <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 800108e:	2201      	movs	r2, #1
 8001090:	2104      	movs	r1, #4
 8001092:	485b      	ldr	r0, [pc, #364]	; (8001200 <controlSingleLed+0x200>)
 8001094:	f000 fd11 	bl	8001aba <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	2102      	movs	r1, #2
 800109c:	4858      	ldr	r0, [pc, #352]	; (8001200 <controlSingleLed+0x200>)
 800109e:	f000 fd0c 	bl	8001aba <HAL_GPIO_WritePin>
					break;
 80010a2:	e02f      	b.n	8001104 <controlSingleLed+0x104>
					HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 80010a4:	2101      	movs	r1, #1
 80010a6:	4856      	ldr	r0, [pc, #344]	; (8001200 <controlSingleLed+0x200>)
 80010a8:	f000 fd1f 	bl	8001aea <HAL_GPIO_TogglePin>
					break;
 80010ac:	e02a      	b.n	8001104 <controlSingleLed+0x104>
					HAL_GPIO_TogglePin(YELLOW1_GPIO_Port, YELLOW1_Pin);
 80010ae:	2104      	movs	r1, #4
 80010b0:	4853      	ldr	r0, [pc, #332]	; (8001200 <controlSingleLed+0x200>)
 80010b2:	f000 fd1a 	bl	8001aea <HAL_GPIO_TogglePin>
					break;
 80010b6:	e025      	b.n	8001104 <controlSingleLed+0x104>
					HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 80010b8:	2102      	movs	r1, #2
 80010ba:	4851      	ldr	r0, [pc, #324]	; (8001200 <controlSingleLed+0x200>)
 80010bc:	f000 fd15 	bl	8001aea <HAL_GPIO_TogglePin>
					break;
 80010c0:	e020      	b.n	8001104 <controlSingleLed+0x104>
					HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2101      	movs	r1, #1
 80010c6:	484e      	ldr	r0, [pc, #312]	; (8001200 <controlSingleLed+0x200>)
 80010c8:	f000 fcf7 	bl	8001aba <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2104      	movs	r1, #4
 80010d0:	484b      	ldr	r0, [pc, #300]	; (8001200 <controlSingleLed+0x200>)
 80010d2:	f000 fcf2 	bl	8001aba <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2102      	movs	r1, #2
 80010da:	4849      	ldr	r0, [pc, #292]	; (8001200 <controlSingleLed+0x200>)
 80010dc:	f000 fced 	bl	8001aba <HAL_GPIO_WritePin>
					break;
 80010e0:	e010      	b.n	8001104 <controlSingleLed+0x104>
					HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 80010e2:	2201      	movs	r2, #1
 80010e4:	2101      	movs	r1, #1
 80010e6:	4846      	ldr	r0, [pc, #280]	; (8001200 <controlSingleLed+0x200>)
 80010e8:	f000 fce7 	bl	8001aba <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 80010ec:	2201      	movs	r2, #1
 80010ee:	2104      	movs	r1, #4
 80010f0:	4843      	ldr	r0, [pc, #268]	; (8001200 <controlSingleLed+0x200>)
 80010f2:	f000 fce2 	bl	8001aba <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 80010f6:	2201      	movs	r2, #1
 80010f8:	2102      	movs	r1, #2
 80010fa:	4841      	ldr	r0, [pc, #260]	; (8001200 <controlSingleLed+0x200>)
 80010fc:	f000 fcdd 	bl	8001aba <HAL_GPIO_WritePin>
					break;
 8001100:	e000      	b.n	8001104 <controlSingleLed+0x104>
					break;
 8001102:	bf00      	nop
			break;
 8001104:	e077      	b.n	80011f6 <controlSingleLed+0x1f6>
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	2b07      	cmp	r3, #7
 800110a:	d872      	bhi.n	80011f2 <controlSingleLed+0x1f2>
 800110c:	a201      	add	r2, pc, #4	; (adr r2, 8001114 <controlSingleLed+0x114>)
 800110e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001112:	bf00      	nop
 8001114:	08001135 	.word	0x08001135
 8001118:	08001155 	.word	0x08001155
 800111c:	08001175 	.word	0x08001175
 8001120:	08001195 	.word	0x08001195
 8001124:	080011a9 	.word	0x080011a9
 8001128:	0800119f 	.word	0x0800119f
 800112c:	080011b3 	.word	0x080011b3
 8001130:	080011d3 	.word	0x080011d3
					HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8001134:	2201      	movs	r2, #1
 8001136:	2108      	movs	r1, #8
 8001138:	4831      	ldr	r0, [pc, #196]	; (8001200 <controlSingleLed+0x200>)
 800113a:	f000 fcbe 	bl	8001aba <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	2120      	movs	r1, #32
 8001142:	482f      	ldr	r0, [pc, #188]	; (8001200 <controlSingleLed+0x200>)
 8001144:	f000 fcb9 	bl	8001aba <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	2110      	movs	r1, #16
 800114c:	482c      	ldr	r0, [pc, #176]	; (8001200 <controlSingleLed+0x200>)
 800114e:	f000 fcb4 	bl	8001aba <HAL_GPIO_WritePin>
					break;
 8001152:	e04f      	b.n	80011f4 <controlSingleLed+0x1f4>
					HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8001154:	2200      	movs	r2, #0
 8001156:	2108      	movs	r1, #8
 8001158:	4829      	ldr	r0, [pc, #164]	; (8001200 <controlSingleLed+0x200>)
 800115a:	f000 fcae 	bl	8001aba <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	2120      	movs	r1, #32
 8001162:	4827      	ldr	r0, [pc, #156]	; (8001200 <controlSingleLed+0x200>)
 8001164:	f000 fca9 	bl	8001aba <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 8001168:	2201      	movs	r2, #1
 800116a:	2110      	movs	r1, #16
 800116c:	4824      	ldr	r0, [pc, #144]	; (8001200 <controlSingleLed+0x200>)
 800116e:	f000 fca4 	bl	8001aba <HAL_GPIO_WritePin>
					break;
 8001172:	e03f      	b.n	80011f4 <controlSingleLed+0x1f4>
					HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	2108      	movs	r1, #8
 8001178:	4821      	ldr	r0, [pc, #132]	; (8001200 <controlSingleLed+0x200>)
 800117a:	f000 fc9e 	bl	8001aba <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 800117e:	2201      	movs	r2, #1
 8001180:	2120      	movs	r1, #32
 8001182:	481f      	ldr	r0, [pc, #124]	; (8001200 <controlSingleLed+0x200>)
 8001184:	f000 fc99 	bl	8001aba <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 8001188:	2200      	movs	r2, #0
 800118a:	2110      	movs	r1, #16
 800118c:	481c      	ldr	r0, [pc, #112]	; (8001200 <controlSingleLed+0x200>)
 800118e:	f000 fc94 	bl	8001aba <HAL_GPIO_WritePin>
					break;
 8001192:	e02f      	b.n	80011f4 <controlSingleLed+0x1f4>
					HAL_GPIO_TogglePin(RED2_GPIO_Port, RED2_Pin);
 8001194:	2108      	movs	r1, #8
 8001196:	481a      	ldr	r0, [pc, #104]	; (8001200 <controlSingleLed+0x200>)
 8001198:	f000 fca7 	bl	8001aea <HAL_GPIO_TogglePin>
					break;
 800119c:	e02a      	b.n	80011f4 <controlSingleLed+0x1f4>
					HAL_GPIO_TogglePin(YELLOW2_GPIO_Port, YELLOW2_Pin);
 800119e:	2120      	movs	r1, #32
 80011a0:	4817      	ldr	r0, [pc, #92]	; (8001200 <controlSingleLed+0x200>)
 80011a2:	f000 fca2 	bl	8001aea <HAL_GPIO_TogglePin>
					break;
 80011a6:	e025      	b.n	80011f4 <controlSingleLed+0x1f4>
					HAL_GPIO_TogglePin(GREEN2_GPIO_Port, GREEN2_Pin);
 80011a8:	2110      	movs	r1, #16
 80011aa:	4815      	ldr	r0, [pc, #84]	; (8001200 <controlSingleLed+0x200>)
 80011ac:	f000 fc9d 	bl	8001aea <HAL_GPIO_TogglePin>
					break;
 80011b0:	e020      	b.n	80011f4 <controlSingleLed+0x1f4>
					HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2108      	movs	r1, #8
 80011b6:	4812      	ldr	r0, [pc, #72]	; (8001200 <controlSingleLed+0x200>)
 80011b8:	f000 fc7f 	bl	8001aba <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 80011bc:	2200      	movs	r2, #0
 80011be:	2120      	movs	r1, #32
 80011c0:	480f      	ldr	r0, [pc, #60]	; (8001200 <controlSingleLed+0x200>)
 80011c2:	f000 fc7a 	bl	8001aba <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2110      	movs	r1, #16
 80011ca:	480d      	ldr	r0, [pc, #52]	; (8001200 <controlSingleLed+0x200>)
 80011cc:	f000 fc75 	bl	8001aba <HAL_GPIO_WritePin>
					break;
 80011d0:	e010      	b.n	80011f4 <controlSingleLed+0x1f4>
					HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 80011d2:	2201      	movs	r2, #1
 80011d4:	2108      	movs	r1, #8
 80011d6:	480a      	ldr	r0, [pc, #40]	; (8001200 <controlSingleLed+0x200>)
 80011d8:	f000 fc6f 	bl	8001aba <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 80011dc:	2201      	movs	r2, #1
 80011de:	2120      	movs	r1, #32
 80011e0:	4807      	ldr	r0, [pc, #28]	; (8001200 <controlSingleLed+0x200>)
 80011e2:	f000 fc6a 	bl	8001aba <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 80011e6:	2201      	movs	r2, #1
 80011e8:	2110      	movs	r1, #16
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <controlSingleLed+0x200>)
 80011ec:	f000 fc65 	bl	8001aba <HAL_GPIO_WritePin>
					break;
 80011f0:	e000      	b.n	80011f4 <controlSingleLed+0x1f4>
					break;
 80011f2:	bf00      	nop
			break;
 80011f4:	bf00      	nop
	}
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40010c00 	.word	0x40010c00

08001204 <runTimer>:

int counter4;
int flag4;

void runTimer()
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
	if (counter1 > 0)
 8001208:	4b21      	ldr	r3, [pc, #132]	; (8001290 <runTimer+0x8c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	dd0b      	ble.n	8001228 <runTimer+0x24>
	{
		counter1--;
 8001210:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <runTimer+0x8c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	3b01      	subs	r3, #1
 8001216:	4a1e      	ldr	r2, [pc, #120]	; (8001290 <runTimer+0x8c>)
 8001218:	6013      	str	r3, [r2, #0]
		if (counter1 <= 0)
 800121a:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <runTimer+0x8c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	dc02      	bgt.n	8001228 <runTimer+0x24>
		{
			flag1= 1;
 8001222:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <runTimer+0x90>)
 8001224:	2201      	movs	r2, #1
 8001226:	601a      	str	r2, [r3, #0]
		}
	}
	if (counter2 > 0)
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <runTimer+0x94>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	dd0b      	ble.n	8001248 <runTimer+0x44>
	{
		counter2--;
 8001230:	4b19      	ldr	r3, [pc, #100]	; (8001298 <runTimer+0x94>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	3b01      	subs	r3, #1
 8001236:	4a18      	ldr	r2, [pc, #96]	; (8001298 <runTimer+0x94>)
 8001238:	6013      	str	r3, [r2, #0]
		if (counter2 <= 0)
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <runTimer+0x94>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	dc02      	bgt.n	8001248 <runTimer+0x44>
		{
			flag2= 1;
 8001242:	4b16      	ldr	r3, [pc, #88]	; (800129c <runTimer+0x98>)
 8001244:	2201      	movs	r2, #1
 8001246:	601a      	str	r2, [r3, #0]
		}
	}
	if (counter3 > 0)
 8001248:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <runTimer+0x9c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	dd0b      	ble.n	8001268 <runTimer+0x64>
	{
		counter3--;
 8001250:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <runTimer+0x9c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	3b01      	subs	r3, #1
 8001256:	4a12      	ldr	r2, [pc, #72]	; (80012a0 <runTimer+0x9c>)
 8001258:	6013      	str	r3, [r2, #0]
		if (counter3 <= 0)
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <runTimer+0x9c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	dc02      	bgt.n	8001268 <runTimer+0x64>
		{
			flag3= 1;
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <runTimer+0xa0>)
 8001264:	2201      	movs	r2, #1
 8001266:	601a      	str	r2, [r3, #0]
		}
	}
	if (counter4 > 0)
 8001268:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <runTimer+0xa4>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	dd0b      	ble.n	8001288 <runTimer+0x84>
	{
		counter4--;
 8001270:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <runTimer+0xa4>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	3b01      	subs	r3, #1
 8001276:	4a0c      	ldr	r2, [pc, #48]	; (80012a8 <runTimer+0xa4>)
 8001278:	6013      	str	r3, [r2, #0]
		if (counter4 <= 0)
 800127a:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <runTimer+0xa4>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	dc02      	bgt.n	8001288 <runTimer+0x84>
		{
			flag4= 1;
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <runTimer+0xa8>)
 8001284:	2201      	movs	r2, #1
 8001286:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	20000134 	.word	0x20000134
 8001294:	20000140 	.word	0x20000140
 8001298:	2000014c 	.word	0x2000014c
 800129c:	20000138 	.word	0x20000138
 80012a0:	20000130 	.word	0x20000130
 80012a4:	20000148 	.word	0x20000148
 80012a8:	20000144 	.word	0x20000144
 80012ac:	2000013c 	.word	0x2000013c

080012b0 <setTimer1>:

void setTimer1(int duration)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	counter1= duration;
 80012b8:	4a05      	ldr	r2, [pc, #20]	; (80012d0 <setTimer1+0x20>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6013      	str	r3, [r2, #0]
	flag1= 0;
 80012be:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <setTimer1+0x24>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000134 	.word	0x20000134
 80012d4:	20000140 	.word	0x20000140

080012d8 <setTimer2>:

void setTimer2(int duration)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	counter2= duration;
 80012e0:	4a05      	ldr	r2, [pc, #20]	; (80012f8 <setTimer2+0x20>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6013      	str	r3, [r2, #0]
	flag2= 0;
 80012e6:	4b05      	ldr	r3, [pc, #20]	; (80012fc <setTimer2+0x24>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	2000014c 	.word	0x2000014c
 80012fc:	20000138 	.word	0x20000138

08001300 <setTimer3>:

void setTimer3(int duration)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	counter3= duration;
 8001308:	4a05      	ldr	r2, [pc, #20]	; (8001320 <setTimer3+0x20>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6013      	str	r3, [r2, #0]
	flag3= 0;
 800130e:	4b05      	ldr	r3, [pc, #20]	; (8001324 <setTimer3+0x24>)
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	20000130 	.word	0x20000130
 8001324:	20000148 	.word	0x20000148

08001328 <setTimer4>:

void setTimer4(int duration)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	counter4= duration;
 8001330:	4a05      	ldr	r2, [pc, #20]	; (8001348 <setTimer4+0x20>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6013      	str	r3, [r2, #0]
	flag4= 0;
 8001336:	4b05      	ldr	r3, [pc, #20]	; (800134c <setTimer4+0x24>)
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20000144 	.word	0x20000144
 800134c:	2000013c 	.word	0x2000013c

08001350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <HAL_MspInit+0x5c>)
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	4a14      	ldr	r2, [pc, #80]	; (80013ac <HAL_MspInit+0x5c>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6193      	str	r3, [r2, #24]
 8001362:	4b12      	ldr	r3, [pc, #72]	; (80013ac <HAL_MspInit+0x5c>)
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136e:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <HAL_MspInit+0x5c>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	4a0e      	ldr	r2, [pc, #56]	; (80013ac <HAL_MspInit+0x5c>)
 8001374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001378:	61d3      	str	r3, [r2, #28]
 800137a:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <HAL_MspInit+0x5c>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001386:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <HAL_MspInit+0x60>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	4a04      	ldr	r2, [pc, #16]	; (80013b0 <HAL_MspInit+0x60>)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a2:	bf00      	nop
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40010000 	.word	0x40010000

080013b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013c4:	d113      	bne.n	80013ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <HAL_TIM_Base_MspInit+0x44>)
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	4a0b      	ldr	r2, [pc, #44]	; (80013f8 <HAL_TIM_Base_MspInit+0x44>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	61d3      	str	r3, [r2, #28]
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <HAL_TIM_Base_MspInit+0x44>)
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2101      	movs	r1, #1
 80013e2:	201c      	movs	r0, #28
 80013e4:	f000 f9a1 	bl	800172a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013e8:	201c      	movs	r0, #28
 80013ea:	f000 f9ba 	bl	8001762 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40021000 	.word	0x40021000

080013fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <NMI_Handler+0x4>

08001402 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001406:	e7fe      	b.n	8001406 <HardFault_Handler+0x4>

08001408 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800140c:	e7fe      	b.n	800140c <MemManage_Handler+0x4>

0800140e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001412:	e7fe      	b.n	8001412 <BusFault_Handler+0x4>

08001414 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001418:	e7fe      	b.n	8001418 <UsageFault_Handler+0x4>

0800141a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr

08001426 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr

08001432 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr

0800143e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001442:	f000 f87f 	bl	8001544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001450:	4802      	ldr	r0, [pc, #8]	; (800145c <TIM2_IRQHandler+0x10>)
 8001452:	f000 ffe7 	bl	8002424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200000d0 	.word	0x200000d0

08001460 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800146c:	480c      	ldr	r0, [pc, #48]	; (80014a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800146e:	490d      	ldr	r1, [pc, #52]	; (80014a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001470:	4a0d      	ldr	r2, [pc, #52]	; (80014a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001474:	e002      	b.n	800147c <LoopCopyDataInit>

08001476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147a:	3304      	adds	r3, #4

0800147c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800147c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800147e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001480:	d3f9      	bcc.n	8001476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001482:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001484:	4c0a      	ldr	r4, [pc, #40]	; (80014b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001488:	e001      	b.n	800148e <LoopFillZerobss>

0800148a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800148c:	3204      	adds	r2, #4

0800148e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800148e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001490:	d3fb      	bcc.n	800148a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001492:	f7ff ffe5 	bl	8001460 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001496:	f001 fb0d 	bl	8002ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800149a:	f7ff f80b 	bl	80004b4 <main>
  bx lr
 800149e:	4770      	bx	lr
  ldr r0, =_sdata
 80014a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a4:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80014a8:	08002b4c 	.word	0x08002b4c
  ldr r2, =_sbss
 80014ac:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80014b0:	20000154 	.word	0x20000154

080014b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014b4:	e7fe      	b.n	80014b4 <ADC1_2_IRQHandler>
	...

080014b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014bc:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <HAL_Init+0x28>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a07      	ldr	r2, [pc, #28]	; (80014e0 <HAL_Init+0x28>)
 80014c2:	f043 0310 	orr.w	r3, r3, #16
 80014c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c8:	2003      	movs	r0, #3
 80014ca:	f000 f923 	bl	8001714 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ce:	200f      	movs	r0, #15
 80014d0:	f000 f808 	bl	80014e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014d4:	f7ff ff3c 	bl	8001350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40022000 	.word	0x40022000

080014e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <HAL_InitTick+0x54>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <HAL_InitTick+0x58>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	4619      	mov	r1, r3
 80014f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80014fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001502:	4618      	mov	r0, r3
 8001504:	f000 f93b 	bl	800177e <HAL_SYSTICK_Config>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e00e      	b.n	8001530 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b0f      	cmp	r3, #15
 8001516:	d80a      	bhi.n	800152e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001518:	2200      	movs	r2, #0
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	f04f 30ff 	mov.w	r0, #4294967295
 8001520:	f000 f903 	bl	800172a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001524:	4a06      	ldr	r2, [pc, #24]	; (8001540 <HAL_InitTick+0x5c>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800152a:	2300      	movs	r3, #0
 800152c:	e000      	b.n	8001530 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
}
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000098 	.word	0x20000098
 800153c:	200000a0 	.word	0x200000a0
 8001540:	2000009c 	.word	0x2000009c

08001544 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <HAL_IncTick+0x1c>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	4b05      	ldr	r3, [pc, #20]	; (8001564 <HAL_IncTick+0x20>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4413      	add	r3, r2
 8001554:	4a03      	ldr	r2, [pc, #12]	; (8001564 <HAL_IncTick+0x20>)
 8001556:	6013      	str	r3, [r2, #0]
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	200000a0 	.word	0x200000a0
 8001564:	20000150 	.word	0x20000150

08001568 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return uwTick;
 800156c:	4b02      	ldr	r3, [pc, #8]	; (8001578 <HAL_GetTick+0x10>)
 800156e:	681b      	ldr	r3, [r3, #0]
}
 8001570:	4618      	mov	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	20000150 	.word	0x20000150

0800157c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001598:	4013      	ands	r3, r2
 800159a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ae:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	60d3      	str	r3, [r2, #12]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <__NVIC_GetPriorityGrouping+0x18>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	0a1b      	lsrs	r3, r3, #8
 80015ce:	f003 0307 	and.w	r3, r3, #7
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	db0b      	blt.n	800160a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	f003 021f 	and.w	r2, r3, #31
 80015f8:	4906      	ldr	r1, [pc, #24]	; (8001614 <__NVIC_EnableIRQ+0x34>)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	095b      	lsrs	r3, r3, #5
 8001600:	2001      	movs	r0, #1
 8001602:	fa00 f202 	lsl.w	r2, r0, r2
 8001606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	e000e100 	.word	0xe000e100

08001618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	6039      	str	r1, [r7, #0]
 8001622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001628:	2b00      	cmp	r3, #0
 800162a:	db0a      	blt.n	8001642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	b2da      	uxtb	r2, r3
 8001630:	490c      	ldr	r1, [pc, #48]	; (8001664 <__NVIC_SetPriority+0x4c>)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	0112      	lsls	r2, r2, #4
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	440b      	add	r3, r1
 800163c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001640:	e00a      	b.n	8001658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4908      	ldr	r1, [pc, #32]	; (8001668 <__NVIC_SetPriority+0x50>)
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	f003 030f 	and.w	r3, r3, #15
 800164e:	3b04      	subs	r3, #4
 8001650:	0112      	lsls	r2, r2, #4
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	440b      	add	r3, r1
 8001656:	761a      	strb	r2, [r3, #24]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000e100 	.word	0xe000e100
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800166c:	b480      	push	{r7}
 800166e:	b089      	sub	sp, #36	; 0x24
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f1c3 0307 	rsb	r3, r3, #7
 8001686:	2b04      	cmp	r3, #4
 8001688:	bf28      	it	cs
 800168a:	2304      	movcs	r3, #4
 800168c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3304      	adds	r3, #4
 8001692:	2b06      	cmp	r3, #6
 8001694:	d902      	bls.n	800169c <NVIC_EncodePriority+0x30>
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3b03      	subs	r3, #3
 800169a:	e000      	b.n	800169e <NVIC_EncodePriority+0x32>
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a0:	f04f 32ff 	mov.w	r2, #4294967295
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43da      	mvns	r2, r3
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	401a      	ands	r2, r3
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b4:	f04f 31ff 	mov.w	r1, #4294967295
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	fa01 f303 	lsl.w	r3, r1, r3
 80016be:	43d9      	mvns	r1, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c4:	4313      	orrs	r3, r2
         );
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3724      	adds	r7, #36	; 0x24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr

080016d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3b01      	subs	r3, #1
 80016dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016e0:	d301      	bcc.n	80016e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016e2:	2301      	movs	r3, #1
 80016e4:	e00f      	b.n	8001706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016e6:	4a0a      	ldr	r2, [pc, #40]	; (8001710 <SysTick_Config+0x40>)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ee:	210f      	movs	r1, #15
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295
 80016f4:	f7ff ff90 	bl	8001618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <SysTick_Config+0x40>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016fe:	4b04      	ldr	r3, [pc, #16]	; (8001710 <SysTick_Config+0x40>)
 8001700:	2207      	movs	r2, #7
 8001702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	e000e010 	.word	0xe000e010

08001714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff ff2d 	bl	800157c <__NVIC_SetPriorityGrouping>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800172a:	b580      	push	{r7, lr}
 800172c:	b086      	sub	sp, #24
 800172e:	af00      	add	r7, sp, #0
 8001730:	4603      	mov	r3, r0
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
 8001736:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800173c:	f7ff ff42 	bl	80015c4 <__NVIC_GetPriorityGrouping>
 8001740:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	68b9      	ldr	r1, [r7, #8]
 8001746:	6978      	ldr	r0, [r7, #20]
 8001748:	f7ff ff90 	bl	800166c <NVIC_EncodePriority>
 800174c:	4602      	mov	r2, r0
 800174e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001752:	4611      	mov	r1, r2
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff5f 	bl	8001618 <__NVIC_SetPriority>
}
 800175a:	bf00      	nop
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	4603      	mov	r3, r0
 800176a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800176c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff35 	bl	80015e0 <__NVIC_EnableIRQ>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ffa2 	bl	80016d0 <SysTick_Config>
 800178c:	4603      	mov	r3, r0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001798:	b480      	push	{r7}
 800179a:	b08b      	sub	sp, #44	; 0x2c
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017a2:	2300      	movs	r3, #0
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017a6:	2300      	movs	r3, #0
 80017a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017aa:	e148      	b.n	8001a3e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017ac:	2201      	movs	r2, #1
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	69fa      	ldr	r2, [r7, #28]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	f040 8137 	bne.w	8001a38 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	4aa3      	ldr	r2, [pc, #652]	; (8001a5c <HAL_GPIO_Init+0x2c4>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d05e      	beq.n	8001892 <HAL_GPIO_Init+0xfa>
 80017d4:	4aa1      	ldr	r2, [pc, #644]	; (8001a5c <HAL_GPIO_Init+0x2c4>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d875      	bhi.n	80018c6 <HAL_GPIO_Init+0x12e>
 80017da:	4aa1      	ldr	r2, [pc, #644]	; (8001a60 <HAL_GPIO_Init+0x2c8>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d058      	beq.n	8001892 <HAL_GPIO_Init+0xfa>
 80017e0:	4a9f      	ldr	r2, [pc, #636]	; (8001a60 <HAL_GPIO_Init+0x2c8>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d86f      	bhi.n	80018c6 <HAL_GPIO_Init+0x12e>
 80017e6:	4a9f      	ldr	r2, [pc, #636]	; (8001a64 <HAL_GPIO_Init+0x2cc>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d052      	beq.n	8001892 <HAL_GPIO_Init+0xfa>
 80017ec:	4a9d      	ldr	r2, [pc, #628]	; (8001a64 <HAL_GPIO_Init+0x2cc>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d869      	bhi.n	80018c6 <HAL_GPIO_Init+0x12e>
 80017f2:	4a9d      	ldr	r2, [pc, #628]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d04c      	beq.n	8001892 <HAL_GPIO_Init+0xfa>
 80017f8:	4a9b      	ldr	r2, [pc, #620]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d863      	bhi.n	80018c6 <HAL_GPIO_Init+0x12e>
 80017fe:	4a9b      	ldr	r2, [pc, #620]	; (8001a6c <HAL_GPIO_Init+0x2d4>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d046      	beq.n	8001892 <HAL_GPIO_Init+0xfa>
 8001804:	4a99      	ldr	r2, [pc, #612]	; (8001a6c <HAL_GPIO_Init+0x2d4>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d85d      	bhi.n	80018c6 <HAL_GPIO_Init+0x12e>
 800180a:	2b12      	cmp	r3, #18
 800180c:	d82a      	bhi.n	8001864 <HAL_GPIO_Init+0xcc>
 800180e:	2b12      	cmp	r3, #18
 8001810:	d859      	bhi.n	80018c6 <HAL_GPIO_Init+0x12e>
 8001812:	a201      	add	r2, pc, #4	; (adr r2, 8001818 <HAL_GPIO_Init+0x80>)
 8001814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001818:	08001893 	.word	0x08001893
 800181c:	0800186d 	.word	0x0800186d
 8001820:	0800187f 	.word	0x0800187f
 8001824:	080018c1 	.word	0x080018c1
 8001828:	080018c7 	.word	0x080018c7
 800182c:	080018c7 	.word	0x080018c7
 8001830:	080018c7 	.word	0x080018c7
 8001834:	080018c7 	.word	0x080018c7
 8001838:	080018c7 	.word	0x080018c7
 800183c:	080018c7 	.word	0x080018c7
 8001840:	080018c7 	.word	0x080018c7
 8001844:	080018c7 	.word	0x080018c7
 8001848:	080018c7 	.word	0x080018c7
 800184c:	080018c7 	.word	0x080018c7
 8001850:	080018c7 	.word	0x080018c7
 8001854:	080018c7 	.word	0x080018c7
 8001858:	080018c7 	.word	0x080018c7
 800185c:	08001875 	.word	0x08001875
 8001860:	08001889 	.word	0x08001889
 8001864:	4a82      	ldr	r2, [pc, #520]	; (8001a70 <HAL_GPIO_Init+0x2d8>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d013      	beq.n	8001892 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800186a:	e02c      	b.n	80018c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	623b      	str	r3, [r7, #32]
          break;
 8001872:	e029      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	3304      	adds	r3, #4
 800187a:	623b      	str	r3, [r7, #32]
          break;
 800187c:	e024      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	3308      	adds	r3, #8
 8001884:	623b      	str	r3, [r7, #32]
          break;
 8001886:	e01f      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	330c      	adds	r3, #12
 800188e:	623b      	str	r3, [r7, #32]
          break;
 8001890:	e01a      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d102      	bne.n	80018a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800189a:	2304      	movs	r3, #4
 800189c:	623b      	str	r3, [r7, #32]
          break;
 800189e:	e013      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d105      	bne.n	80018b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018a8:	2308      	movs	r3, #8
 80018aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	69fa      	ldr	r2, [r7, #28]
 80018b0:	611a      	str	r2, [r3, #16]
          break;
 80018b2:	e009      	b.n	80018c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018b4:	2308      	movs	r3, #8
 80018b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69fa      	ldr	r2, [r7, #28]
 80018bc:	615a      	str	r2, [r3, #20]
          break;
 80018be:	e003      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018c0:	2300      	movs	r3, #0
 80018c2:	623b      	str	r3, [r7, #32]
          break;
 80018c4:	e000      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          break;
 80018c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	2bff      	cmp	r3, #255	; 0xff
 80018cc:	d801      	bhi.n	80018d2 <HAL_GPIO_Init+0x13a>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	e001      	b.n	80018d6 <HAL_GPIO_Init+0x13e>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3304      	adds	r3, #4
 80018d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	2bff      	cmp	r3, #255	; 0xff
 80018dc:	d802      	bhi.n	80018e4 <HAL_GPIO_Init+0x14c>
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	e002      	b.n	80018ea <HAL_GPIO_Init+0x152>
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	3b08      	subs	r3, #8
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	210f      	movs	r1, #15
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	fa01 f303 	lsl.w	r3, r1, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	401a      	ands	r2, r3
 80018fc:	6a39      	ldr	r1, [r7, #32]
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	fa01 f303 	lsl.w	r3, r1, r3
 8001904:	431a      	orrs	r2, r3
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 8090 	beq.w	8001a38 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001918:	4b56      	ldr	r3, [pc, #344]	; (8001a74 <HAL_GPIO_Init+0x2dc>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	4a55      	ldr	r2, [pc, #340]	; (8001a74 <HAL_GPIO_Init+0x2dc>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	6193      	str	r3, [r2, #24]
 8001924:	4b53      	ldr	r3, [pc, #332]	; (8001a74 <HAL_GPIO_Init+0x2dc>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001930:	4a51      	ldr	r2, [pc, #324]	; (8001a78 <HAL_GPIO_Init+0x2e0>)
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	089b      	lsrs	r3, r3, #2
 8001936:	3302      	adds	r3, #2
 8001938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	220f      	movs	r2, #15
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	4013      	ands	r3, r2
 8001952:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a49      	ldr	r2, [pc, #292]	; (8001a7c <HAL_GPIO_Init+0x2e4>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d00d      	beq.n	8001978 <HAL_GPIO_Init+0x1e0>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a48      	ldr	r2, [pc, #288]	; (8001a80 <HAL_GPIO_Init+0x2e8>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d007      	beq.n	8001974 <HAL_GPIO_Init+0x1dc>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a47      	ldr	r2, [pc, #284]	; (8001a84 <HAL_GPIO_Init+0x2ec>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d101      	bne.n	8001970 <HAL_GPIO_Init+0x1d8>
 800196c:	2302      	movs	r3, #2
 800196e:	e004      	b.n	800197a <HAL_GPIO_Init+0x1e2>
 8001970:	2303      	movs	r3, #3
 8001972:	e002      	b.n	800197a <HAL_GPIO_Init+0x1e2>
 8001974:	2301      	movs	r3, #1
 8001976:	e000      	b.n	800197a <HAL_GPIO_Init+0x1e2>
 8001978:	2300      	movs	r3, #0
 800197a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800197c:	f002 0203 	and.w	r2, r2, #3
 8001980:	0092      	lsls	r2, r2, #2
 8001982:	4093      	lsls	r3, r2
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	4313      	orrs	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800198a:	493b      	ldr	r1, [pc, #236]	; (8001a78 <HAL_GPIO_Init+0x2e0>)
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	089b      	lsrs	r3, r3, #2
 8001990:	3302      	adds	r3, #2
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d006      	beq.n	80019b2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019a4:	4b38      	ldr	r3, [pc, #224]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4937      	ldr	r1, [pc, #220]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	600b      	str	r3, [r1, #0]
 80019b0:	e006      	b.n	80019c0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019b2:	4b35      	ldr	r3, [pc, #212]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	43db      	mvns	r3, r3
 80019ba:	4933      	ldr	r1, [pc, #204]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 80019bc:	4013      	ands	r3, r2
 80019be:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d006      	beq.n	80019da <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019cc:	4b2e      	ldr	r3, [pc, #184]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	492d      	ldr	r1, [pc, #180]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	604b      	str	r3, [r1, #4]
 80019d8:	e006      	b.n	80019e8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019da:	4b2b      	ldr	r3, [pc, #172]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	43db      	mvns	r3, r3
 80019e2:	4929      	ldr	r1, [pc, #164]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d006      	beq.n	8001a02 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019f4:	4b24      	ldr	r3, [pc, #144]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	4923      	ldr	r1, [pc, #140]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	608b      	str	r3, [r1, #8]
 8001a00:	e006      	b.n	8001a10 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a02:	4b21      	ldr	r3, [pc, #132]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 8001a04:	689a      	ldr	r2, [r3, #8]
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	491f      	ldr	r1, [pc, #124]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d006      	beq.n	8001a2a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a1c:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 8001a1e:	68da      	ldr	r2, [r3, #12]
 8001a20:	4919      	ldr	r1, [pc, #100]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	60cb      	str	r3, [r1, #12]
 8001a28:	e006      	b.n	8001a38 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a2a:	4b17      	ldr	r3, [pc, #92]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 8001a2c:	68da      	ldr	r2, [r3, #12]
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	43db      	mvns	r3, r3
 8001a32:	4915      	ldr	r1, [pc, #84]	; (8001a88 <HAL_GPIO_Init+0x2f0>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	fa22 f303 	lsr.w	r3, r2, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f47f aeaf 	bne.w	80017ac <HAL_GPIO_Init+0x14>
  }
}
 8001a4e:	bf00      	nop
 8001a50:	bf00      	nop
 8001a52:	372c      	adds	r7, #44	; 0x2c
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	10320000 	.word	0x10320000
 8001a60:	10310000 	.word	0x10310000
 8001a64:	10220000 	.word	0x10220000
 8001a68:	10210000 	.word	0x10210000
 8001a6c:	10120000 	.word	0x10120000
 8001a70:	10110000 	.word	0x10110000
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40010000 	.word	0x40010000
 8001a7c:	40010800 	.word	0x40010800
 8001a80:	40010c00 	.word	0x40010c00
 8001a84:	40011000 	.word	0x40011000
 8001a88:	40010400 	.word	0x40010400

08001a8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	887b      	ldrh	r3, [r7, #2]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d002      	beq.n	8001aaa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	73fb      	strb	r3, [r7, #15]
 8001aa8:	e001      	b.n	8001aae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr

08001aba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	807b      	strh	r3, [r7, #2]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aca:	787b      	ldrb	r3, [r7, #1]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d003      	beq.n	8001ad8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ad0:	887a      	ldrh	r2, [r7, #2]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ad6:	e003      	b.n	8001ae0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ad8:	887b      	ldrh	r3, [r7, #2]
 8001ada:	041a      	lsls	r2, r3, #16
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	611a      	str	r2, [r3, #16]
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr

08001aea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b085      	sub	sp, #20
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	460b      	mov	r3, r1
 8001af4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001afc:	887a      	ldrh	r2, [r7, #2]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4013      	ands	r3, r2
 8001b02:	041a      	lsls	r2, r3, #16
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	43d9      	mvns	r1, r3
 8001b08:	887b      	ldrh	r3, [r7, #2]
 8001b0a:	400b      	ands	r3, r1
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	611a      	str	r2, [r3, #16]
}
 8001b12:	bf00      	nop
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e26c      	b.n	8002008 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 8087 	beq.w	8001c4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b3c:	4b92      	ldr	r3, [pc, #584]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 030c 	and.w	r3, r3, #12
 8001b44:	2b04      	cmp	r3, #4
 8001b46:	d00c      	beq.n	8001b62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b48:	4b8f      	ldr	r3, [pc, #572]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 030c 	and.w	r3, r3, #12
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d112      	bne.n	8001b7a <HAL_RCC_OscConfig+0x5e>
 8001b54:	4b8c      	ldr	r3, [pc, #560]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b60:	d10b      	bne.n	8001b7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b62:	4b89      	ldr	r3, [pc, #548]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d06c      	beq.n	8001c48 <HAL_RCC_OscConfig+0x12c>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d168      	bne.n	8001c48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e246      	b.n	8002008 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b82:	d106      	bne.n	8001b92 <HAL_RCC_OscConfig+0x76>
 8001b84:	4b80      	ldr	r3, [pc, #512]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a7f      	ldr	r2, [pc, #508]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b8e:	6013      	str	r3, [r2, #0]
 8001b90:	e02e      	b.n	8001bf0 <HAL_RCC_OscConfig+0xd4>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10c      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x98>
 8001b9a:	4b7b      	ldr	r3, [pc, #492]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a7a      	ldr	r2, [pc, #488]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	4b78      	ldr	r3, [pc, #480]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a77      	ldr	r2, [pc, #476]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	e01d      	b.n	8001bf0 <HAL_RCC_OscConfig+0xd4>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bbc:	d10c      	bne.n	8001bd8 <HAL_RCC_OscConfig+0xbc>
 8001bbe:	4b72      	ldr	r3, [pc, #456]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a71      	ldr	r2, [pc, #452]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	4b6f      	ldr	r3, [pc, #444]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a6e      	ldr	r2, [pc, #440]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	e00b      	b.n	8001bf0 <HAL_RCC_OscConfig+0xd4>
 8001bd8:	4b6b      	ldr	r3, [pc, #428]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a6a      	ldr	r2, [pc, #424]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001bde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be2:	6013      	str	r3, [r2, #0]
 8001be4:	4b68      	ldr	r3, [pc, #416]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a67      	ldr	r2, [pc, #412]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001bea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d013      	beq.n	8001c20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf8:	f7ff fcb6 	bl	8001568 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c00:	f7ff fcb2 	bl	8001568 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b64      	cmp	r3, #100	; 0x64
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e1fa      	b.n	8002008 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c12:	4b5d      	ldr	r3, [pc, #372]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0f0      	beq.n	8001c00 <HAL_RCC_OscConfig+0xe4>
 8001c1e:	e014      	b.n	8001c4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c20:	f7ff fca2 	bl	8001568 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c28:	f7ff fc9e 	bl	8001568 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b64      	cmp	r3, #100	; 0x64
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e1e6      	b.n	8002008 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3a:	4b53      	ldr	r3, [pc, #332]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x10c>
 8001c46:	e000      	b.n	8001c4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d063      	beq.n	8001d1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c56:	4b4c      	ldr	r3, [pc, #304]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 030c 	and.w	r3, r3, #12
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d00b      	beq.n	8001c7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c62:	4b49      	ldr	r3, [pc, #292]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 030c 	and.w	r3, r3, #12
 8001c6a:	2b08      	cmp	r3, #8
 8001c6c:	d11c      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x18c>
 8001c6e:	4b46      	ldr	r3, [pc, #280]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d116      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c7a:	4b43      	ldr	r3, [pc, #268]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d005      	beq.n	8001c92 <HAL_RCC_OscConfig+0x176>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d001      	beq.n	8001c92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e1ba      	b.n	8002008 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c92:	4b3d      	ldr	r3, [pc, #244]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	4939      	ldr	r1, [pc, #228]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ca6:	e03a      	b.n	8001d1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d020      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cb0:	4b36      	ldr	r3, [pc, #216]	; (8001d8c <HAL_RCC_OscConfig+0x270>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb6:	f7ff fc57 	bl	8001568 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cbe:	f7ff fc53 	bl	8001568 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e19b      	b.n	8002008 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd0:	4b2d      	ldr	r3, [pc, #180]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cdc:	4b2a      	ldr	r3, [pc, #168]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	695b      	ldr	r3, [r3, #20]
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	4927      	ldr	r1, [pc, #156]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	600b      	str	r3, [r1, #0]
 8001cf0:	e015      	b.n	8001d1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cf2:	4b26      	ldr	r3, [pc, #152]	; (8001d8c <HAL_RCC_OscConfig+0x270>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf8:	f7ff fc36 	bl	8001568 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d00:	f7ff fc32 	bl	8001568 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e17a      	b.n	8002008 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d12:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f0      	bne.n	8001d00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0308 	and.w	r3, r3, #8
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d03a      	beq.n	8001da0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d019      	beq.n	8001d66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d32:	4b17      	ldr	r3, [pc, #92]	; (8001d90 <HAL_RCC_OscConfig+0x274>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d38:	f7ff fc16 	bl	8001568 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d40:	f7ff fc12 	bl	8001568 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e15a      	b.n	8002008 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d52:	4b0d      	ldr	r3, [pc, #52]	; (8001d88 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0f0      	beq.n	8001d40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d5e:	2001      	movs	r0, #1
 8001d60:	f000 faa6 	bl	80022b0 <RCC_Delay>
 8001d64:	e01c      	b.n	8001da0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d66:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <HAL_RCC_OscConfig+0x274>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d6c:	f7ff fbfc 	bl	8001568 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d72:	e00f      	b.n	8001d94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d74:	f7ff fbf8 	bl	8001568 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d908      	bls.n	8001d94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e140      	b.n	8002008 <HAL_RCC_OscConfig+0x4ec>
 8001d86:	bf00      	nop
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	42420000 	.word	0x42420000
 8001d90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d94:	4b9e      	ldr	r3, [pc, #632]	; (8002010 <HAL_RCC_OscConfig+0x4f4>)
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1e9      	bne.n	8001d74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 80a6 	beq.w	8001efa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dae:	2300      	movs	r3, #0
 8001db0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001db2:	4b97      	ldr	r3, [pc, #604]	; (8002010 <HAL_RCC_OscConfig+0x4f4>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10d      	bne.n	8001dda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dbe:	4b94      	ldr	r3, [pc, #592]	; (8002010 <HAL_RCC_OscConfig+0x4f4>)
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	4a93      	ldr	r2, [pc, #588]	; (8002010 <HAL_RCC_OscConfig+0x4f4>)
 8001dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc8:	61d3      	str	r3, [r2, #28]
 8001dca:	4b91      	ldr	r3, [pc, #580]	; (8002010 <HAL_RCC_OscConfig+0x4f4>)
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dda:	4b8e      	ldr	r3, [pc, #568]	; (8002014 <HAL_RCC_OscConfig+0x4f8>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d118      	bne.n	8001e18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001de6:	4b8b      	ldr	r3, [pc, #556]	; (8002014 <HAL_RCC_OscConfig+0x4f8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a8a      	ldr	r2, [pc, #552]	; (8002014 <HAL_RCC_OscConfig+0x4f8>)
 8001dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001df2:	f7ff fbb9 	bl	8001568 <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dfa:	f7ff fbb5 	bl	8001568 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b64      	cmp	r3, #100	; 0x64
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e0fd      	b.n	8002008 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0c:	4b81      	ldr	r3, [pc, #516]	; (8002014 <HAL_RCC_OscConfig+0x4f8>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0f0      	beq.n	8001dfa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d106      	bne.n	8001e2e <HAL_RCC_OscConfig+0x312>
 8001e20:	4b7b      	ldr	r3, [pc, #492]	; (8002010 <HAL_RCC_OscConfig+0x4f4>)
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	4a7a      	ldr	r2, [pc, #488]	; (8002010 <HAL_RCC_OscConfig+0x4f4>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	6213      	str	r3, [r2, #32]
 8001e2c:	e02d      	b.n	8001e8a <HAL_RCC_OscConfig+0x36e>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10c      	bne.n	8001e50 <HAL_RCC_OscConfig+0x334>
 8001e36:	4b76      	ldr	r3, [pc, #472]	; (8002010 <HAL_RCC_OscConfig+0x4f4>)
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	4a75      	ldr	r2, [pc, #468]	; (8002010 <HAL_RCC_OscConfig+0x4f4>)
 8001e3c:	f023 0301 	bic.w	r3, r3, #1
 8001e40:	6213      	str	r3, [r2, #32]
 8001e42:	4b73      	ldr	r3, [pc, #460]	; (8002010 <HAL_RCC_OscConfig+0x4f4>)
 8001e44:	6a1b      	ldr	r3, [r3, #32]
 8001e46:	4a72      	ldr	r2, [pc, #456]	; (8002010 <HAL_RCC_OscConfig+0x4f4>)
 8001e48:	f023 0304 	bic.w	r3, r3, #4
 8001e4c:	6213      	str	r3, [r2, #32]
 8001e4e:	e01c      	b.n	8001e8a <HAL_RCC_OscConfig+0x36e>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	2b05      	cmp	r3, #5
 8001e56:	d10c      	bne.n	8001e72 <HAL_RCC_OscConfig+0x356>
 8001e58:	4b6d      	ldr	r3, [pc, #436]	; (8002010 <HAL_RCC_OscConfig+0x4f4>)
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	4a6c      	ldr	r2, [pc, #432]	; (8002010 <HAL_RCC_OscConfig+0x4f4>)
 8001e5e:	f043 0304 	orr.w	r3, r3, #4
 8001e62:	6213      	str	r3, [r2, #32]
 8001e64:	4b6a      	ldr	r3, [pc, #424]	; (8002010 <HAL_RCC_OscConfig+0x4f4>)
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	4a69      	ldr	r2, [pc, #420]	; (8002010 <HAL_RCC_OscConfig+0x4f4>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	6213      	str	r3, [r2, #32]
 8001e70:	e00b      	b.n	8001e8a <HAL_RCC_OscConfig+0x36e>
 8001e72:	4b67      	ldr	r3, [pc, #412]	; (8002010 <HAL_RCC_OscConfig+0x4f4>)
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	4a66      	ldr	r2, [pc, #408]	; (8002010 <HAL_RCC_OscConfig+0x4f4>)
 8001e78:	f023 0301 	bic.w	r3, r3, #1
 8001e7c:	6213      	str	r3, [r2, #32]
 8001e7e:	4b64      	ldr	r3, [pc, #400]	; (8002010 <HAL_RCC_OscConfig+0x4f4>)
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	4a63      	ldr	r2, [pc, #396]	; (8002010 <HAL_RCC_OscConfig+0x4f4>)
 8001e84:	f023 0304 	bic.w	r3, r3, #4
 8001e88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d015      	beq.n	8001ebe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e92:	f7ff fb69 	bl	8001568 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e98:	e00a      	b.n	8001eb0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e9a:	f7ff fb65 	bl	8001568 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e0ab      	b.n	8002008 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb0:	4b57      	ldr	r3, [pc, #348]	; (8002010 <HAL_RCC_OscConfig+0x4f4>)
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0ee      	beq.n	8001e9a <HAL_RCC_OscConfig+0x37e>
 8001ebc:	e014      	b.n	8001ee8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ebe:	f7ff fb53 	bl	8001568 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec4:	e00a      	b.n	8001edc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec6:	f7ff fb4f 	bl	8001568 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e095      	b.n	8002008 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001edc:	4b4c      	ldr	r3, [pc, #304]	; (8002010 <HAL_RCC_OscConfig+0x4f4>)
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1ee      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ee8:	7dfb      	ldrb	r3, [r7, #23]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d105      	bne.n	8001efa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eee:	4b48      	ldr	r3, [pc, #288]	; (8002010 <HAL_RCC_OscConfig+0x4f4>)
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	4a47      	ldr	r2, [pc, #284]	; (8002010 <HAL_RCC_OscConfig+0x4f4>)
 8001ef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ef8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 8081 	beq.w	8002006 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f04:	4b42      	ldr	r3, [pc, #264]	; (8002010 <HAL_RCC_OscConfig+0x4f4>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 030c 	and.w	r3, r3, #12
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	d061      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d146      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f18:	4b3f      	ldr	r3, [pc, #252]	; (8002018 <HAL_RCC_OscConfig+0x4fc>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1e:	f7ff fb23 	bl	8001568 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f26:	f7ff fb1f 	bl	8001568 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e067      	b.n	8002008 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f38:	4b35      	ldr	r3, [pc, #212]	; (8002010 <HAL_RCC_OscConfig+0x4f4>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1f0      	bne.n	8001f26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f4c:	d108      	bne.n	8001f60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f4e:	4b30      	ldr	r3, [pc, #192]	; (8002010 <HAL_RCC_OscConfig+0x4f4>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	492d      	ldr	r1, [pc, #180]	; (8002010 <HAL_RCC_OscConfig+0x4f4>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f60:	4b2b      	ldr	r3, [pc, #172]	; (8002010 <HAL_RCC_OscConfig+0x4f4>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a19      	ldr	r1, [r3, #32]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f70:	430b      	orrs	r3, r1
 8001f72:	4927      	ldr	r1, [pc, #156]	; (8002010 <HAL_RCC_OscConfig+0x4f4>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f78:	4b27      	ldr	r3, [pc, #156]	; (8002018 <HAL_RCC_OscConfig+0x4fc>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7e:	f7ff faf3 	bl	8001568 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f86:	f7ff faef 	bl	8001568 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e037      	b.n	8002008 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f98:	4b1d      	ldr	r3, [pc, #116]	; (8002010 <HAL_RCC_OscConfig+0x4f4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0f0      	beq.n	8001f86 <HAL_RCC_OscConfig+0x46a>
 8001fa4:	e02f      	b.n	8002006 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa6:	4b1c      	ldr	r3, [pc, #112]	; (8002018 <HAL_RCC_OscConfig+0x4fc>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fac:	f7ff fadc 	bl	8001568 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb4:	f7ff fad8 	bl	8001568 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e020      	b.n	8002008 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc6:	4b12      	ldr	r3, [pc, #72]	; (8002010 <HAL_RCC_OscConfig+0x4f4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f0      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x498>
 8001fd2:	e018      	b.n	8002006 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e013      	b.n	8002008 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <HAL_RCC_OscConfig+0x4f4>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d106      	bne.n	8002002 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d001      	beq.n	8002006 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40021000 	.word	0x40021000
 8002014:	40007000 	.word	0x40007000
 8002018:	42420060 	.word	0x42420060

0800201c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e0d0      	b.n	80021d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002030:	4b6a      	ldr	r3, [pc, #424]	; (80021dc <HAL_RCC_ClockConfig+0x1c0>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0307 	and.w	r3, r3, #7
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	429a      	cmp	r2, r3
 800203c:	d910      	bls.n	8002060 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203e:	4b67      	ldr	r3, [pc, #412]	; (80021dc <HAL_RCC_ClockConfig+0x1c0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f023 0207 	bic.w	r2, r3, #7
 8002046:	4965      	ldr	r1, [pc, #404]	; (80021dc <HAL_RCC_ClockConfig+0x1c0>)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	4313      	orrs	r3, r2
 800204c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800204e:	4b63      	ldr	r3, [pc, #396]	; (80021dc <HAL_RCC_ClockConfig+0x1c0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	429a      	cmp	r2, r3
 800205a:	d001      	beq.n	8002060 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e0b8      	b.n	80021d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d020      	beq.n	80020ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	2b00      	cmp	r3, #0
 8002076:	d005      	beq.n	8002084 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002078:	4b59      	ldr	r3, [pc, #356]	; (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	4a58      	ldr	r2, [pc, #352]	; (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 800207e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002082:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0308 	and.w	r3, r3, #8
 800208c:	2b00      	cmp	r3, #0
 800208e:	d005      	beq.n	800209c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002090:	4b53      	ldr	r3, [pc, #332]	; (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	4a52      	ldr	r2, [pc, #328]	; (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002096:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800209a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800209c:	4b50      	ldr	r3, [pc, #320]	; (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	494d      	ldr	r1, [pc, #308]	; (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d040      	beq.n	800213c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d107      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c2:	4b47      	ldr	r3, [pc, #284]	; (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d115      	bne.n	80020fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e07f      	b.n	80021d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d107      	bne.n	80020ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020da:	4b41      	ldr	r3, [pc, #260]	; (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d109      	bne.n	80020fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e073      	b.n	80021d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ea:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e06b      	b.n	80021d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020fa:	4b39      	ldr	r3, [pc, #228]	; (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f023 0203 	bic.w	r2, r3, #3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	4936      	ldr	r1, [pc, #216]	; (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002108:	4313      	orrs	r3, r2
 800210a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800210c:	f7ff fa2c 	bl	8001568 <HAL_GetTick>
 8002110:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002112:	e00a      	b.n	800212a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002114:	f7ff fa28 	bl	8001568 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002122:	4293      	cmp	r3, r2
 8002124:	d901      	bls.n	800212a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e053      	b.n	80021d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212a:	4b2d      	ldr	r3, [pc, #180]	; (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f003 020c 	and.w	r2, r3, #12
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	429a      	cmp	r2, r3
 800213a:	d1eb      	bne.n	8002114 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800213c:	4b27      	ldr	r3, [pc, #156]	; (80021dc <HAL_RCC_ClockConfig+0x1c0>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	429a      	cmp	r2, r3
 8002148:	d210      	bcs.n	800216c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214a:	4b24      	ldr	r3, [pc, #144]	; (80021dc <HAL_RCC_ClockConfig+0x1c0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f023 0207 	bic.w	r2, r3, #7
 8002152:	4922      	ldr	r1, [pc, #136]	; (80021dc <HAL_RCC_ClockConfig+0x1c0>)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	4313      	orrs	r3, r2
 8002158:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215a:	4b20      	ldr	r3, [pc, #128]	; (80021dc <HAL_RCC_ClockConfig+0x1c0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d001      	beq.n	800216c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e032      	b.n	80021d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	2b00      	cmp	r3, #0
 8002176:	d008      	beq.n	800218a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002178:	4b19      	ldr	r3, [pc, #100]	; (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	4916      	ldr	r1, [pc, #88]	; (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002186:	4313      	orrs	r3, r2
 8002188:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0308 	and.w	r3, r3, #8
 8002192:	2b00      	cmp	r3, #0
 8002194:	d009      	beq.n	80021aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002196:	4b12      	ldr	r3, [pc, #72]	; (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	490e      	ldr	r1, [pc, #56]	; (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021aa:	f000 f821 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 80021ae:	4602      	mov	r2, r0
 80021b0:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	091b      	lsrs	r3, r3, #4
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	490a      	ldr	r1, [pc, #40]	; (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 80021bc:	5ccb      	ldrb	r3, [r1, r3]
 80021be:	fa22 f303 	lsr.w	r3, r2, r3
 80021c2:	4a09      	ldr	r2, [pc, #36]	; (80021e8 <HAL_RCC_ClockConfig+0x1cc>)
 80021c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021c6:	4b09      	ldr	r3, [pc, #36]	; (80021ec <HAL_RCC_ClockConfig+0x1d0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff f98a 	bl	80014e4 <HAL_InitTick>

  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40022000 	.word	0x40022000
 80021e0:	40021000 	.word	0x40021000
 80021e4:	08002b34 	.word	0x08002b34
 80021e8:	20000098 	.word	0x20000098
 80021ec:	2000009c 	.word	0x2000009c

080021f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f0:	b490      	push	{r4, r7}
 80021f2:	b08a      	sub	sp, #40	; 0x28
 80021f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021f6:	4b2a      	ldr	r3, [pc, #168]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021f8:	1d3c      	adds	r4, r7, #4
 80021fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002200:	f240 2301 	movw	r3, #513	; 0x201
 8002204:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
 800220a:	2300      	movs	r3, #0
 800220c:	61bb      	str	r3, [r7, #24]
 800220e:	2300      	movs	r3, #0
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002216:	2300      	movs	r3, #0
 8002218:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800221a:	4b22      	ldr	r3, [pc, #136]	; (80022a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b04      	cmp	r3, #4
 8002228:	d002      	beq.n	8002230 <HAL_RCC_GetSysClockFreq+0x40>
 800222a:	2b08      	cmp	r3, #8
 800222c:	d003      	beq.n	8002236 <HAL_RCC_GetSysClockFreq+0x46>
 800222e:	e02d      	b.n	800228c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002230:	4b1d      	ldr	r3, [pc, #116]	; (80022a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002232:	623b      	str	r3, [r7, #32]
      break;
 8002234:	e02d      	b.n	8002292 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	0c9b      	lsrs	r3, r3, #18
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002242:	4413      	add	r3, r2
 8002244:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002248:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d013      	beq.n	800227c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002254:	4b13      	ldr	r3, [pc, #76]	; (80022a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	0c5b      	lsrs	r3, r3, #17
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002262:	4413      	add	r3, r2
 8002264:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002268:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	4a0e      	ldr	r2, [pc, #56]	; (80022a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800226e:	fb02 f203 	mul.w	r2, r2, r3
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	fbb2 f3f3 	udiv	r3, r2, r3
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
 800227a:	e004      	b.n	8002286 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	4a0b      	ldr	r2, [pc, #44]	; (80022ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002280:	fb02 f303 	mul.w	r3, r2, r3
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	623b      	str	r3, [r7, #32]
      break;
 800228a:	e002      	b.n	8002292 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800228c:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800228e:	623b      	str	r3, [r7, #32]
      break;
 8002290:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002292:	6a3b      	ldr	r3, [r7, #32]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3728      	adds	r7, #40	; 0x28
 8002298:	46bd      	mov	sp, r7
 800229a:	bc90      	pop	{r4, r7}
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	08002b24 	.word	0x08002b24
 80022a4:	40021000 	.word	0x40021000
 80022a8:	007a1200 	.word	0x007a1200
 80022ac:	003d0900 	.word	0x003d0900

080022b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022b8:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <RCC_Delay+0x34>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a0a      	ldr	r2, [pc, #40]	; (80022e8 <RCC_Delay+0x38>)
 80022be:	fba2 2303 	umull	r2, r3, r2, r3
 80022c2:	0a5b      	lsrs	r3, r3, #9
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	fb02 f303 	mul.w	r3, r2, r3
 80022ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022cc:	bf00      	nop
  }
  while (Delay --);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	1e5a      	subs	r2, r3, #1
 80022d2:	60fa      	str	r2, [r7, #12]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1f9      	bne.n	80022cc <RCC_Delay+0x1c>
}
 80022d8:	bf00      	nop
 80022da:	bf00      	nop
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr
 80022e4:	20000098 	.word	0x20000098
 80022e8:	10624dd3 	.word	0x10624dd3

080022ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e041      	b.n	8002382 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d106      	bne.n	8002318 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7ff f84e 	bl	80013b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2202      	movs	r2, #2
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3304      	adds	r3, #4
 8002328:	4619      	mov	r1, r3
 800232a:	4610      	mov	r0, r2
 800232c:	f000 fa6a 	bl	8002804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
	...

0800238c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b01      	cmp	r3, #1
 800239e:	d001      	beq.n	80023a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e035      	b.n	8002410 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2202      	movs	r2, #2
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 0201 	orr.w	r2, r2, #1
 80023ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a16      	ldr	r2, [pc, #88]	; (800241c <HAL_TIM_Base_Start_IT+0x90>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d009      	beq.n	80023da <HAL_TIM_Base_Start_IT+0x4e>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ce:	d004      	beq.n	80023da <HAL_TIM_Base_Start_IT+0x4e>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a12      	ldr	r2, [pc, #72]	; (8002420 <HAL_TIM_Base_Start_IT+0x94>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d111      	bne.n	80023fe <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2b06      	cmp	r3, #6
 80023ea:	d010      	beq.n	800240e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0201 	orr.w	r2, r2, #1
 80023fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023fc:	e007      	b.n	800240e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f042 0201 	orr.w	r2, r2, #1
 800240c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40012c00 	.word	0x40012c00
 8002420:	40000400 	.word	0x40000400

08002424 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b02      	cmp	r3, #2
 8002438:	d122      	bne.n	8002480 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b02      	cmp	r3, #2
 8002446:	d11b      	bne.n	8002480 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f06f 0202 	mvn.w	r2, #2
 8002450:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f9b1 	bl	80027ce <HAL_TIM_IC_CaptureCallback>
 800246c:	e005      	b.n	800247a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f9a4 	bl	80027bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 f9b3 	bl	80027e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	f003 0304 	and.w	r3, r3, #4
 800248a:	2b04      	cmp	r3, #4
 800248c:	d122      	bne.n	80024d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b04      	cmp	r3, #4
 800249a:	d11b      	bne.n	80024d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f06f 0204 	mvn.w	r2, #4
 80024a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2202      	movs	r2, #2
 80024aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f987 	bl	80027ce <HAL_TIM_IC_CaptureCallback>
 80024c0:	e005      	b.n	80024ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f97a 	bl	80027bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 f989 	bl	80027e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d122      	bne.n	8002528 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	f003 0308 	and.w	r3, r3, #8
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	d11b      	bne.n	8002528 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f06f 0208 	mvn.w	r2, #8
 80024f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2204      	movs	r2, #4
 80024fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f95d 	bl	80027ce <HAL_TIM_IC_CaptureCallback>
 8002514:	e005      	b.n	8002522 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f950 	bl	80027bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f95f 	bl	80027e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	f003 0310 	and.w	r3, r3, #16
 8002532:	2b10      	cmp	r3, #16
 8002534:	d122      	bne.n	800257c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f003 0310 	and.w	r3, r3, #16
 8002540:	2b10      	cmp	r3, #16
 8002542:	d11b      	bne.n	800257c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f06f 0210 	mvn.w	r2, #16
 800254c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2208      	movs	r2, #8
 8002552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f933 	bl	80027ce <HAL_TIM_IC_CaptureCallback>
 8002568:	e005      	b.n	8002576 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f926 	bl	80027bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 f935 	bl	80027e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b01      	cmp	r3, #1
 8002588:	d10e      	bne.n	80025a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b01      	cmp	r3, #1
 8002596:	d107      	bne.n	80025a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f06f 0201 	mvn.w	r2, #1
 80025a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7fe fa4a 	bl	8000a3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b2:	2b80      	cmp	r3, #128	; 0x80
 80025b4:	d10e      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c0:	2b80      	cmp	r3, #128	; 0x80
 80025c2:	d107      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 fa67 	bl	8002aa2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025de:	2b40      	cmp	r3, #64	; 0x40
 80025e0:	d10e      	bne.n	8002600 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ec:	2b40      	cmp	r3, #64	; 0x40
 80025ee:	d107      	bne.n	8002600 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f8f9 	bl	80027f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	f003 0320 	and.w	r3, r3, #32
 800260a:	2b20      	cmp	r3, #32
 800260c:	d10e      	bne.n	800262c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f003 0320 	and.w	r3, r3, #32
 8002618:	2b20      	cmp	r3, #32
 800261a:	d107      	bne.n	800262c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f06f 0220 	mvn.w	r2, #32
 8002624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 fa32 	bl	8002a90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800262c:	bf00      	nop
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002644:	2b01      	cmp	r3, #1
 8002646:	d101      	bne.n	800264c <HAL_TIM_ConfigClockSource+0x18>
 8002648:	2302      	movs	r3, #2
 800264a:	e0b3      	b.n	80027b4 <HAL_TIM_ConfigClockSource+0x180>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800266a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002672:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002684:	d03e      	beq.n	8002704 <HAL_TIM_ConfigClockSource+0xd0>
 8002686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800268a:	f200 8087 	bhi.w	800279c <HAL_TIM_ConfigClockSource+0x168>
 800268e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002692:	f000 8085 	beq.w	80027a0 <HAL_TIM_ConfigClockSource+0x16c>
 8002696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800269a:	d87f      	bhi.n	800279c <HAL_TIM_ConfigClockSource+0x168>
 800269c:	2b70      	cmp	r3, #112	; 0x70
 800269e:	d01a      	beq.n	80026d6 <HAL_TIM_ConfigClockSource+0xa2>
 80026a0:	2b70      	cmp	r3, #112	; 0x70
 80026a2:	d87b      	bhi.n	800279c <HAL_TIM_ConfigClockSource+0x168>
 80026a4:	2b60      	cmp	r3, #96	; 0x60
 80026a6:	d050      	beq.n	800274a <HAL_TIM_ConfigClockSource+0x116>
 80026a8:	2b60      	cmp	r3, #96	; 0x60
 80026aa:	d877      	bhi.n	800279c <HAL_TIM_ConfigClockSource+0x168>
 80026ac:	2b50      	cmp	r3, #80	; 0x50
 80026ae:	d03c      	beq.n	800272a <HAL_TIM_ConfigClockSource+0xf6>
 80026b0:	2b50      	cmp	r3, #80	; 0x50
 80026b2:	d873      	bhi.n	800279c <HAL_TIM_ConfigClockSource+0x168>
 80026b4:	2b40      	cmp	r3, #64	; 0x40
 80026b6:	d058      	beq.n	800276a <HAL_TIM_ConfigClockSource+0x136>
 80026b8:	2b40      	cmp	r3, #64	; 0x40
 80026ba:	d86f      	bhi.n	800279c <HAL_TIM_ConfigClockSource+0x168>
 80026bc:	2b30      	cmp	r3, #48	; 0x30
 80026be:	d064      	beq.n	800278a <HAL_TIM_ConfigClockSource+0x156>
 80026c0:	2b30      	cmp	r3, #48	; 0x30
 80026c2:	d86b      	bhi.n	800279c <HAL_TIM_ConfigClockSource+0x168>
 80026c4:	2b20      	cmp	r3, #32
 80026c6:	d060      	beq.n	800278a <HAL_TIM_ConfigClockSource+0x156>
 80026c8:	2b20      	cmp	r3, #32
 80026ca:	d867      	bhi.n	800279c <HAL_TIM_ConfigClockSource+0x168>
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d05c      	beq.n	800278a <HAL_TIM_ConfigClockSource+0x156>
 80026d0:	2b10      	cmp	r3, #16
 80026d2:	d05a      	beq.n	800278a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80026d4:	e062      	b.n	800279c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6818      	ldr	r0, [r3, #0]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	6899      	ldr	r1, [r3, #8]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	f000 f95c 	bl	80029a2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	609a      	str	r2, [r3, #8]
      break;
 8002702:	e04e      	b.n	80027a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	6899      	ldr	r1, [r3, #8]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f000 f945 	bl	80029a2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002726:	609a      	str	r2, [r3, #8]
      break;
 8002728:	e03b      	b.n	80027a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6818      	ldr	r0, [r3, #0]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	6859      	ldr	r1, [r3, #4]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	461a      	mov	r2, r3
 8002738:	f000 f8bc 	bl	80028b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2150      	movs	r1, #80	; 0x50
 8002742:	4618      	mov	r0, r3
 8002744:	f000 f913 	bl	800296e <TIM_ITRx_SetConfig>
      break;
 8002748:	e02b      	b.n	80027a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6818      	ldr	r0, [r3, #0]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	6859      	ldr	r1, [r3, #4]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	461a      	mov	r2, r3
 8002758:	f000 f8da 	bl	8002910 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2160      	movs	r1, #96	; 0x60
 8002762:	4618      	mov	r0, r3
 8002764:	f000 f903 	bl	800296e <TIM_ITRx_SetConfig>
      break;
 8002768:	e01b      	b.n	80027a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6818      	ldr	r0, [r3, #0]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	6859      	ldr	r1, [r3, #4]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	461a      	mov	r2, r3
 8002778:	f000 f89c 	bl	80028b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2140      	movs	r1, #64	; 0x40
 8002782:	4618      	mov	r0, r3
 8002784:	f000 f8f3 	bl	800296e <TIM_ITRx_SetConfig>
      break;
 8002788:	e00b      	b.n	80027a2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4619      	mov	r1, r3
 8002794:	4610      	mov	r0, r2
 8002796:	f000 f8ea 	bl	800296e <TIM_ITRx_SetConfig>
        break;
 800279a:	e002      	b.n	80027a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800279c:	bf00      	nop
 800279e:	e000      	b.n	80027a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80027a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr

080027ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr

080027f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr

08002804 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a25      	ldr	r2, [pc, #148]	; (80028ac <TIM_Base_SetConfig+0xa8>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d007      	beq.n	800282c <TIM_Base_SetConfig+0x28>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002822:	d003      	beq.n	800282c <TIM_Base_SetConfig+0x28>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a22      	ldr	r2, [pc, #136]	; (80028b0 <TIM_Base_SetConfig+0xac>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d108      	bne.n	800283e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	4313      	orrs	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a1a      	ldr	r2, [pc, #104]	; (80028ac <TIM_Base_SetConfig+0xa8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d007      	beq.n	8002856 <TIM_Base_SetConfig+0x52>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800284c:	d003      	beq.n	8002856 <TIM_Base_SetConfig+0x52>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a17      	ldr	r2, [pc, #92]	; (80028b0 <TIM_Base_SetConfig+0xac>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d108      	bne.n	8002868 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800285c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	4313      	orrs	r3, r2
 8002866:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	4313      	orrs	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a07      	ldr	r2, [pc, #28]	; (80028ac <TIM_Base_SetConfig+0xa8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d103      	bne.n	800289c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	691a      	ldr	r2, [r3, #16]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	615a      	str	r2, [r3, #20]
}
 80028a2:	bf00      	nop
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr
 80028ac:	40012c00 	.word	0x40012c00
 80028b0:	40000400 	.word	0x40000400

080028b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b087      	sub	sp, #28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	f023 0201 	bic.w	r2, r3, #1
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f023 030a 	bic.w	r3, r3, #10
 80028f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	621a      	str	r2, [r3, #32]
}
 8002906:	bf00      	nop
 8002908:	371c      	adds	r7, #28
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr

08002910 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002910:	b480      	push	{r7}
 8002912:	b087      	sub	sp, #28
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	f023 0210 	bic.w	r2, r3, #16
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800293a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	031b      	lsls	r3, r3, #12
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	4313      	orrs	r3, r2
 8002944:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800294c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	4313      	orrs	r3, r2
 8002956:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	621a      	str	r2, [r3, #32]
}
 8002964:	bf00      	nop
 8002966:	371c      	adds	r7, #28
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr

0800296e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800296e:	b480      	push	{r7}
 8002970:	b085      	sub	sp, #20
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
 8002976:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002984:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4313      	orrs	r3, r2
 800298c:	f043 0307 	orr.w	r3, r3, #7
 8002990:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	609a      	str	r2, [r3, #8]
}
 8002998:	bf00      	nop
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr

080029a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b087      	sub	sp, #28
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	60f8      	str	r0, [r7, #12]
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	607a      	str	r2, [r7, #4]
 80029ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	021a      	lsls	r2, r3, #8
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	431a      	orrs	r2, r3
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	609a      	str	r2, [r3, #8]
}
 80029d6:	bf00      	nop
 80029d8:	371c      	adds	r7, #28
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr

080029e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d101      	bne.n	80029f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e041      	b.n	8002a7c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a14      	ldr	r2, [pc, #80]	; (8002a88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d009      	beq.n	8002a50 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a44:	d004      	beq.n	8002a50 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a10      	ldr	r2, [pc, #64]	; (8002a8c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d10c      	bne.n	8002a6a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	68ba      	ldr	r2, [r7, #8]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40012c00 	.word	0x40012c00
 8002a8c:	40000400 	.word	0x40000400

08002a90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr

08002ab4 <__libc_init_array>:
 8002ab4:	b570      	push	{r4, r5, r6, lr}
 8002ab6:	2600      	movs	r6, #0
 8002ab8:	4d0c      	ldr	r5, [pc, #48]	; (8002aec <__libc_init_array+0x38>)
 8002aba:	4c0d      	ldr	r4, [pc, #52]	; (8002af0 <__libc_init_array+0x3c>)
 8002abc:	1b64      	subs	r4, r4, r5
 8002abe:	10a4      	asrs	r4, r4, #2
 8002ac0:	42a6      	cmp	r6, r4
 8002ac2:	d109      	bne.n	8002ad8 <__libc_init_array+0x24>
 8002ac4:	f000 f822 	bl	8002b0c <_init>
 8002ac8:	2600      	movs	r6, #0
 8002aca:	4d0a      	ldr	r5, [pc, #40]	; (8002af4 <__libc_init_array+0x40>)
 8002acc:	4c0a      	ldr	r4, [pc, #40]	; (8002af8 <__libc_init_array+0x44>)
 8002ace:	1b64      	subs	r4, r4, r5
 8002ad0:	10a4      	asrs	r4, r4, #2
 8002ad2:	42a6      	cmp	r6, r4
 8002ad4:	d105      	bne.n	8002ae2 <__libc_init_array+0x2e>
 8002ad6:	bd70      	pop	{r4, r5, r6, pc}
 8002ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002adc:	4798      	blx	r3
 8002ade:	3601      	adds	r6, #1
 8002ae0:	e7ee      	b.n	8002ac0 <__libc_init_array+0xc>
 8002ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ae6:	4798      	blx	r3
 8002ae8:	3601      	adds	r6, #1
 8002aea:	e7f2      	b.n	8002ad2 <__libc_init_array+0x1e>
 8002aec:	08002b44 	.word	0x08002b44
 8002af0:	08002b44 	.word	0x08002b44
 8002af4:	08002b44 	.word	0x08002b44
 8002af8:	08002b48 	.word	0x08002b48

08002afc <memset>:
 8002afc:	4603      	mov	r3, r0
 8002afe:	4402      	add	r2, r0
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d100      	bne.n	8002b06 <memset+0xa>
 8002b04:	4770      	bx	lr
 8002b06:	f803 1b01 	strb.w	r1, [r3], #1
 8002b0a:	e7f9      	b.n	8002b00 <memset+0x4>

08002b0c <_init>:
 8002b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b0e:	bf00      	nop
 8002b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b12:	bc08      	pop	{r3}
 8002b14:	469e      	mov	lr, r3
 8002b16:	4770      	bx	lr

08002b18 <_fini>:
 8002b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b1a:	bf00      	nop
 8002b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b1e:	bc08      	pop	{r3}
 8002b20:	469e      	mov	lr, r3
 8002b22:	4770      	bx	lr
